{"version":3,"sources":["../src/StaticIntervalPollingController.ts"],"names":["StaticIntervalPollingController"],"mappings":";;;;;;;;;AAAA,SAAS,gBAAgB,wBAAwB;AAuBjD,SAAS,qCACP,MACA;AAzBF;AAAA,EA0BE,MAAeA,yCACL,mCAAmC,IAAI,EAEjD;AAAA,IAHA;AAAA;AAIE,yBAAS,cAA0D,CAAC;AAEpE,0CAAsC;AAAA;AAAA,IAEtC,kBAAkB,gBAAwB;AACxC,yBAAK,iBAAkB;AAAA,IACzB;AAAA,IAEA,oBAAoB;AAClB,aAAO,mBAAK;AAAA,IACd;AAAA,IAEA,+BACE,iBACA,SACA;AACA,UAAI,CAAC,mBAAK,kBAAiB;AACzB,cAAM,IAAI,MAAM,mDAAmD;AAAA,MACrE;AAEA,YAAM,MAAM,OAAO,iBAAiB,OAAO;AAC3C,YAAM,mBAAmB,mBAAK,cAAa,GAAG;AAC9C,WAAK,gCAAgC,GAAG;AAGxC,YAAM,aAAc,mBAAK,cAAa,GAAG,IAAI;AAAA;AAAA;AAAA,QAG3C,YAAY;AACV,cAAI;AACF,kBAAM,KAAK,aAAa,iBAAiB,OAAO;AAAA,UAClD,SAAS,OAAO;AACd,oBAAQ,MAAM,KAAK;AAAA,UACrB;AACA,cAAI,eAAe,mBAAK,cAAa,GAAG,GAAG;AACzC,iBAAK,+BAA+B,iBAAiB,OAAO;AAAA,UAC9D;AAAA,QACF;AAAA,QACA,mBAAmB,mBAAK,mBAAkB;AAAA,MAC5C;AAAA,IACF;AAAA,IAEA,gCAAgC,KAAwB;AACtD,YAAM,aAAa,mBAAK,cAAa,GAAG;AACxC,UAAI,YAAY;AACd,qBAAa,UAAU;AACvB,eAAO,mBAAK,cAAa,GAAG;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AAjDW;AAET;AAiDF,SAAOA;AACT;AAEA,IAAM,QAAN,MAAY;AAAC;AAEN,IAAM,sCACX,qCAAqC,KAAK;AACrC,IAAM,kCACX,qCAAqC,cAAc;AAC9C,IAAM,oCACX,qCAAqC,gBAAgB","sourcesContent":["import { BaseController, BaseControllerV1 } from '@metamask/base-controller';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport type { Json } from '@metamask/utils';\n\nimport {\n  AbstractPollingControllerBaseMixin,\n  getKey,\n} from './AbstractPollingController';\nimport type {\n  Constructor,\n  IPollingController,\n  PollingTokenSetId,\n} from './types';\n\n/**\n * StaticIntervalPollingControllerMixin\n * A polling controller that polls on a static interval.\n *\n * @param Base - The base class to mix onto.\n * @returns The composed class.\n */\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction StaticIntervalPollingControllerMixin<TBase extends Constructor>(\n  Base: TBase,\n) {\n  abstract class StaticIntervalPollingController\n    extends AbstractPollingControllerBaseMixin(Base)\n    implements IPollingController\n  {\n    readonly #intervalIds: Record<PollingTokenSetId, NodeJS.Timeout> = {};\n\n    #intervalLength: number | undefined = 1000;\n\n    setIntervalLength(intervalLength: number) {\n      this.#intervalLength = intervalLength;\n    }\n\n    getIntervalLength() {\n      return this.#intervalLength;\n    }\n\n    _startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ) {\n      if (!this.#intervalLength) {\n        throw new Error('intervalLength must be defined and greater than 0');\n      }\n\n      const key = getKey(networkClientId, options);\n      const existingInterval = this.#intervalIds[key];\n      this._stopPollingByPollingTokenSetId(key);\n\n      // eslint-disable-next-line no-multi-assign\n      const intervalId = (this.#intervalIds[key] = setTimeout(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async () => {\n          try {\n            await this._executePoll(networkClientId, options);\n          } catch (error) {\n            console.error(error);\n          }\n          if (intervalId === this.#intervalIds[key]) {\n            this._startPollingByNetworkClientId(networkClientId, options);\n          }\n        },\n        existingInterval ? this.#intervalLength : 0,\n      ));\n    }\n\n    _stopPollingByPollingTokenSetId(key: PollingTokenSetId) {\n      const intervalId = this.#intervalIds[key];\n      if (intervalId) {\n        clearTimeout(intervalId);\n        delete this.#intervalIds[key];\n      }\n    }\n  }\n\n  return StaticIntervalPollingController;\n}\n\nclass Empty {}\n\nexport const StaticIntervalPollingControllerOnly =\n  StaticIntervalPollingControllerMixin(Empty);\nexport const StaticIntervalPollingController =\n  StaticIntervalPollingControllerMixin(BaseController);\nexport const StaticIntervalPollingControllerV1 =\n  StaticIntervalPollingControllerMixin(BaseControllerV1);\n"]}