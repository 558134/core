{"version":3,"sources":["../src/NotificationController.ts"],"names":[],"mappings":";AAKA,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AA0BvB,IAAM,OAAO;AA+Cb,IAAM,WAAW;AAAA,EACf,eAAe,EAAE,SAAS,MAAM,WAAW,MAAM;AACnD;AAEA,IAAM,eAAe;AAAA,EACnB,eAAe,CAAC;AAClB;AAKO,IAAM,yBAAN,cAAqC,eAI1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAGG;AACD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,EAAE,GAAG,cAAc,GAAG,MAAM;AAAA,IACrC,CAAC;AAED,SAAK,gBAAgB;AAAA,MACnB,GAAG,IAAI;AAAA,MACP,CAAC,QAAgB,YAAoB,KAAK,KAAK,QAAQ,OAAO;AAAA,IAChE;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,IAAI;AAAA,MACP,CAAC,QAAkB,KAAK,QAAQ,GAAG;AAAA,IACrC;AAEA,SAAK,gBAAgB;AAAA,MACnB,GAAG,IAAI;AAAA,MACP,CAAC,QAAkB,KAAK,SAAS,GAAG;AAAA,IACtC;AAEA,SAAK,gBAAgB;AAAA,MAAsB,GAAG,IAAI;AAAA,MAAmB,MACnE,KAAK,MAAM;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,QAAgB,SAAiB;AACpC,UAAM,KAAK,OAAO;AAClB,UAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,MACA,aAAa,KAAK,IAAI;AAAA,MACtB,UAAU;AAAA,MACV;AAAA,IACF;AACA,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,cAAc,EAAE,IAAI;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,KAAe;AACrB,SAAK,OAAO,CAAC,UAAU;AACrB,iBAAW,MAAM,KAAK;AACpB,YAAI,YAAY,MAAM,eAAe,EAAE,GAAG;AACxC,iBAAO,MAAM,cAAc,EAAE;AAAA,QAC/B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,KAAe;AACtB,SAAK,OAAO,CAAC,UAAU;AACrB,iBAAW,MAAM,KAAK;AACpB,YAAI,YAAY,MAAM,eAAe,EAAE,GAAG;AACxC,gBAAM,cAAc,EAAE,EAAE,WAAW,KAAK,IAAI;AAAA,QAC9C;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACN,SAAK,OAAO,MAAM;AAChB,aAAO,EAAE,GAAG,aAAa;AAAA,IAC3B,CAAC;AAAA,EACH;AACF","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { hasProperty } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\n/**\n * @typedef NotificationControllerState\n * @property notifications - Stores existing notifications to be shown in the UI\n */\nexport type NotificationControllerState = {\n  notifications: Record<string, Notification>;\n};\n\n/**\n * @typedef Notification - Stores information about in-app notifications, to be shown in the UI\n * @property id - A UUID that identifies the notification\n * @property origin - The origin that requested the notification\n * @property createdDate - The notification creation date in milliseconds elapsed since the UNIX epoch\n * @property readDate - The notification read date in milliseconds elapsed since the UNIX epoch or null if unread\n * @property message - The notification message\n */\nexport type Notification = {\n  id: string;\n  origin: string;\n  createdDate: number;\n  readDate: number | null;\n  message: string;\n};\n\nconst name = 'NotificationController';\n\nexport type NotificationControllerStateChange = ControllerStateChangeEvent<\n  typeof name,\n  NotificationControllerState\n>;\n\nexport type GetNotificationControllerState = ControllerGetStateAction<\n  typeof name,\n  NotificationControllerState\n>;\n\nexport type ShowNotification = {\n  type: `${typeof name}:show`;\n  handler: NotificationController['show'];\n};\n\nexport type DismissNotification = {\n  type: `${typeof name}:dismiss`;\n  handler: NotificationController['dismiss'];\n};\n\nexport type MarkNotificationRead = {\n  type: `${typeof name}:markRead`;\n  handler: NotificationController['markRead'];\n};\n\nexport type ClearNotifications = {\n  type: `${typeof name}:clear`;\n  handler: NotificationController['clear'];\n};\n\nexport type NotificationControllerActions =\n  | GetNotificationControllerState\n  | ShowNotification\n  | DismissNotification\n  | MarkNotificationRead\n  | ClearNotifications;\n\nexport type NotificationControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  NotificationControllerActions,\n  NotificationControllerStateChange,\n  never,\n  never\n>;\n\nconst metadata = {\n  notifications: { persist: true, anonymous: false },\n};\n\nconst defaultState = {\n  notifications: {},\n};\n\n/**\n * Controller that handles storing notifications and showing them to the user\n */\nexport class NotificationController extends BaseController<\n  typeof name,\n  NotificationControllerState,\n  NotificationControllerMessenger\n> {\n  /**\n   * Creates a NotificationController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: NotificationControllerMessenger;\n    state?: Partial<NotificationControllerState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:show` as const,\n      (origin: string, message: string) => this.show(origin, message),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:dismiss` as const,\n      (ids: string[]) => this.dismiss(ids),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${name}:markRead` as const,\n      (ids: string[]) => this.markRead(ids),\n    );\n\n    this.messagingSystem.registerActionHandler(`${name}:clear` as const, () =>\n      this.clear(),\n    );\n  }\n\n  /**\n   * Shows a notification.\n   *\n   * @param origin - The origin trying to send a notification\n   * @param message - A message to show on the notification\n   */\n  show(origin: string, message: string) {\n    const id = nanoid();\n    const notification = {\n      id,\n      origin,\n      createdDate: Date.now(),\n      readDate: null,\n      message,\n    };\n    this.update((state) => {\n      state.notifications[id] = notification;\n    });\n  }\n\n  /**\n   * Dimisses a list of notifications.\n   *\n   * @param ids - A list of notification IDs\n   */\n  dismiss(ids: string[]) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (hasProperty(state.notifications, id)) {\n          delete state.notifications[id];\n        }\n      }\n    });\n  }\n\n  /**\n   * Marks a list of notifications as read.\n   *\n   * @param ids - A list of notification IDs\n   */\n  markRead(ids: string[]) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (hasProperty(state.notifications, id)) {\n          state.notifications[id].readDate = Date.now();\n        }\n      }\n    });\n  }\n\n  /**\n   * Clears the state of the controller, removing all notifications.\n   *\n   */\n  clear() {\n    this.update(() => {\n      return { ...defaultState };\n    });\n  }\n}\n"]}