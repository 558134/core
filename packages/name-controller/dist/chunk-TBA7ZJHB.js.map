{"version":3,"sources":["../src/providers/token.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,IAAM,KAAK;AACX,IAAM,QAAQ;AAEd,IAAM,MAAM,mBAAmB,eAAe,OAAO;AAbrD;AAeO,IAAM,oBAAN,MAAgD;AAAA,EAGrD,YAAY,EAAE,UAAU,IAAmC,CAAC,GAAG;AAF/D;AAGE,uBAAK,YAAa,cAAc,MAAM;AAAA,EACxC;AAAA,EAEA,cAAoC;AAClC,WAAO;AAAA,MACL,WAAW,EAAE,yCAA0B,GAAG,CAAC,EAAE,EAAE;AAAA,MAC/C,cAAc,EAAE,CAAC,EAAE,GAAG,MAAM;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,MAAM,iBACJ,SAC6B;AAC7B,QAAI,CAAC,mBAAK,YAAL,YAAmB;AACtB,UAAI,8BAA8B;AAElC,aAAO;AAAA,QACL,SAAS;AAAA,UACP,CAAC,EAAE,GAAG;AAAA,YACJ,eAAe,CAAC;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,EAAE,OAAO,WAAW,QAAQ,IAAI;AACtC,UAAM,MAAM,0CAA0C,OAAO,YAAY,KAAK;AAE9E,QAAI,mBAAmB,GAAG;AAE1B,QAAI;AACF,YAAM,eAAe,MAAM,YAAY,GAAG;AAC1C,YAAM,eAAe,aAAa;AAClC,YAAM,gBAAgB,eAAe,CAAC,YAAY,IAAI,CAAC;AAEvD,UAAI,sBAAsB,aAAa;AAEvC,aAAO;AAAA,QACL,SAAS;AAAA,UACP,CAAC,EAAE,GAAG;AAAA,YACJ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,UAAI,kBAAkB,KAAK;AAC3B,YAAM;AAAA,IACR;AAAA,EACF;AACF;AApDE","sourcesContent":["import { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  NameProvider,\n  NameProviderMetadata,\n  NameProviderRequest,\n  NameProviderResult,\n} from '../types';\nimport { NameType } from '../types';\nimport { handleFetch } from '../util';\n\nconst ID = 'token';\nconst LABEL = 'Blockchain (Token Name)';\n\nconst log = createModuleLogger(projectLogger, 'token');\n\nexport class TokenNameProvider implements NameProvider {\n  #isEnabled: () => boolean;\n\n  constructor({ isEnabled }: { isEnabled?: () => boolean } = {}) {\n    this.#isEnabled = isEnabled || (() => true);\n  }\n\n  getMetadata(): NameProviderMetadata {\n    return {\n      sourceIds: { [NameType.ETHEREUM_ADDRESS]: [ID] },\n      sourceLabels: { [ID]: LABEL },\n    };\n  }\n\n  async getProposedNames(\n    request: NameProviderRequest,\n  ): Promise<NameProviderResult> {\n    if (!this.#isEnabled()) {\n      log('Skipping request as disabled');\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames: [],\n          },\n        },\n      };\n    }\n\n    const { value, variation: chainId } = request;\n    const url = `https://token.api.cx.metamask.io/token/${chainId}?address=${value}`;\n\n    log('Sending request', url);\n\n    try {\n      const responseData = await handleFetch(url);\n      const proposedName = responseData.name;\n      const proposedNames = proposedName ? [proposedName] : [];\n\n      log('New proposed names', proposedNames);\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames,\n          },\n        },\n      };\n    } catch (error) {\n      log('Request failed', error);\n      throw error;\n    }\n  }\n}\n"]}