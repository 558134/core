{"version":3,"sources":["../src/providers/lens.ts"],"sourcesContent":["import { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  NameProvider,\n  NameProviderMetadata,\n  NameProviderRequest,\n  NameProviderResult,\n} from '../types';\nimport { NameType } from '../types';\nimport { graphQL } from '../util';\n\nconst ID = 'lens';\nconst LABEL = 'Lens Protocol';\nconst LENS_URL = `https://api.lens.dev`;\n\nconst QUERY = `\nquery HandlesForAddress($address: EthereumAddress!) {\n  profiles(request: { ownedBy: [$address] }) {\n    items {\n      handle\n    }\n  }\n}`;\n\nconst log = createModuleLogger(projectLogger, 'lens');\n\ntype LensResponse = {\n  profiles: {\n    items: [\n      {\n        handle: string;\n      },\n    ];\n  };\n};\n\nexport class LensNameProvider implements NameProvider {\n  #isEnabled: () => boolean;\n\n  constructor({ isEnabled }: { isEnabled?: () => boolean } = {}) {\n    this.#isEnabled = isEnabled || (() => true);\n  }\n\n  getMetadata(): NameProviderMetadata {\n    return {\n      sourceIds: { [NameType.ETHEREUM_ADDRESS]: [ID] },\n      sourceLabels: { [ID]: LABEL },\n    };\n  }\n\n  async getProposedNames(\n    request: NameProviderRequest,\n  ): Promise<NameProviderResult> {\n    if (!this.#isEnabled()) {\n      log('Skipping request as disabled');\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames: [],\n          },\n        },\n      };\n    }\n\n    const { value } = request;\n    const variables = { address: value };\n\n    log('Sending request', { variables });\n\n    try {\n      const responseData = await graphQL<LensResponse>(\n        LENS_URL,\n        QUERY,\n        variables,\n      );\n\n      const profiles = responseData?.profiles?.items ?? [];\n      const proposedNames = profiles.map((profile) => profile.handle);\n\n      log('New proposed names', proposedNames);\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames,\n          },\n        },\n      };\n    } catch (error) {\n      log('Request failed', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAUA,IAAM,KAAK;AACX,IAAM,QAAQ;AACd,IAAM,WAAW;AAEjB,IAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASd,IAAM,MAAM,mBAAmB,eAAe,MAAM;AAvBpD;AAmCO,IAAM,mBAAN,MAA+C;AAAA,EAGpD,YAAY,EAAE,UAAU,IAAmC,CAAC,GAAG;AAF/D;AAGE,uBAAK,YAAa,cAAc,MAAM;AAAA,EACxC;AAAA,EAEA,cAAoC;AAClC,WAAO;AAAA,MACL,WAAW,EAAE,yCAA0B,GAAG,CAAC,EAAE,EAAE;AAAA,MAC/C,cAAc,EAAE,CAAC,EAAE,GAAG,MAAM;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,MAAM,iBACJ,SAC6B;AAC7B,QAAI,CAAC,mBAAK,YAAL,YAAmB;AACtB,UAAI,8BAA8B;AAElC,aAAO;AAAA,QACL,SAAS;AAAA,UACP,CAAC,EAAE,GAAG;AAAA,YACJ,eAAe,CAAC;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,EAAE,MAAM,IAAI;AAClB,UAAM,YAAY,EAAE,SAAS,MAAM;AAEnC,QAAI,mBAAmB,EAAE,UAAU,CAAC;AAEpC,QAAI;AACF,YAAM,eAAe,MAAM;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,YAAM,WAAW,cAAc,UAAU,SAAS,CAAC;AACnD,YAAM,gBAAgB,SAAS,IAAI,CAAC,YAAY,QAAQ,MAAM;AAE9D,UAAI,sBAAsB,aAAa;AAEvC,aAAO;AAAA,QACL,SAAS;AAAA,UACP,CAAC,EAAE,GAAG;AAAA,YACJ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,UAAI,kBAAkB,KAAK;AAC3B,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAzDE;","names":[]}