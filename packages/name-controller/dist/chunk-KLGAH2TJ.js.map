{"version":3,"sources":["../src/providers/etherscan.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mutex } from 'async-mutex';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from '../constants';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  NameProvider,\n  NameProviderMetadata,\n  NameProviderRequest,\n  NameProviderResult,\n} from '../types';\nimport { NameType } from '../types';\nimport { handleFetch, assertIsError } from '../util';\n\nconst ID = 'etherscan';\nconst LABEL = 'Etherscan (Verified Contract Name)';\nconst RATE_LIMIT_UPDATE_DELAY = 5; // 5 Seconds\nconst RATE_LIMIT_INTERVAL = RATE_LIMIT_UPDATE_DELAY * 1000;\n\nconst log = createModuleLogger(projectLogger, 'etherscan');\n\ntype EtherscanGetSourceCodeResponse = {\n  status: '1' | '0';\n  message: string;\n  result: [\n    {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      SourceCode: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ABI: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ContractName: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      CompilerVersion: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      OptimizationUsed: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Runs: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ConstructorArguments: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Library: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      LicenseType: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Proxy: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Implementation: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      SwarmSource: string;\n    },\n  ];\n};\n\nexport class EtherscanNameProvider implements NameProvider {\n  #isEnabled: () => boolean;\n\n  #lastRequestTime = 0;\n\n  #mutex = new Mutex();\n\n  constructor({ isEnabled }: { isEnabled?: () => boolean } = {}) {\n    this.#isEnabled = isEnabled || (() => true);\n  }\n\n  getMetadata(): NameProviderMetadata {\n    return {\n      sourceIds: { [NameType.ETHEREUM_ADDRESS]: [ID] },\n      sourceLabels: { [ID]: LABEL },\n    };\n  }\n\n  async getProposedNames(\n    request: NameProviderRequest,\n  ): Promise<NameProviderResult> {\n    if (!this.#isEnabled()) {\n      log('Skipping request as disabled');\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames: [],\n          },\n        },\n      };\n    }\n\n    const releaseLock = await this.#mutex.acquire();\n\n    try {\n      const { value, variation: chainId } = request;\n\n      const time = Date.now();\n      const timeSinceLastRequest = time - this.#lastRequestTime;\n\n      if (timeSinceLastRequest < RATE_LIMIT_INTERVAL) {\n        log('Skipping request to avoid rate limit');\n\n        return {\n          results: {\n            [ID]: {\n              updateDelay: RATE_LIMIT_UPDATE_DELAY,\n            },\n          },\n        };\n      }\n\n      const url = this.#getUrl(chainId, {\n        module: 'contract',\n        action: 'getsourcecode',\n        address: value,\n      });\n\n      const { responseData, error } = await this.#sendRequest(url);\n\n      if (error) {\n        log('Request failed', error);\n        throw error;\n      }\n\n      if (responseData?.message === 'NOTOK') {\n        log('Request warning', responseData.result);\n\n        return {\n          results: {\n            [ID]: {\n              updateDelay: RATE_LIMIT_UPDATE_DELAY,\n            },\n          },\n        };\n      }\n\n      const results = responseData?.result ?? [];\n      const proposedNames = results.map((result) => result.ContractName);\n\n      log('New proposed names', proposedNames);\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames,\n          },\n        },\n      };\n    } finally {\n      releaseLock();\n    }\n  }\n\n  async #sendRequest(url: string): Promise<{\n    responseData?: EtherscanGetSourceCodeResponse;\n    error?: Error;\n  }> {\n    try {\n      log('Sending request', url);\n\n      const responseData = (await handleFetch(\n        url,\n      )) as EtherscanGetSourceCodeResponse;\n\n      return { responseData };\n    } catch (error) {\n      assertIsError(error);\n      return { error };\n    } finally {\n      this.#lastRequestTime = Date.now();\n    }\n  }\n\n  #getUrl(chainId: string, params: Record<string, string | undefined>): string {\n    type SupportedChainId = keyof typeof ETHERSCAN_SUPPORTED_NETWORKS;\n\n    const networkInfo =\n      ETHERSCAN_SUPPORTED_NETWORKS[chainId as SupportedChainId];\n\n    if (!networkInfo) {\n      throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n    }\n\n    let url = `https://${networkInfo.subdomain}.${networkInfo.domain}/api`;\n\n    Object.keys(params).forEach((key, index) => {\n      const value = params[key];\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      url += `${index === 0 ? '?' : '&'}${key}=${value}`;\n    });\n\n    return url;\n  }\n}\n"]}