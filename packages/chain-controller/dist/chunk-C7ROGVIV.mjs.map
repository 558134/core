{"version":3,"sources":["../src/SnapChainProviderClient.ts"],"sourcesContent":["import type {\n  Chain,\n  CaipAssetTypeOrId,\n  BalancesResult,\n} from '@metamask/chain-api';\nimport { ChainRpcMethod } from '@metamask/chain-api';\nimport type { CaipChainId } from '@metamask/utils';\n\nimport type { SnapHandlerClient } from './SnapHandlerClient';\n\n/**\n * Snap client that implement the Chain API.\n */\nexport class SnapChainProviderClient implements Chain {\n  #client: SnapHandlerClient;\n\n  /**\n   * Constructor for `SnapChainProviderClient`.\n   *\n   * @param client - A Snap handler client.\n   */\n  constructor(client: SnapHandlerClient) {\n    this.#client = client;\n  }\n\n  /**\n   * Fetches asset balances for each given accounts.\n   *\n   * @param scope - CAIP-2 chain ID that must compatible with `accounts`.\n   * @param accounts - Accounts (addresses).\n   * @param assets - List of CAIP-19 asset identifiers to fetch balances from.\n   * @returns Assets balances for each accounts.\n   */\n  getBalances = async (\n    scope: CaipChainId,\n    accounts: string[],\n    assets: CaipAssetTypeOrId[],\n  ): Promise<BalancesResult> => {\n    return (await this.#client.submitRequest(ChainRpcMethod.GetBalances, {\n      scope,\n      accounts,\n      assets,\n    })) as BalancesResult;\n  };\n}\n"],"mappings":";;;;;;;AAKA,SAAS,sBAAsB;AAL/B;AAaO,IAAM,0BAAN,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpD,YAAY,QAA2B;AAPvC;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,OACZ,OACA,UACA,WAC4B;AAC5B,aAAQ,MAAM,mBAAK,SAAQ,cAAc,eAAe,aAAa;AAAA,QACnE;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AArBE,uBAAK,SAAU;AAAA,EACjB;AAqBF;AA9BE;","names":[]}