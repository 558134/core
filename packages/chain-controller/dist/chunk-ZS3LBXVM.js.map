{"version":3,"sources":["../src/SnapHandlerClient.ts"],"names":["_handler"],"mappings":";;;;;;;AAGA,SAAS,mBAAmB;AAE5B,SAAS,MAAM,YAAY;AAL3B;AAeA,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBtB,YACE,SACA,aACA,QACA,QACA;AArBF;AAEA;AAEA;AAEA;AAgBE,uBAAK,SAAU;AACf,uBAAK,SAAU;AACf,uBAAK,UAAW;AAChB,uBAAK,cAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,KAAK,SAA2C;AACpD,WAAO,mBAAK,UAAL,WAAc;AAAA,MACnB,QAAQ,mBAAK;AAAA,MACb,QAAQ,mBAAK;AAAA,MACb,SAAS,mBAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACF;AA1CE;AAEA;AAEA;AAEA;AAtBF,IAAAA,WAAA;AAgEO,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc7B,YAAY;AAAA,IACV;AAAA;AAAA,IAEA;AAAA,IACA,SAAS;AAAA,EACX,GAIG;AAtBH,uBAAAA,WAAA;AAEA;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAgB,OACd,QACA,WAEA,MAAM,mBAAK,SAAQ,KAAK;AAAA,MACtB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,IAAI,KAAK;AAAA;AAAA,IACX,CAAC;AAzBD,uBAAKA,WAAW;AAChB,uBAAK,SAAU,IAAI;AAAA,MACjB;AAAA,MACA,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAmBF;AAjDEA,YAAA;AAEA","sourcesContent":["import type { JsonRpcRequest } from '@metamask/keyring-api/dist/JsonRpcRequest';\nimport type { SnapController } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/utils';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * Handler for Snap requests.\n */\nexport type Handler = SnapController['handleRequest'];\n\n/**\n * Send requests to a Snap through a Snap request handler.\n */\nclass SnapHandlerSender {\n  #snapId: SnapId;\n\n  #origin: string;\n\n  #handler: Handler;\n\n  #handlerType: HandlerType;\n\n  /**\n   * Constructor for `SnapHandlerSender`.\n   *\n   * @param handler - The Snap request handler to send requests to.\n   * @param handlerType - The handler type.\n   * @param snapId - The ID of the snap to use.\n   * @param origin - The sender's origin.\n   */\n  constructor(\n    handler: Handler,\n    handlerType: HandlerType,\n    snapId: SnapId,\n    origin: string,\n  ) {\n    this.#snapId = snapId;\n    this.#origin = origin;\n    this.#handler = handler;\n    this.#handlerType = handlerType;\n  }\n\n  /**\n   * Sends a request to the snap and return the response.\n   *\n   * @param request - JSON-RPC request to send to the snap.\n   * @returns A promise that resolves to the response of the request.\n   */\n  async send(request: JsonRpcRequest): Promise<unknown> {\n    return this.#handler({\n      snapId: this.#snapId,\n      origin: this.#origin,\n      handler: this.#handlerType,\n      request,\n    });\n  }\n}\n\n/**\n * Snap client to submit requests through a handler that submit requests to\n * a Snap.\n */\nexport class SnapHandlerClient {\n  #handler: Handler;\n\n  #sender: SnapHandlerSender;\n\n  /**\n   * Constructor for SnapHandlerClient.\n   *\n   * @param options - The client options.\n   * @param options.handler - A function to submit requests to the Snap handler\n   * (this should call the SnapController.handleRequest)\n   * @param options.snapId - The Snap ID.\n   * @param options.origin - The origin from which the Snap is being invoked.\n   */\n  constructor({\n    handler,\n    // Follow same pattern than for @metamask/keyring-api\n    snapId,\n    origin = 'metamask',\n  }: {\n    handler: Handler;\n    snapId: SnapId;\n    origin?: string;\n  }) {\n    this.#handler = handler;\n    this.#sender = new SnapHandlerSender(\n      handler,\n      HandlerType.OnRpcRequest,\n      snapId,\n      origin,\n    );\n  }\n\n  /**\n   * Submit a request to the underlying SnapHandlerSender.\n   *\n   * @param method - The RPC handler method to be called.\n   * @param params - The RPC handler parameters.\n   * @returns The RPC handler response.\n   */\n  submitRequest = async (\n    method: string,\n    params: Json[] | Record<string, Json>,\n  ): Promise<unknown> =>\n    await this.#sender.send({\n      jsonrpc: '2.0',\n      method,\n      params,\n      id: uuid(), // TODO: Should allow caller to define this one\n    });\n}\n"]}