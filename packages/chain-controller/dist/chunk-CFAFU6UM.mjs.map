{"version":3,"sources":["../src/ChainController.ts"],"sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { CaipAssetType, BalancesResult, Chain } from '@metamask/chain-api';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport type { HandleSnapRequest as SnapControllerHandleSnapRequestAction } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport type { CaipChainId } from '@metamask/utils';\n\nimport { SnapChainProviderClient } from './SnapChainProviderClient';\nimport { SnapHandlerClient } from './SnapHandlerClient';\n\nconst controllerName = 'ChainController';\n\nexport type ChainControllerState = Record<string, never>;\n\nexport type ChainControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  ChainControllerState\n>;\n\nexport type AllowedActions = SnapControllerHandleSnapRequestAction;\n\nexport type ChainControllerActions = never;\n\nexport type ChainControllerChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  ChainControllerState\n>;\n\nexport type AllowedEvents = ChainControllerEvents;\n\nexport type ChainControllerEvents = ChainControllerChangeEvent;\n\nexport type ChainControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ChainControllerActions | AllowedActions,\n  ChainControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nconst defaultState: ChainControllerState = {};\n\n/**\n * Controller that manages chain-agnostic providers throught the chain API.\n */\nexport class ChainController\n  extends BaseController<\n    typeof controllerName,\n    ChainControllerState,\n    ChainControllerMessenger\n  >\n  implements Chain\n{\n  #providers: Record<CaipChainId, SnapChainProviderClient>;\n\n  /**\n   * Constructor for ChainController.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The messenger object.\n   * @param options.state - Initial state to set on this controller\n   */\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: ChainControllerMessenger;\n    state?: ChainControllerState;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: {},\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n\n    this.#providers = {};\n\n    this.#registerMessageHandlers();\n  }\n\n  /**\n   * Get a SnapChainProviderClient for a given scope.\n   *\n   * @private\n   * @param scope - CAIP-2 chain ID.\n   * @throws If no chain provider has been registered for this scope.\n   * @returns The associated SnapChainProviderClient.\n   */\n  #getProviderClient(scope: CaipChainId): SnapChainProviderClient {\n    if (scope in this.#providers) {\n      return this.#providers[scope];\n    }\n\n    const error = `No Chain provider found for scope: \"${scope}\"`;\n    console.error(error, this.#providers);\n    throw new Error(error);\n  }\n\n  /**\n   * Fetches asset balances for each given accounts.\n   *\n   * @param scope - CAIP-2 chain ID that must compatible with `accounts`.\n   * @param accounts - Accounts (addresses).\n   * @param assets - List of CAIP-19 asset identifiers to fetch balances from.\n   * @returns Assets balances for each accounts.\n   */\n  getBalances = async (\n    scope: CaipChainId,\n    accounts: string[],\n    assets: CaipAssetType[],\n  ): Promise<BalancesResult> => {\n    return await this.#getProviderClient(scope).getBalances(\n      scope,\n      accounts,\n      assets,\n    );\n  };\n\n  /**\n   * Fetches asset balances for a given internal account.\n   *\n   * @param scope - CAIP-2 chain ID that must compatible with `accounts`.\n   * @param account - The internal account.\n   * @param assets - List of CAIP-19 asset identifiers to fetch balances from.\n   * @returns Assets balances for the internal accounts.\n   */\n  getBalancesFromAccount = async (\n    scope: CaipChainId,\n    account: InternalAccount,\n    assets: CaipAssetType[],\n  ): Promise<BalancesResult> => {\n    return this.getBalances(scope, [account.address], assets);\n  };\n\n  /**\n   * Checks whether a chain provider has been registered for a given scope.\n   *\n   * @param scope - CAIP-2 chain ID.\n   * @returns True if there is a registerd provider, false otherwise.\n   */\n  hasProviderFor(scope: CaipChainId): boolean {\n    return scope in this.#providers;\n  }\n\n  /**\n   * Registers a Snap chain provider for a given scope.\n   *\n   * @param scope - CAIP-2 chain ID.\n   * @param snapId - Snap ID that implements the Chain API methods.\n   * @returns A SnapChainProviderClient for this Snap.\n   */\n  registerProvider(\n    scope: CaipChainId,\n    snapId: SnapId,\n  ): SnapChainProviderClient {\n    // TODO: Should this be idempotent?\n    const client = new SnapHandlerClient({\n      snapId,\n      handler: (request) => {\n        return this.messagingSystem.call(\n          'SnapController:handleRequest',\n          request,\n        );\n      },\n    });\n    const provider = new SnapChainProviderClient(client);\n\n    if (this.hasProviderFor(scope)) {\n      // For now, we avoid this to make sure no other provider can replace the existings ones!\n      throw new Error(\n        `Found an already existing provider for scope: \"${scope}\"`,\n      );\n    }\n    this.#providers[scope] = provider;\n    return provider;\n  }\n\n  /**\n   * Registers message handlers for the ChainController.\n   * @private\n   */\n  #registerMessageHandlers() {\n    // TODO\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAKA,SAAS,sBAAsB;AAU/B,IAAM,iBAAiB;AA8BvB,IAAM,eAAqC,CAAC;AA7C5C;AAkDO,IAAM,kBAAN,cACG,eAMV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUE,YAAY;AAAA,IACV;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAGG;AACD,UAAM;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,MACN,UAAU,CAAC;AAAA,MACX,OAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAeH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6FA;AAAA;AAAA;AAAA;AAAA;AApIA;AAyDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,OACZ,OACA,UACA,WAC4B;AAC5B,aAAO,MAAM,sBAAK,0CAAL,WAAwB,OAAO;AAAA,QAC1C;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAyB,OACvB,OACA,SACA,WAC4B;AAC5B,aAAO,KAAK,YAAY,OAAO,CAAC,QAAQ,OAAO,GAAG,MAAM;AAAA,IAC1D;AAzDE,uBAAK,YAAa,CAAC;AAEnB,0BAAK,sDAAL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8DA,eAAe,OAA6B;AAC1C,WAAO,SAAS,mBAAK;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBACE,OACA,QACyB;AAEzB,UAAM,SAAS,IAAI,kBAAkB;AAAA,MACnC;AAAA,MACA,SAAS,CAAC,YAAY;AACpB,eAAO,KAAK,gBAAgB;AAAA,UAC1B;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,UAAM,WAAW,IAAI,wBAAwB,MAAM;AAEnD,QAAI,KAAK,eAAe,KAAK,GAAG;AAE9B,YAAM,IAAI;AAAA,QACR,kDAAkD,KAAK;AAAA,MACzD;AAAA,IACF;AACA,uBAAK,YAAW,KAAK,IAAI;AACzB,WAAO;AAAA,EACT;AASF;AAvIE;AAuCA;AAAA,uBAAkB,SAAC,OAA6C;AAC9D,MAAI,SAAS,mBAAK,aAAY;AAC5B,WAAO,mBAAK,YAAW,KAAK;AAAA,EAC9B;AAEA,QAAM,QAAQ,uCAAuC,KAAK;AAC1D,UAAQ,MAAM,OAAO,mBAAK,WAAU;AACpC,QAAM,IAAI,MAAM,KAAK;AACvB;AAqFA;AAAA,6BAAwB,WAAG;AAE3B;","names":[]}