{"version":3,"sources":["../src/PreferencesController.ts"],"sourcesContent":["import {\n  BaseController,\n  type ControllerStateChangeEvent,\n  type ControllerGetStateAction,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { toChecksumHexAddress } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerState,\n  KeyringControllerStateChangeEvent,\n} from '@metamask/keyring-controller';\n\nimport { ETHERSCAN_SUPPORTED_CHAIN_IDS } from './constants';\n\n/**\n * A representation of a MetaMask identity\n */\nexport type Identity = {\n  /**\n   * The address of the identity\n   */\n  address: string;\n  /**\n   * The timestamp for when this identity was first added\n   */\n  importTime?: number;\n  /**\n   * The name of the identity\n   */\n  name: string;\n};\n\n/**\n * A type union of the name for each chain that is supported by Etherscan or\n * an Etherscan-compatible service.\n */\nexport type EtherscanSupportedChains =\n  keyof typeof ETHERSCAN_SUPPORTED_CHAIN_IDS;\n\n/**\n * A type union of the chain ID for each chain that is supported by Etherscan\n * or an Etherscan-compatible service.\n */\nexport type EtherscanSupportedHexChainId =\n  (typeof ETHERSCAN_SUPPORTED_CHAIN_IDS)[EtherscanSupportedChains];\n\n/**\n * Preferences controller state\n */\nexport type PreferencesState = {\n  /**\n   * Map of specific features to enable or disable\n   */\n  featureFlags: { [feature: string]: boolean };\n  /**\n   * Map of addresses to Identity objects\n   */\n  identities: { [address: string]: Identity };\n  /**\n   * The configured IPFS gateway\n   */\n  ipfsGateway: string;\n  /**\n   * Controls whether IPFS is enabled or not\n   */\n  isIpfsGatewayEnabled: boolean;\n  /**\n   * Controls whether multi-account balances are enabled or not\n   */\n  isMultiAccountBalancesEnabled: boolean;\n  /**\n   * Map of lost addresses to Identity objects\n   */\n  lostIdentities: { [address: string]: Identity };\n  /**\n   * Controls whether the OpenSea API is used\n   */\n  openSeaEnabled: boolean;\n  /**\n   * Controls whether \"security alerts\" are enabled\n   */\n  securityAlertsEnabled: boolean;\n  /**\n   * The current selected address\n   */\n  selectedAddress: string;\n  /**\n   * Controls whether incoming transactions are enabled, per-chain (for Etherscan-supported chains)\n   */\n  showIncomingTransactions: {\n    [chainId in EtherscanSupportedHexChainId]: boolean;\n  };\n  /**\n   * Controls whether test networks are shown in the wallet\n   */\n  showTestNetworks: boolean;\n  /**\n   * Controls whether NFT detection is enabled\n   */\n  useNftDetection: boolean;\n  /**\n   * Controls whether token detection is enabled\n   */\n  useTokenDetection: boolean;\n  /**\n   * Controls whether smart transactions are opted into\n   */\n  smartTransactionsOptInStatus: boolean;\n  /**\n   * Controls whether transaction simulations are enabled\n   */\n  useTransactionSimulations: boolean;\n};\n\nconst metadata = {\n  featureFlags: { persist: true, anonymous: true },\n  identities: { persist: true, anonymous: false },\n  ipfsGateway: { persist: true, anonymous: false },\n  isIpfsGatewayEnabled: { persist: true, anonymous: true },\n  isMultiAccountBalancesEnabled: { persist: true, anonymous: true },\n  lostIdentities: { persist: true, anonymous: false },\n  openSeaEnabled: { persist: true, anonymous: true },\n  securityAlertsEnabled: { persist: true, anonymous: true },\n  selectedAddress: { persist: true, anonymous: false },\n  showTestNetworks: { persist: true, anonymous: true },\n  showIncomingTransactions: { persist: true, anonymous: true },\n  useNftDetection: { persist: true, anonymous: true },\n  useTokenDetection: { persist: true, anonymous: true },\n  smartTransactionsOptInStatus: { persist: true, anonymous: false },\n  useTransactionSimulations: { persist: true, anonymous: true },\n};\n\nconst name = 'PreferencesController';\n\nexport type PreferencesControllerGetStateAction = ControllerGetStateAction<\n  typeof name,\n  PreferencesState\n>;\n\nexport type PreferencesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof name,\n  PreferencesState\n>;\n\nexport type PreferencesControllerActions = PreferencesControllerGetStateAction;\n\nexport type PreferencesControllerEvents = PreferencesControllerStateChangeEvent;\n\nexport type AllowedEvents = KeyringControllerStateChangeEvent;\n\nexport type PreferencesControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  PreferencesControllerActions,\n  PreferencesControllerEvents | AllowedEvents,\n  never,\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default PreferencesController state.\n *\n * @returns The default PreferencesController state.\n */\nexport function getDefaultPreferencesState() {\n  return {\n    featureFlags: {},\n    identities: {},\n    ipfsGateway: 'https://ipfs.io/ipfs/',\n    isIpfsGatewayEnabled: true,\n    isMultiAccountBalancesEnabled: true,\n    lostIdentities: {},\n    openSeaEnabled: false,\n    securityAlertsEnabled: false,\n    selectedAddress: '',\n    showIncomingTransactions: {\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MAINNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.GOERLI]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM_SEPOLIA]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.SEPOLIA]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_GOERLI]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_SEPOLIA]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_MAINNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONRIVER]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]: true,\n    },\n    showTestNetworks: false,\n    useNftDetection: false,\n    useTokenDetection: true,\n    smartTransactionsOptInStatus: false,\n    useTransactionSimulations: true,\n  };\n}\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nexport class PreferencesController extends BaseController<\n  typeof name,\n  PreferencesState,\n  PreferencesControllerMessenger\n> {\n  /**\n   * Creates a PreferencesController instance.\n   *\n   * @param args - Arguments\n   * @param args.messenger - The preferences controller messenger.\n   * @param args.state - Preferences controller state.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: PreferencesControllerMessenger;\n    state?: Partial<PreferencesState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultPreferencesState(),\n        ...state,\n      },\n    });\n\n    messenger.subscribe(\n      'KeyringController:stateChange',\n      (keyringState: KeyringControllerState) => {\n        const accounts = new Set<string>();\n        for (const keyring of keyringState.keyrings) {\n          for (const account of keyring.accounts) {\n            accounts.add(account);\n          }\n        }\n        if (accounts.size > 0) {\n          this.#syncIdentities(Array.from(accounts));\n        }\n      },\n    );\n  }\n\n  /**\n   * Adds identities to state.\n   *\n   * @param addresses - List of addresses to use to generate new identities.\n   */\n  addIdentities(addresses: string[]) {\n    const checksummedAddresses = addresses.map((address) =>\n      toChecksumHexAddress(address),\n    );\n    this.update((state) => {\n      const { identities } = state;\n      for (const address of checksummedAddresses) {\n        if (identities[address]) {\n          continue;\n        }\n        const identityCount = Object.keys(identities).length;\n\n        identities[address] = {\n          name: `Account ${identityCount + 1}`,\n          address,\n          importTime: Date.now(),\n        };\n      }\n    });\n  }\n\n  /**\n   * Removes an identity from state.\n   *\n   * @param address - Address of the identity to remove.\n   */\n  removeIdentity(address: string) {\n    address = toChecksumHexAddress(address);\n    const { identities } = this.state;\n    if (!identities[address]) {\n      return;\n    }\n    this.update((state) => {\n      delete state.identities[address];\n      if (address === state.selectedAddress) {\n        state.selectedAddress = Object.keys(state.identities)[0];\n      }\n    });\n  }\n\n  /**\n   * Associates a new label with an identity.\n   *\n   * @param address - Address of the identity to associate.\n   * @param label - New label to assign.\n   */\n  setAccountLabel(address: string, label: string) {\n    address = toChecksumHexAddress(address);\n    this.update((state) => {\n      const identity = state.identities[address] || {};\n      identity.name = label;\n      state.identities[address] = identity;\n    });\n  }\n\n  /**\n   * Enable or disable a specific feature flag.\n   *\n   * @param feature - Feature to toggle.\n   * @param activated - Value to assign.\n   */\n  setFeatureFlag(feature: string, activated: boolean) {\n    this.update((state) => {\n      state.featureFlags[feature] = activated;\n    });\n  }\n\n  /**\n   * Synchronizes the current identity list with new identities.\n   *\n   * @param addresses - List of addresses corresponding to identities to sync.\n   */\n  #syncIdentities(addresses: string[]) {\n    addresses = addresses.map((address: string) =>\n      toChecksumHexAddress(address),\n    );\n\n    this.update((state) => {\n      const { identities } = state;\n      const newlyLost: { [address: string]: Identity } = {};\n\n      for (const [address, identity] of Object.entries(identities)) {\n        if (!addresses.includes(address)) {\n          newlyLost[address] = identity;\n          delete identities[address];\n        }\n      }\n\n      for (const [address, identity] of Object.entries(newlyLost)) {\n        state.lostIdentities[address] = identity;\n      }\n    });\n    this.addIdentities(addresses);\n\n    if (!addresses.includes(this.state.selectedAddress)) {\n      this.update((state) => {\n        state.selectedAddress = addresses[0];\n      });\n    }\n  }\n\n  /**\n   * Sets selected address.\n   *\n   * @param selectedAddress - Ethereum address.\n   */\n  setSelectedAddress(selectedAddress: string) {\n    this.update((state) => {\n      state.selectedAddress = toChecksumHexAddress(selectedAddress);\n    });\n  }\n\n  /**\n   * Sets new IPFS gateway.\n   *\n   * @param ipfsGateway - IPFS gateway string.\n   */\n  setIpfsGateway(ipfsGateway: string) {\n    this.update((state) => {\n      state.ipfsGateway = ipfsGateway;\n    });\n  }\n\n  /**\n   * Toggle the token detection setting.\n   *\n   * @param useTokenDetection - Boolean indicating user preference on token detection.\n   */\n  setUseTokenDetection(useTokenDetection: boolean) {\n    this.update((state) => {\n      state.useTokenDetection = useTokenDetection;\n    });\n  }\n\n  /**\n   * Toggle the NFT detection setting.\n   *\n   * @param useNftDetection - Boolean indicating user preference on NFT detection.\n   */\n  setUseNftDetection(useNftDetection: boolean) {\n    if (useNftDetection && !this.state.openSeaEnabled) {\n      throw new Error(\n        'useNftDetection cannot be enabled if openSeaEnabled is false',\n      );\n    }\n    this.update((state) => {\n      state.useNftDetection = useNftDetection;\n    });\n  }\n\n  /**\n   * Toggle the opensea enabled setting.\n   *\n   * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.\n   */\n  setOpenSeaEnabled(openSeaEnabled: boolean) {\n    this.update((state) => {\n      state.openSeaEnabled = openSeaEnabled;\n      if (!openSeaEnabled) {\n        state.useNftDetection = false;\n      }\n    });\n  }\n\n  /**\n   * Toggle the security alert enabled setting.\n   *\n   * @param securityAlertsEnabled - Boolean indicating user preference on using security alerts.\n   */\n  setSecurityAlertsEnabled(securityAlertsEnabled: boolean) {\n    this.update((state) => {\n      state.securityAlertsEnabled = securityAlertsEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user preferences to enable/disable fetch of multiple accounts balance.\n   *\n   * @param isMultiAccountBalancesEnabled - true to enable multiple accounts balance fetch, false to fetch only selectedAddress.\n   */\n  setIsMultiAccountBalancesEnabled(isMultiAccountBalancesEnabled: boolean) {\n    this.update((state) => {\n      state.isMultiAccountBalancesEnabled = isMultiAccountBalancesEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user have the test networks visible/hidden.\n   *\n   * @param showTestNetworks - true to show test networks, false to hidden.\n   */\n  setShowTestNetworks(showTestNetworks: boolean) {\n    this.update((state) => {\n      state.showTestNetworks = showTestNetworks;\n    });\n  }\n\n  /**\n   * A setter for the user allow to be fetched IPFS content\n   *\n   * @param isIpfsGatewayEnabled - true to enable ipfs source\n   */\n  setIsIpfsGatewayEnabled(isIpfsGatewayEnabled: boolean) {\n    this.update((state) => {\n      state.isIpfsGatewayEnabled = isIpfsGatewayEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user allow to be fetched IPFS content\n   *\n   * @param chainId - On hexadecimal format to enable the incoming transaction network\n   * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions\n   */\n  setEnableNetworkIncomingTransactions(\n    chainId: EtherscanSupportedHexChainId,\n    isIncomingTransactionNetworkEnable: boolean,\n  ) {\n    if (Object.values(ETHERSCAN_SUPPORTED_CHAIN_IDS).includes(chainId)) {\n      this.update((state) => {\n        state.showIncomingTransactions = {\n          ...this.state.showIncomingTransactions,\n          [chainId]: isIncomingTransactionNetworkEnable,\n        };\n      });\n    }\n  }\n\n  /**\n   * A setter for the user to opt into smart transactions\n   *\n   * @param smartTransactionsOptInStatus - true to opt into smart transactions\n   */\n  setSmartTransactionsOptInStatus(smartTransactionsOptInStatus: boolean) {\n    this.update((state) => {\n      state.smartTransactionsOptInStatus = smartTransactionsOptInStatus;\n    });\n  }\n\n  /**\n   * A setter for the user preferences to enable/disable transaction simulations.\n   *\n   * @param useTransactionSimulations - true to enable transaction simulations, false to disable it.\n   */\n  setUseTransactionSimulations(useTransactionSimulations: boolean) {\n    this.update((state) => {\n      state.useTransactionSimulations = useTransactionSimulations;\n    });\n  }\n}\n\nexport default PreferencesController;\n"],"mappings":"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","names":[]}