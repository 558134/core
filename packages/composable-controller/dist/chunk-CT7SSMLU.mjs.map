{"version":3,"sources":["../src/ComposableController.ts"],"sourcesContent":["import type {\n  ActionConstraint,\n  BaseConfig,\n  BaseState,\n  EventConstraint,\n  RestrictedControllerMessenger,\n  StateConstraint,\n  StateMetadata,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController, BaseControllerV1 } from '@metamask/base-controller';\nimport type { PublicInterface } from '@metamask/utils';\nimport type { Patch } from 'immer';\n\nexport const controllerName = 'ComposableController';\n\nexport const INVALID_CONTROLLER_ERROR =\n  'Invalid controller: controller must have a `messagingSystem` or be a class inheriting from `BaseControllerV1`.';\n\n/**\n * A universal supertype for the `BaseControllerV1` state object.\n */\ntype ConfigConstraintV1 = BaseConfig & object;\n\n/**\n * A universal supertype for the `BaseControllerV1` state object.\n */\ntype StateConstraintV1 = BaseState & object;\n\n/**\n * A universal subtype of all controller instances that extend from `BaseControllerV1`.\n * Any `BaseControllerV1` instance can be assigned to this type.\n *\n * Note that this type is not the widest subtype or narrowest supertype of all `BaseControllerV1` instances.\n * This type is therefore unsuitable for general use as a type constraint, and is only intended for use within the ComposableController.\n */\ntype BaseControllerV1Instance = PublicInterface<\n  BaseControllerV1<ConfigConstraintV1, StateConstraintV1>\n>;\n\n/**\n * A universal subtype of all controller instances that extend from `BaseController` (formerly `BaseControllerV2`).\n * Any `BaseController` instance can be assigned to this type.\n *\n * Note that this type is not the widest subtype or narrowest supertype of all `BaseController` instances.\n * This type is therefore unsuitable for general use as a type constraint, and is only intended for use within the ComposableController.\n *\n * For this reason, we only look for `BaseController` properties that we use in the ComposableController (name and state).\n */\ntype BaseControllerInstance = {\n  name: string;\n  state: StateConstraint;\n  metadata: Record<string, unknown>;\n};\n\n/**\n * A universal subtype of all controller instances that extend from `BaseController` (formerly `BaseControllerV2`) or `BaseControllerV1`.\n * Any `BaseController` or `BaseControllerV1` instance can be assigned to this type.\n *\n * Note that this type is not the widest subtype or narrowest supertype of all `BaseController` and `BaseControllerV1` instances.\n * This type is therefore unsuitable for general use as a type constraint, and is only intended for use within the ComposableController.\n */\ntype ControllerInstance = BaseControllerV1Instance | BaseControllerInstance;\n\n/**\n * The narrowest supertype of all `RestrictedControllerMessenger` instances.\n *\n * @template ControllerName - Name of the controller.\n * Optionally can be used to narrow the type to a specific controller.\n */\nexport type RestrictedControllerMessengerConstraint<\n  ControllerName extends string = string,\n> = RestrictedControllerMessenger<\n  ControllerName,\n  ActionConstraint,\n  EventConstraint,\n  string,\n  string\n>;\n\n/**\n * Determines if the given controller is an instance of `BaseControllerV1`\n * @param controller - Controller instance to check\n * @returns True if the controller is an instance of `BaseControllerV1`\n */\nexport function isBaseControllerV1(\n  controller: ControllerInstance,\n): controller is BaseControllerV1Instance {\n  return (\n    'name' in controller &&\n    typeof controller.name === 'string' &&\n    'config' in controller &&\n    typeof controller.config === 'object' &&\n    'defaultConfig' in controller &&\n    typeof controller.defaultConfig === 'object' &&\n    'state' in controller &&\n    typeof controller.state === 'object' &&\n    'defaultState' in controller &&\n    typeof controller.defaultState === 'object' &&\n    'disabled' in controller &&\n    typeof controller.disabled === 'boolean' &&\n    'subscribe' in controller &&\n    typeof controller.subscribe === 'function' &&\n    controller instanceof BaseControllerV1\n  );\n}\n\n/**\n * Determines if the given controller is an instance of `BaseController`\n * @param controller - Controller instance to check\n * @returns True if the controller is an instance of `BaseController`\n */\nexport function isBaseController(\n  controller: ControllerInstance,\n): controller is BaseControllerInstance {\n  return (\n    'name' in controller &&\n    typeof controller.name === 'string' &&\n    'state' in controller &&\n    typeof controller.state === 'object' &&\n    'metadata' in controller &&\n    typeof controller.metadata === 'object' &&\n    controller instanceof BaseController\n  );\n}\n\n/**\n * A universal supertype for the controller state object, encompassing both `BaseControllerV1` and `BaseControllerV2` state.\n */\nexport type LegacyControllerStateConstraint =\n  | StateConstraintV1\n  | StateConstraint;\n\n/**\n * A universal supertype for the composable controller state object.\n *\n * This type is only intended to be used for disabling the generic constraint on the `ControllerState` type argument in the `BaseController` type as a temporary solution for ensuring compatibility with BaseControllerV1 child controllers.\n * Note that it is unsuitable for general use as a type constraint.\n */\n// TODO: Replace with `ComposableControllerStateConstraint` once BaseControllerV2 migrations are completed for all controllers.\ntype LegacyComposableControllerStateConstraint = {\n  // `any` is used here to disable the generic constraint on the `ControllerState` type argument in the `BaseController` type,\n  // enabling composable controller state types with BaseControllerV1 state objects to be.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [name: string]: Record<string, any>;\n};\n\n/**\n * The narrowest supertype for the composable controller state object.\n * This is also a widest subtype of the 'LegacyComposableControllerStateConstraint' type.\n */\n// TODO: Replace with `{ [name: string]: StateConstraint }` once BaseControllerV2 migrations are completed for all controllers.\nexport type ComposableControllerStateConstraint = {\n  [name: string]: LegacyControllerStateConstraint;\n};\n\n/**\n * A `stateChange` event for any controller instance that extends from either `BaseControllerV1` or `BaseControllerV2`.\n */\n// TODO: Replace all instances with `ControllerStateChangeEvent` once `BaseControllerV2` migrations are completed for all controllers.\ntype LegacyControllerStateChangeEvent<\n  ControllerName extends string,\n  ControllerState extends StateConstraintV1,\n> = {\n  type: `${ControllerName}:stateChange`;\n  payload: [ControllerState, Patch[]];\n};\n\n/**\n * The `stateChange` event type for the {@link ComposableControllerMessenger}.\n *\n * @template ComposableControllerState - A type object that maps controller names to their state types.\n */\nexport type ComposableControllerStateChangeEvent<\n  ComposableControllerState extends ComposableControllerStateConstraint,\n> = LegacyControllerStateChangeEvent<\n  typeof controllerName,\n  ComposableControllerState\n>;\n\n/**\n * A union type of internal event types available to the {@link ComposableControllerMessenger}.\n *\n * @template ComposableControllerState - A type object that maps controller names to their state types.\n */\nexport type ComposableControllerEvents<\n  ComposableControllerState extends ComposableControllerStateConstraint,\n> = ComposableControllerStateChangeEvent<ComposableControllerState>;\n\n/**\n * A utility type that extracts controllers from the {@link ComposableControllerState} type,\n * and derives a union type of all of their corresponding `stateChange` events.\n *\n * This type can handle both `BaseController` and `BaseControllerV1` controller instances.\n *\n * @template ComposableControllerState - A type object that maps controller names to their state types.\n */\nexport type ChildControllerStateChangeEvents<\n  ComposableControllerState extends ComposableControllerStateConstraint,\n> = ComposableControllerState extends Record<\n  infer ControllerName extends string,\n  infer ControllerState\n>\n  ? ControllerState extends StateConstraint\n    ? ControllerStateChangeEvent<ControllerName, ControllerState>\n    : // TODO: Remove this conditional branch once `BaseControllerV2` migrations are completed for all controllers.\n    ControllerState extends StateConstraintV1\n    ? LegacyControllerStateChangeEvent<ControllerName, ControllerState>\n    : never\n  : never;\n\n/**\n * A union type of external event types available to the {@link ComposableControllerMessenger}.\n *\n * @template ComposableControllerState - A type object that maps controller names to their state types.\n */\ntype AllowedEvents<\n  ComposableControllerState extends ComposableControllerStateConstraint,\n> = ChildControllerStateChangeEvents<ComposableControllerState>;\n\n/**\n * The messenger of the {@link ComposableController}.\n *\n * @template ComposableControllerState - A type object that maps controller names to their state types.\n */\nexport type ComposableControllerMessenger<\n  ComposableControllerState extends ComposableControllerStateConstraint,\n> = RestrictedControllerMessenger<\n  typeof controllerName,\n  never,\n  | ComposableControllerEvents<ComposableControllerState>\n  | AllowedEvents<ComposableControllerState>,\n  never,\n  AllowedEvents<ComposableControllerState>['type']\n>;\n\n/**\n * Controller that composes multiple child controllers and maintains up-to-date composed state.\n *\n * @template ComposableControllerState - A type object containing the names and state types of the child controllers.\n * @template ChildControllers - A union type of the child controllers being used to instantiate the {@link ComposableController}.\n */\nexport class ComposableController<\n  ComposableControllerState extends LegacyComposableControllerStateConstraint,\n  ChildControllers extends ControllerInstance,\n> extends BaseController<\n  typeof controllerName,\n  ComposableControllerState,\n  ComposableControllerMessenger<ComposableControllerState>\n> {\n  /**\n   * Creates a ComposableController instance.\n   *\n   * @param options - Initial options used to configure this controller\n   * @param options.controllers - List of child controller instances to compose.\n   * @param options.messenger - A restricted controller messenger.\n   */\n\n  constructor({\n    controllers,\n    messenger,\n  }: {\n    controllers: ChildControllers[];\n    messenger: ComposableControllerMessenger<ComposableControllerState>;\n  }) {\n    if (messenger === undefined) {\n      throw new Error(`Messaging system is required`);\n    }\n\n    super({\n      name: controllerName,\n      metadata: controllers.reduce<StateMetadata<ComposableControllerState>>(\n        (metadata, controller) => ({\n          ...metadata,\n          [controller.name]: isBaseController(controller)\n            ? controller.metadata\n            : { persist: true, anonymous: true },\n        }),\n        {} as never,\n      ),\n      state: controllers.reduce<ComposableControllerState>(\n        (state, controller) => {\n          return { ...state, [controller.name]: controller.state };\n        },\n        {} as never,\n      ),\n      messenger,\n    });\n\n    controllers.forEach((controller) =>\n      this.#updateChildController(controller),\n    );\n  }\n\n  /**\n   * Constructor helper that subscribes to child controller state changes.\n   *\n   * @param controller - Controller instance to update\n   */\n  #updateChildController(controller: ControllerInstance): void {\n    const { name } = controller;\n    if (\n      isBaseController(controller) ||\n      (isBaseControllerV1(controller) && 'messagingSystem' in controller)\n    ) {\n      this.messagingSystem.subscribe(\n        // False negative. `name` is a string type.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `${name}:stateChange`,\n        (childState: LegacyControllerStateConstraint) => {\n          this.update((state) => {\n            Object.assign(state, { [name]: childState });\n          });\n        },\n      );\n    } else if (isBaseControllerV1(controller)) {\n      controller.subscribe((childState: StateConstraintV1) => {\n        this.update((state) => {\n          Object.assign(state, { [name]: childState });\n        });\n      });\n    } else {\n      throw new Error(INVALID_CONTROLLER_ERROR);\n    }\n  }\n}\n\nexport default ComposableController;\n"],"mappings":";;;;;;;;;;;;;;;AAUA,SAAS,gBAAgB,wBAAwB;AAI1C,IAAM,iBAAiB;AAEvB,IAAM,2BACX;AAoEK,SAAS,mBACd,YACwC;AACxC,SACE,UAAU,cACV,OAAO,WAAW,SAAS,YAC3B,YAAY,cACZ,OAAO,WAAW,WAAW,YAC7B,mBAAmB,cACnB,OAAO,WAAW,kBAAkB,YACpC,WAAW,cACX,OAAO,WAAW,UAAU,YAC5B,kBAAkB,cAClB,OAAO,WAAW,iBAAiB,YACnC,cAAc,cACd,OAAO,WAAW,aAAa,aAC/B,eAAe,cACf,OAAO,WAAW,cAAc,cAChC,sBAAsB;AAE1B;AAOO,SAAS,iBACd,YACsC;AACtC,SACE,UAAU,cACV,OAAO,WAAW,SAAS,YAC3B,WAAW,cACX,OAAO,WAAW,UAAU,YAC5B,cAAc,cACd,OAAO,WAAW,aAAa,YAC/B,sBAAsB;AAE1B;AA5HA;AAkPO,IAAM,uBAAN,cAGG,eAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAGG;AACD,QAAI,cAAc,QAAW;AAC3B,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD;AAEA,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,YAAY;AAAA,QACpB,CAAC,UAAU,gBAAgB;AAAA,UACzB,GAAG;AAAA,UACH,CAAC,WAAW,IAAI,GAAG,iBAAiB,UAAU,IAC1C,WAAW,WACX,EAAE,SAAS,MAAM,WAAW,KAAK;AAAA,QACvC;AAAA,QACA,CAAC;AAAA,MACH;AAAA,MACA,OAAO,YAAY;AAAA,QACjB,CAAC,OAAO,eAAe;AACrB,iBAAO,EAAE,GAAG,OAAO,CAAC,WAAW,IAAI,GAAG,WAAW,MAAM;AAAA,QACzD;AAAA,QACA,CAAC;AAAA,MACH;AAAA,MACA;AAAA,IACF,CAAC;AAYH;AAAA;AAAA;AAAA;AAAA;AAAA;AAVE,gBAAY;AAAA,MAAQ,CAAC,eACnB,sBAAK,kDAAL,WAA4B;AAAA,IAC9B;AAAA,EACF;AAiCF;AA1BE;AAAA,2BAAsB,SAAC,YAAsC;AAC3D,QAAM,EAAE,KAAK,IAAI;AACjB,MACE,iBAAiB,UAAU,KAC1B,mBAAmB,UAAU,KAAK,qBAAqB,YACxD;AACA,SAAK,gBAAgB;AAAA;AAAA;AAAA,MAGnB,GAAG,IAAI;AAAA,MACP,CAAC,eAAgD;AAC/C,aAAK,OAAO,CAAC,UAAU;AACrB,iBAAO,OAAO,OAAO,EAAE,CAAC,IAAI,GAAG,WAAW,CAAC;AAAA,QAC7C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,WAAW,mBAAmB,UAAU,GAAG;AACzC,eAAW,UAAU,CAAC,eAAkC;AACtD,WAAK,OAAO,CAAC,UAAU;AACrB,eAAO,OAAO,OAAO,EAAE,CAAC,IAAI,GAAG,WAAW,CAAC;AAAA,MAC7C,CAAC;AAAA,IACH,CAAC;AAAA,EACH,OAAO;AACL,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC1C;AACF;AAGF,IAAO,+BAAQ;","names":[]}