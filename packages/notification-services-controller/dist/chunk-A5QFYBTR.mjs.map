{"version":3,"sources":["../src/NotificationServicesPushController/services/push/push-web.ts"],"sourcesContent":["// We are defining that this file uses a webworker global scope.\n// eslint-disable-next-line spaced-comment\n/// <reference lib=\"webworker\" />\nimport type { FirebaseApp } from 'firebase/app';\nimport { getApp, initializeApp } from 'firebase/app';\nimport { getToken, deleteToken } from 'firebase/messaging';\nimport { getMessaging, onBackgroundMessage } from 'firebase/messaging/sw';\nimport type { Messaging, MessagePayload } from 'firebase/messaging/sw';\nimport log from 'loglevel';\n\nimport type { Types } from '../../../NotificationServicesController';\nimport { Processors } from '../../../NotificationServicesController';\nimport type { PushNotificationEnv } from '../../types/firebase';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst createFirebaseApp = async (\n  env: PushNotificationEnv,\n): Promise<FirebaseApp> => {\n  try {\n    return getApp();\n  } catch {\n    const firebaseConfig = {\n      apiKey: env.apiKey,\n      authDomain: env.authDomain,\n      storageBucket: env.storageBucket,\n      projectId: env.projectId,\n      messagingSenderId: env.messagingSenderId,\n      appId: env.appId,\n      measurementId: env.measurementId,\n    };\n    return initializeApp(firebaseConfig);\n  }\n};\n\nconst getFirebaseMessaging = async (\n  env: PushNotificationEnv,\n): Promise<Messaging> => {\n  const app = await createFirebaseApp(env);\n  return getMessaging(app);\n};\n\n/**\n * Creates a registration token for Firebase Cloud Messaging.\n *\n * @param env - env to configure push notifications\n * @returns A promise that resolves with the registration token or null if an error occurs.\n */\nexport async function createRegToken(\n  env: PushNotificationEnv,\n): Promise<string | null> {\n  try {\n    const messaging = await getFirebaseMessaging(env);\n    const token = await getToken(messaging, {\n      serviceWorkerRegistration: self.registration,\n      vapidKey: env.vapidKey,\n    });\n    return token;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Deletes the Firebase Cloud Messaging registration token.\n *\n * @param env - env to configure push notifications\n * @returns A promise that resolves with true if the token was successfully deleted, false otherwise.\n */\nexport async function deleteRegToken(\n  env: PushNotificationEnv,\n): Promise<boolean> {\n  try {\n    const messaging = await getFirebaseMessaging(env);\n    await deleteToken(messaging);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Service Worker Listener for when push notifications are received.\n * @param env - push notification environment\n * @param handler - handler to actually showing notification, MUST BE PROVEDED\n * @returns unsubscribe handler\n */\nexport async function listenToPushNotificationsReceived(\n  env: PushNotificationEnv,\n  handler: (notification: Types.INotification) => void | Promise<void>,\n) {\n  const messaging = await getFirebaseMessaging(env);\n  const unsubscribePushNotifications = onBackgroundMessage(\n    messaging,\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (payload: MessagePayload) => {\n      try {\n        const notificationData: Types.NotificationUnion = payload?.data?.data\n          ? JSON.parse(payload?.data?.data)\n          : undefined;\n\n        if (!notificationData) {\n          return;\n        }\n\n        const notification = Processors.processNotification(notificationData);\n        await handler(notification);\n      } catch (error) {\n        // Do Nothing, cannot parse a bad notification\n        log.error('Unable to send push notification:', {\n          notification: payload?.data?.data,\n          error,\n        });\n        throw new Error('Unable to send push notification');\n      }\n    },\n  );\n\n  const unsubscribe = () => unsubscribePushNotifications();\n  return unsubscribe;\n}\n\n/**\n * Service Worker Listener for when a notification is clicked\n *\n * @param handler - listen to NotificationEvent from the service worker\n * @returns unsubscribe handler\n */\nexport function listenToPushNotificationsClicked(\n  handler: (e: NotificationEvent, notification?: Types.INotification) => void,\n) {\n  const clickHandler = (event: NotificationEvent) => {\n    // Get Data\n    const data: Types.INotification = event?.notification?.data;\n    handler(event, data);\n  };\n\n  self.addEventListener('notificationclick', clickHandler);\n  const unsubscribe = () =>\n    self.removeEventListener('notificationclick', clickHandler);\n  return unsubscribe;\n}\n"],"mappings":";;;;;AAIA,SAAS,QAAQ,qBAAqB;AACtC,SAAS,UAAU,mBAAmB;AACtC,SAAS,cAAc,2BAA2B;AAElD,OAAO,SAAS;AAQhB,IAAM,oBAAoB,OACxB,QACyB;AACzB,MAAI;AACF,WAAO,OAAO;AAAA,EAChB,QAAQ;AACN,UAAM,iBAAiB;AAAA,MACrB,QAAQ,IAAI;AAAA,MACZ,YAAY,IAAI;AAAA,MAChB,eAAe,IAAI;AAAA,MACnB,WAAW,IAAI;AAAA,MACf,mBAAmB,IAAI;AAAA,MACvB,OAAO,IAAI;AAAA,MACX,eAAe,IAAI;AAAA,IACrB;AACA,WAAO,cAAc,cAAc;AAAA,EACrC;AACF;AAEA,IAAM,uBAAuB,OAC3B,QACuB;AACvB,QAAM,MAAM,MAAM,kBAAkB,GAAG;AACvC,SAAO,aAAa,GAAG;AACzB;AAQA,eAAsB,eACpB,KACwB;AACxB,MAAI;AACF,UAAM,YAAY,MAAM,qBAAqB,GAAG;AAChD,UAAM,QAAQ,MAAM,SAAS,WAAW;AAAA,MACtC,2BAA2B,KAAK;AAAA,MAChC,UAAU,IAAI;AAAA,IAChB,CAAC;AACD,WAAO;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAQA,eAAsB,eACpB,KACkB;AAClB,MAAI;AACF,UAAM,YAAY,MAAM,qBAAqB,GAAG;AAChD,UAAM,YAAY,SAAS;AAC3B,WAAO;AAAA,EACT,SAAS,OAAO;AACd,WAAO;AAAA,EACT;AACF;AAQA,eAAsB,kCACpB,KACA,SACA;AACA,QAAM,YAAY,MAAM,qBAAqB,GAAG;AAChD,QAAM,+BAA+B;AAAA,IACnC;AAAA;AAAA,IAEA,OAAO,YAA4B;AACjC,UAAI;AACF,cAAM,mBAA4C,SAAS,MAAM,OAC7D,KAAK,MAAM,SAAS,MAAM,IAAI,IAC9B;AAEJ,YAAI,CAAC,kBAAkB;AACrB;AAAA,QACF;AAEA,cAAM,eAAe,mBAAW,oBAAoB,gBAAgB;AACpE,cAAM,QAAQ,YAAY;AAAA,MAC5B,SAAS,OAAO;AAEd,YAAI,MAAM,qCAAqC;AAAA,UAC7C,cAAc,SAAS,MAAM;AAAA,UAC7B;AAAA,QACF,CAAC;AACD,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACpD;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAAc,MAAM,6BAA6B;AACvD,SAAO;AACT;AAQO,SAAS,iCACd,SACA;AACA,QAAM,eAAe,CAAC,UAA6B;AAEjD,UAAM,OAA4B,OAAO,cAAc;AACvD,YAAQ,OAAO,IAAI;AAAA,EACrB;AAEA,OAAK,iBAAiB,qBAAqB,YAAY;AACvD,QAAM,cAAc,MAClB,KAAK,oBAAoB,qBAAqB,YAAY;AAC5D,SAAO;AACT;","names":[]}