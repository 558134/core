{"version":3,"sources":["../src/NotificationServicesController/services/feature-announcements.ts"],"sourcesContent":["import { documentToHtmlString } from '@contentful/rich-text-html-renderer';\nimport type { Entry, Asset, EntryCollection } from 'contentful';\n\nimport { TRIGGER_TYPES } from '../constants/notification-schema';\nimport { processFeatureAnnouncement } from '../processors/process-feature-announcement';\nimport type { FeatureAnnouncementRawNotification } from '../types/feature-announcement/feature-announcement';\nimport type {\n  ImageFields,\n  TypeFeatureAnnouncement,\n} from '../types/feature-announcement/type-feature-announcement';\nimport type { TypeExtensionLinkFields } from '../types/feature-announcement/type-links';\nimport type { INotification } from '../types/notification/notification';\n\nconst DEFAULT_SPACE_ID = ':space_id';\nconst DEFAULT_ACCESS_TOKEN = ':access_token';\nconst DEFAULT_CLIENT_ID = ':client_id';\nexport const FEATURE_ANNOUNCEMENT_API = `https://cdn.contentful.com/spaces/${DEFAULT_SPACE_ID}/environments/master/entries`;\nexport const FEATURE_ANNOUNCEMENT_URL = `${FEATURE_ANNOUNCEMENT_API}?access_token=${DEFAULT_ACCESS_TOKEN}&content_type=productAnnouncement&include=10&fields.clients=${DEFAULT_CLIENT_ID}`;\n\ntype Env = {\n  spaceId: string;\n  accessToken: string;\n  platform: string;\n};\n\n/**\n * Contentful API Response Shape\n */\nexport type ContentfulResult = {\n  includes?: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Entry?: Entry[];\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Asset?: Asset[];\n  };\n  items?: TypeFeatureAnnouncement[];\n};\n\nconst getFeatureAnnouncementUrl = (env: Env) =>\n  FEATURE_ANNOUNCEMENT_URL.replace(DEFAULT_SPACE_ID, env.spaceId)\n    .replace(DEFAULT_ACCESS_TOKEN, env.accessToken)\n    .replace(DEFAULT_CLIENT_ID, env.platform);\n\nconst fetchFeatureAnnouncementNotifications = async (\n  env: Env,\n): Promise<FeatureAnnouncementRawNotification[]> => {\n  const url = getFeatureAnnouncementUrl(env);\n\n  const data = await fetch(url)\n    .then((r) => r.json())\n    .catch(() => null);\n\n  if (!data) {\n    return [];\n  }\n\n  const findIncludedItem = (sysId: string) => {\n    const typedData: EntryCollection<ImageFields | TypeExtensionLinkFields> =\n      data;\n    const item =\n      typedData?.includes?.Entry?.find((i: Entry) => i?.sys?.id === sysId) ||\n      typedData?.includes?.Asset?.find((i: Asset) => i?.sys?.id === sysId);\n    return item ? item?.fields : null;\n  };\n\n  const contentfulNotifications = data?.items ?? [];\n  const rawNotifications: FeatureAnnouncementRawNotification[] =\n    contentfulNotifications.map((n: TypeFeatureAnnouncement) => {\n      const { fields } = n;\n      const imageFields = fields.image\n        ? (findIncludedItem(fields.image.sys.id) as ImageFields['fields'])\n        : undefined;\n\n      const extensionLinkFields = fields.extensionLink\n        ? (findIncludedItem(\n            fields.extensionLink.sys.id,\n          ) as TypeExtensionLinkFields['fields'])\n        : undefined;\n\n      const notification: FeatureAnnouncementRawNotification = {\n        type: TRIGGER_TYPES.FEATURES_ANNOUNCEMENT,\n        createdAt: new Date(n.sys.createdAt).toString(),\n        data: {\n          id: fields.id,\n          category: fields.category,\n          title: fields.title,\n          longDescription: documentToHtmlString(fields.longDescription),\n          shortDescription: fields.shortDescription,\n          image: {\n            title: imageFields?.title,\n            description: imageFields?.description,\n            url: imageFields?.file?.url ?? '',\n          },\n          extensionLink: extensionLinkFields && {\n            extensionLinkText: extensionLinkFields?.extensionLinkText,\n            extensionLinkRoute: extensionLinkFields?.extensionLinkRoute,\n          },\n        },\n      };\n\n      return notification;\n    });\n\n  return rawNotifications;\n};\n\n/**\n * Gets Feature Announcement from our services\n * @param env - environment for feature announcements\n * @returns Raw Feature Announcements\n */\nexport async function getFeatureAnnouncementNotifications(\n  env: Env,\n): Promise<INotification[]> {\n  if (env?.accessToken && env?.spaceId && env?.platform) {\n    const rawNotifications = await fetchFeatureAnnouncementNotifications(env);\n    const notifications = rawNotifications.map((notification) =>\n      processFeatureAnnouncement(notification),\n    );\n\n    return notifications;\n  }\n\n  return [];\n}\n"],"mappings":";;;;;AAAA,SAAS,4BAA4B;AAarC,IAAM,mBAAmB;AACzB,IAAM,uBAAuB;AAC7B,IAAM,oBAAoB;AACnB,IAAM,2BAA2B,qCAAqC,gBAAgB;AACtF,IAAM,2BAA2B,GAAG,wBAAwB,iBAAiB,oBAAoB,+DAA+D,iBAAiB;AAqBxL,IAAM,4BAA4B,CAAC,QACjC,yBAAyB,QAAQ,kBAAkB,IAAI,OAAO,EAC3D,QAAQ,sBAAsB,IAAI,WAAW,EAC7C,QAAQ,mBAAmB,IAAI,QAAQ;AAE5C,IAAM,wCAAwC,OAC5C,QACkD;AAClD,QAAM,MAAM,0BAA0B,GAAG;AAEzC,QAAM,OAAO,MAAM,MAAM,GAAG,EACzB,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,EACpB,MAAM,MAAM,IAAI;AAEnB,MAAI,CAAC,MAAM;AACT,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,mBAAmB,CAAC,UAAkB;AAC1C,UAAM,YACJ;AACF,UAAM,OACJ,WAAW,UAAU,OAAO,KAAK,CAAC,MAAa,GAAG,KAAK,OAAO,KAAK,KACnE,WAAW,UAAU,OAAO,KAAK,CAAC,MAAa,GAAG,KAAK,OAAO,KAAK;AACrE,WAAO,OAAO,MAAM,SAAS;AAAA,EAC/B;AAEA,QAAM,0BAA0B,MAAM,SAAS,CAAC;AAChD,QAAM,mBACJ,wBAAwB,IAAI,CAAC,MAA+B;AAC1D,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,cAAc,OAAO,QACtB,iBAAiB,OAAO,MAAM,IAAI,EAAE,IACrC;AAEJ,UAAM,sBAAsB,OAAO,gBAC9B;AAAA,MACC,OAAO,cAAc,IAAI;AAAA,IAC3B,IACA;AAEJ,UAAM,eAAmD;AAAA,MACvD;AAAA,MACA,WAAW,IAAI,KAAK,EAAE,IAAI,SAAS,EAAE,SAAS;AAAA,MAC9C,MAAM;AAAA,QACJ,IAAI,OAAO;AAAA,QACX,UAAU,OAAO;AAAA,QACjB,OAAO,OAAO;AAAA,QACd,iBAAiB,qBAAqB,OAAO,eAAe;AAAA,QAC5D,kBAAkB,OAAO;AAAA,QACzB,OAAO;AAAA,UACL,OAAO,aAAa;AAAA,UACpB,aAAa,aAAa;AAAA,UAC1B,KAAK,aAAa,MAAM,OAAO;AAAA,QACjC;AAAA,QACA,eAAe,uBAAuB;AAAA,UACpC,mBAAmB,qBAAqB;AAAA,UACxC,oBAAoB,qBAAqB;AAAA,QAC3C;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AAEH,SAAO;AACT;AAOA,eAAsB,oCACpB,KAC0B;AAC1B,MAAI,KAAK,eAAe,KAAK,WAAW,KAAK,UAAU;AACrD,UAAM,mBAAmB,MAAM,sCAAsC,GAAG;AACxE,UAAM,gBAAgB,iBAAiB;AAAA,MAAI,CAAC,iBAC1C,2BAA2B,YAAY;AAAA,IACzC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,CAAC;AACV;","names":[]}