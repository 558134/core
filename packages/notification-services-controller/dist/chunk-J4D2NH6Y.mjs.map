{"version":3,"sources":["../src/NotificationServicesController/constants/notification-schema.ts"],"sourcesContent":["import type { Compute } from '../types/type-utils';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum TRIGGER_TYPES {\n  FEATURES_ANNOUNCEMENT = 'features_announcement',\n  METAMASK_SWAP_COMPLETED = 'metamask_swap_completed',\n  ERC20_SENT = 'erc20_sent',\n  ERC20_RECEIVED = 'erc20_received',\n  ETH_SENT = 'eth_sent',\n  ETH_RECEIVED = 'eth_received',\n  ROCKETPOOL_STAKE_COMPLETED = 'rocketpool_stake_completed',\n  ROCKETPOOL_UNSTAKE_COMPLETED = 'rocketpool_unstake_completed',\n  LIDO_STAKE_COMPLETED = 'lido_stake_completed',\n  LIDO_WITHDRAWAL_REQUESTED = 'lido_withdrawal_requested',\n  LIDO_WITHDRAWAL_COMPLETED = 'lido_withdrawal_completed',\n  LIDO_STAKE_READY_TO_BE_WITHDRAWN = 'lido_stake_ready_to_be_withdrawn',\n  ERC721_SENT = 'erc721_sent',\n  ERC721_RECEIVED = 'erc721_received',\n  ERC1155_SENT = 'erc1155_sent',\n  ERC1155_RECEIVED = 'erc1155_received',\n}\n\nexport const TRIGGER_TYPES_WALLET_SET: Set<string> = new Set([\n  TRIGGER_TYPES.METAMASK_SWAP_COMPLETED,\n  TRIGGER_TYPES.ERC20_SENT,\n  TRIGGER_TYPES.ERC20_RECEIVED,\n  TRIGGER_TYPES.ETH_SENT,\n  TRIGGER_TYPES.ETH_RECEIVED,\n  TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED,\n  TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED,\n  TRIGGER_TYPES.LIDO_STAKE_COMPLETED,\n  TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED,\n  TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED,\n  TRIGGER_TYPES.LIDO_STAKE_READY_TO_BE_WITHDRAWN,\n  TRIGGER_TYPES.ERC721_SENT,\n  TRIGGER_TYPES.ERC721_RECEIVED,\n  TRIGGER_TYPES.ERC1155_SENT,\n  TRIGGER_TYPES.ERC1155_RECEIVED,\n]) satisfies Set<Exclude<TRIGGER_TYPES, TRIGGER_TYPES.FEATURES_ANNOUNCEMENT>>;\n\nexport enum TRIGGER_TYPES_GROUPS {\n  RECEIVED = 'received',\n  SENT = 'sent',\n  DEFI = 'defi',\n}\n\nexport const NOTIFICATION_CHAINS_ID = {\n  ETHEREUM: '1',\n  OPTIMISM: '10',\n  BSC: '56',\n  POLYGON: '137',\n  ARBITRUM: '42161',\n  AVALANCHE: '43114',\n  LINEA: '59144',\n} as const;\n\ntype ToPrimitiveKeys<TObj> = Compute<{\n  [K in keyof TObj]: TObj[K] extends string ? string : TObj[K];\n}>;\nexport const NOTIFICATION_CHAINS: ToPrimitiveKeys<\n  typeof NOTIFICATION_CHAINS_ID\n> = NOTIFICATION_CHAINS_ID;\n\nexport const CHAIN_SYMBOLS = {\n  [NOTIFICATION_CHAINS.ETHEREUM]: 'ETH',\n  [NOTIFICATION_CHAINS.OPTIMISM]: 'ETH',\n  [NOTIFICATION_CHAINS.BSC]: 'BNB',\n  [NOTIFICATION_CHAINS.POLYGON]: 'MATIC',\n  [NOTIFICATION_CHAINS.ARBITRUM]: 'ETH',\n  [NOTIFICATION_CHAINS.AVALANCHE]: 'AVAX',\n  [NOTIFICATION_CHAINS.LINEA]: 'ETH',\n};\n\nexport const SUPPORTED_CHAINS = [\n  NOTIFICATION_CHAINS.ETHEREUM,\n  NOTIFICATION_CHAINS.OPTIMISM,\n  NOTIFICATION_CHAINS.BSC,\n  NOTIFICATION_CHAINS.POLYGON,\n  NOTIFICATION_CHAINS.ARBITRUM,\n  NOTIFICATION_CHAINS.AVALANCHE,\n  NOTIFICATION_CHAINS.LINEA,\n];\n\nexport type Trigger = {\n  supported_chains: (typeof SUPPORTED_CHAINS)[number][];\n};\n\nexport const TRIGGERS: Partial<Record<TRIGGER_TYPES, Trigger>> = {\n  [TRIGGER_TYPES.METAMASK_SWAP_COMPLETED]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.OPTIMISM,\n      NOTIFICATION_CHAINS.BSC,\n      NOTIFICATION_CHAINS.POLYGON,\n      NOTIFICATION_CHAINS.ARBITRUM,\n      NOTIFICATION_CHAINS.AVALANCHE,\n    ],\n  },\n  [TRIGGER_TYPES.ERC20_SENT]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.OPTIMISM,\n      NOTIFICATION_CHAINS.BSC,\n      NOTIFICATION_CHAINS.POLYGON,\n      NOTIFICATION_CHAINS.ARBITRUM,\n      NOTIFICATION_CHAINS.AVALANCHE,\n      NOTIFICATION_CHAINS.LINEA,\n    ],\n  },\n  [TRIGGER_TYPES.ERC20_RECEIVED]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.OPTIMISM,\n      NOTIFICATION_CHAINS.BSC,\n      NOTIFICATION_CHAINS.POLYGON,\n      NOTIFICATION_CHAINS.ARBITRUM,\n      NOTIFICATION_CHAINS.AVALANCHE,\n      NOTIFICATION_CHAINS.LINEA,\n    ],\n  },\n  [TRIGGER_TYPES.ERC721_SENT]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.POLYGON,\n    ],\n  },\n  [TRIGGER_TYPES.ERC721_RECEIVED]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.POLYGON,\n    ],\n  },\n  [TRIGGER_TYPES.ERC1155_SENT]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.POLYGON,\n    ],\n  },\n  [TRIGGER_TYPES.ERC1155_RECEIVED]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.POLYGON,\n    ],\n  },\n  [TRIGGER_TYPES.ETH_SENT]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.OPTIMISM,\n      NOTIFICATION_CHAINS.BSC,\n      NOTIFICATION_CHAINS.POLYGON,\n      NOTIFICATION_CHAINS.ARBITRUM,\n      NOTIFICATION_CHAINS.AVALANCHE,\n      NOTIFICATION_CHAINS.LINEA,\n    ],\n  },\n  [TRIGGER_TYPES.ETH_RECEIVED]: {\n    supported_chains: [\n      NOTIFICATION_CHAINS.ETHEREUM,\n      NOTIFICATION_CHAINS.OPTIMISM,\n      NOTIFICATION_CHAINS.BSC,\n      NOTIFICATION_CHAINS.POLYGON,\n      NOTIFICATION_CHAINS.ARBITRUM,\n      NOTIFICATION_CHAINS.AVALANCHE,\n      NOTIFICATION_CHAINS.LINEA,\n    ],\n  },\n  [TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED]: {\n    supported_chains: [NOTIFICATION_CHAINS.ETHEREUM],\n  },\n  [TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED]: {\n    supported_chains: [NOTIFICATION_CHAINS.ETHEREUM],\n  },\n  [TRIGGER_TYPES.LIDO_STAKE_COMPLETED]: {\n    supported_chains: [NOTIFICATION_CHAINS.ETHEREUM],\n  },\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED]: {\n    supported_chains: [NOTIFICATION_CHAINS.ETHEREUM],\n  },\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED]: {\n    supported_chains: [NOTIFICATION_CHAINS.ETHEREUM],\n  },\n};\n"],"mappings":";AAGO,IAAK,gBAAL,kBAAKA,mBAAL;AACL,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,6BAA0B;AAC1B,EAAAA,eAAA,gBAAa;AACb,EAAAA,eAAA,oBAAiB;AACjB,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,gCAA6B;AAC7B,EAAAA,eAAA,kCAA+B;AAC/B,EAAAA,eAAA,0BAAuB;AACvB,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,+BAA4B;AAC5B,EAAAA,eAAA,sCAAmC;AACnC,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,sBAAmB;AAhBT,SAAAA;AAAA,GAAA;AAmBL,IAAM,2BAAwC,oBAAI,IAAI;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAEM,IAAK,uBAAL,kBAAKC,0BAAL;AACL,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,UAAO;AACP,EAAAA,sBAAA,UAAO;AAHG,SAAAA;AAAA,GAAA;AAML,IAAM,yBAAyB;AAAA,EACpC,UAAU;AAAA,EACV,UAAU;AAAA,EACV,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,OAAO;AACT;AAKO,IAAM,sBAET;AAEG,IAAM,gBAAgB;AAAA,EAC3B,CAAC,oBAAoB,QAAQ,GAAG;AAAA,EAChC,CAAC,oBAAoB,QAAQ,GAAG;AAAA,EAChC,CAAC,oBAAoB,GAAG,GAAG;AAAA,EAC3B,CAAC,oBAAoB,OAAO,GAAG;AAAA,EAC/B,CAAC,oBAAoB,QAAQ,GAAG;AAAA,EAChC,CAAC,oBAAoB,SAAS,GAAG;AAAA,EACjC,CAAC,oBAAoB,KAAK,GAAG;AAC/B;AAEO,IAAM,mBAAmB;AAAA,EAC9B,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,oBAAoB;AACtB;AAMO,IAAM,WAAoD;AAAA,EAC/D,CAAC,uDAAqC,GAAG;AAAA,IACvC,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,6BAAwB,GAAG;AAAA,IAC1B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,qCAA4B,GAAG;AAAA,IAC9B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,+BAAyB,GAAG;AAAA,IAC3B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,uCAA6B,GAAG;AAAA,IAC/B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,iCAA0B,GAAG;AAAA,IAC5B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,yCAA8B,GAAG;AAAA,IAChC,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,yBAAsB,GAAG;AAAA,IACxB,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,iCAA0B,GAAG;AAAA,IAC5B,kBAAkB;AAAA,MAChB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA,EACA,CAAC,6DAAwC,GAAG;AAAA,IAC1C,kBAAkB,CAAC,oBAAoB,QAAQ;AAAA,EACjD;AAAA,EACA,CAAC,iEAA0C,GAAG;AAAA,IAC5C,kBAAkB,CAAC,oBAAoB,QAAQ;AAAA,EACjD;AAAA,EACA,CAAC,iDAAkC,GAAG;AAAA,IACpC,kBAAkB,CAAC,oBAAoB,QAAQ;AAAA,EACjD;AAAA,EACA,CAAC,2DAAuC,GAAG;AAAA,IACzC,kBAAkB,CAAC,oBAAoB,QAAQ;AAAA,EACjD;AAAA,EACA,CAAC,2DAAuC,GAAG;AAAA,IACzC,kBAAkB,CAAC,oBAAoB,QAAQ;AAAA,EACjD;AACF;","names":["TRIGGER_TYPES","TRIGGER_TYPES_GROUPS"]}