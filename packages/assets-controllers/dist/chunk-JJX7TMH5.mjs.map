{"version":3,"sources":["../src/TokenBalancesController.ts"],"sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\n\nimport type { AssetsContractControllerGetERC20BalanceOfAction } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AssetsContractControllerGetERC20BalanceOfAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateBalances();\n      },\n    );\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n    const selectedInternalAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      try {\n        const balance = await this.messagingSystem.call(\n          'AssetsContractController:getERC20BalanceOf',\n          address,\n          selectedInternalAccount.address,\n        );\n        newContractBalances[address] = toHex(balance);\n        token.hasBalanceError = false;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.hasBalanceError = true;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"],"mappings":";;;;;;;AAMA,SAAS,sBAAsB;AAC/B,SAAS,eAAe,aAAa;AAMrC,IAAM,mBAAmB;AAEzB,IAAM,iBAAiB;AAEvB,IAAM,WAAW;AAAA,EACf,kBAAkB,EAAE,SAAS,MAAM,WAAW,MAAM;AACtD;AAiEO,SAAS,+BAA6D;AAC3E,SAAO;AAAA,IACL,kBAAkB,CAAC;AAAA,EACrB;AACF;AAxFA;AA8FO,IAAM,0BAAN,cAAsC,eAI3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,YAAY;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX;AAAA,IACA,QAAQ,CAAC;AAAA,EACX,GAAmC;AACjC,UAAM;AAAA,MACJ,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL,GAAG,6BAA6B;AAAA,QAChC,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAjCH;AAEA;AAEA;AAEA;AA6BE,uBAAK,WAAY;AACjB,uBAAK,WAAY;AACjB,uBAAK,SAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB;AAAA,MACA,CAAC,EAAE,QAAQ,WAAW,eAAe,MAAM;AACzC,2BAAK,SAAU,CAAC,GAAG,WAAW,GAAG,cAAc;AAG/C,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AAIA,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,uBAAK,WAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,UAAkC;AAC3C,QAAI,UAAU;AACZ,yBAAK,WAAY;AAAA,IACnB;AAEA,QAAI,mBAAK,UAAS;AAChB,mBAAa,mBAAK,QAAO;AAAA,IAC3B;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,CAAC;AAE/C,uBAAK,SAAU,WAAW,MAAM;AAG9B,WAAK,KAAK,mBAAK,UAAS;AAAA,IAC1B,GAAG,mBAAK,UAAS;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB;AACrB,QAAI,mBAAK,YAAW;AAClB;AAAA,IACF;AACA,UAAM,0BAA0B,KAAK,gBAAgB;AAAA,MACnD;AAAA,IACF;AAEA,UAAM,sBAAwC,CAAC;AAC/C,eAAW,SAAS,mBAAK,UAAS;AAChC,YAAM,EAAE,QAAQ,IAAI;AACpB,UAAI;AACF,cAAM,UAAU,MAAM,KAAK,gBAAgB;AAAA,UACzC;AAAA,UACA;AAAA,UACA,wBAAwB;AAAA,QAC1B;AACA,4BAAoB,OAAO,IAAI,MAAM,OAAO;AAC5C,cAAM,kBAAkB;AAAA,MAC1B,SAAS,OAAO;AACd,4BAAoB,OAAO,IAAI,MAAM,CAAC;AACtC,cAAM,kBAAkB;AAAA,MAC1B;AAAA,IACF;AAEA,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,mBAAmB;AAAA,IAC3B,CAAC;AAAA,EACH;AACF;AA3HE;AAEA;AAEA;AAEA;AAuHF,IAAO,kCAAQ;","names":[]}