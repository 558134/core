{"version":3,"sources":["../src/RatesController/RatesController.ts"],"names":["Cryptocurrency","fetchMultiExchangeRate"],"mappings":"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","sourcesContent":["import { BaseController } from '@metamask/base-controller';\nimport { Mutex } from 'async-mutex';\n\nimport { fetchMultiExchangeRate as defaultFetchExchangeRate } from '../crypto-compare-service';\nimport type {\n  ConversionRates,\n  RatesControllerState,\n  RatesControllerOptions,\n  RatesControllerMessenger,\n} from './types';\n\nexport const name = 'RatesController';\n\nexport enum Cryptocurrency {\n  Btc = 'btc',\n}\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst metadata = {\n  fiatCurrency: { persist: true, anonymous: true },\n  rates: { persist: true, anonymous: true },\n  cryptocurrencies: { persist: true, anonymous: true },\n};\n\nconst defaultState = {\n  fiatCurrency: 'usd',\n  rates: {\n    [Cryptocurrency.Btc]: {\n      conversionDate: 0,\n      conversionRate: '0',\n    },\n  },\n  cryptocurrencies: [Cryptocurrency.Btc],\n};\n\nexport class RatesController extends BaseController<\n  typeof name,\n  RatesControllerState,\n  RatesControllerMessenger\n> {\n  readonly #mutex = new Mutex();\n\n  readonly #fetchMultiExchangeRate;\n\n  readonly #includeUsdRate;\n\n  #intervalLength: number;\n\n  #intervalId: NodeJS.Timeout | undefined;\n\n  /**\n   * Creates a RatesController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.includeUsdRate - Keep track of the USD rate in addition to the current currency rate.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.fetchMultiExchangeRate - Fetches the exchange rate from an external API. This option is primarily meant for use in unit tests.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    messenger,\n    state,\n    includeUsdRate,\n    fetchMultiExchangeRate = defaultFetchExchangeRate,\n  }: RatesControllerOptions) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.#includeUsdRate = includeUsdRate;\n    this.#fetchMultiExchangeRate = fetchMultiExchangeRate;\n    this.#intervalLength = interval;\n  }\n\n  /**\n   * Executes a function `callback` within a mutex lock to ensure that only one instance of `callback` runs at a time across all invocations of `#withLock`.\n   * This method is useful for synchronizing access to a resource or section of code that should not be executed concurrently.\n   *\n   * @template R - The return type of the function `callback`.\n   * @param callback - A callback to execute once the lock is acquired. This callback can be synchronous or asynchronous.\n   * @returns A promise that resolves to the result of the function `callback`. The promise is fulfilled once `callback` has completed execution.\n   * @example\n   * async function criticalLogic() {\n   *   // Critical logic code goes here.\n   * }\n   *\n   * // Execute criticalLogic within a lock.\n   * const result = await this.#withLock(criticalLogic);\n   */\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  async #withLock<R>(callback: () => R) {\n    const releaseLock = await this.#mutex.acquire();\n    try {\n      return callback();\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Executes the polling operation to update rates.\n   */\n  async #executePoll(): Promise<void> {\n    await this.#updateRates();\n  }\n\n  /**\n   * Updates the rates by fetching new data.\n   */\n  async #updateRates(): Promise<void> {\n    await this.#withLock(async () => {\n      const { fiatCurrency, cryptocurrencies } = this.state;\n      const response: Record<\n        Cryptocurrency,\n        Record<string, string>\n      > = await this.#fetchMultiExchangeRate(\n        fiatCurrency,\n        cryptocurrencies,\n        this.#includeUsdRate,\n      );\n\n      const updatedRates: ConversionRates = {};\n      for (const [cryptocurrency, values] of Object.entries(response)) {\n        updatedRates[cryptocurrency] = {\n          conversionDate: Date.now(),\n          conversionRate: values[fiatCurrency],\n          ...(this.#includeUsdRate && { usdConversionRate: values.usd }),\n        };\n      }\n\n      this.update(() => {\n        return {\n          ...this.state,\n          rates: updatedRates,\n        };\n      });\n    });\n  }\n\n  /**\n   * Starts the polling process.\n   */\n  async start(): Promise<void> {\n    if (this.#intervalId) {\n      return;\n    }\n\n    this.messagingSystem.publish(`${name}:pollingStarted`);\n\n    this.#intervalId = setInterval(() => {\n      this.#executePoll().catch(console.error);\n    }, this.#intervalLength);\n  }\n\n  /**\n   * Stops the polling process.\n   */\n  async stop(): Promise<void> {\n    if (!this.#intervalId) {\n      return;\n    }\n\n    clearInterval(this.#intervalId);\n    this.#intervalId = undefined;\n    this.messagingSystem.publish(`${name}:pollingStopped`);\n  }\n\n  /**\n   * Returns the current list of cryptocurrency.\n   * @returns The cryptocurrency list.\n   */\n  getCryptocurrencyList(): Cryptocurrency[] {\n    const { cryptocurrencies } = this.state;\n    return cryptocurrencies;\n  }\n\n  /**\n   * Sets the list of supported cryptocurrencies.\n   * @param list - The list of supported cryptocurrencies.\n   */\n  async setCryptocurrencyList(list: Cryptocurrency[]): Promise<void> {\n    await this.#withLock(() => {\n      this.update(() => {\n        return {\n          ...this.state,\n          fromCurrencies: list,\n        };\n      });\n    });\n  }\n\n  /**\n   * Sets the internal fiat currency and update rates accordingly.\n   * @param fiatCurrency - The fiat currency.\n   */\n  async setFiatCurrency(fiatCurrency: string): Promise<void> {\n    if (fiatCurrency === '') {\n      throw new Error('The currency can not be an empty string');\n    }\n\n    await this.#withLock(() => {\n      this.update(() => {\n        return {\n          ...defaultState,\n          fiatCurrency,\n        };\n      });\n    });\n    await this.#updateRates();\n  }\n}\n"]}