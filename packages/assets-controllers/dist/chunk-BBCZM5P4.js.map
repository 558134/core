{"version":3,"sources":["../src/NftDetectionController.ts"],"names":["BlockaidResultType"],"mappings":"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","sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type { AddApprovalRequest } from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  toChecksumHexAddress,\n  ChainId,\n  NFT_API_BASE_URL,\n  NFT_API_VERSION,\n  convertHexToDecimal,\n  handleFetch,\n  fetchWithErrorHandling,\n  NFT_API_TIMEOUT,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkClient,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerStateChangeEvent,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n  PreferencesState,\n} from '@metamask/preferences-controller';\nimport { createDeferredPromise, type Hex } from '@metamask/utils';\n\nimport { reduceInBatchesSerially } from './assetsUtil';\nimport { Source } from './constants';\nimport {\n  type NftController,\n  type NftControllerState,\n  type NftMetadata,\n} from './NftController';\n\nconst controllerName = 'NftDetectionController';\n\nexport type NFTDetectionControllerState = Record<never, never>;\n\nexport type AllowedActions =\n  | AddApprovalRequest\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | PreferencesControllerGetStateAction\n  | AccountsControllerGetSelectedAccountAction;\n\nexport type AllowedEvents =\n  | PreferencesControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent;\n\nexport type NftDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\nconst supportedNftDetectionNetworks: Hex[] = [\n  ChainId.mainnet,\n  ChainId['linea-mainnet'],\n];\n\n/**\n * @type ApiNft\n *\n * NFT object coming from OpenSea api\n * @property token_id - The NFT identifier\n * @property num_sales - Number of sales\n * @property background_color - The background color to be displayed with the item\n * @property image_url - URI of an image associated with this NFT\n * @property image_preview_url - URI of a smaller image associated with this NFT\n * @property image_thumbnail_url - URI of a thumbnail image associated with this NFT\n * @property image_original_url - URI of the original image associated with this NFT\n * @property animation_url - URI of a animation associated with this NFT\n * @property animation_original_url - URI of the original animation associated with this NFT\n * @property name - The NFT name\n * @property description - The NFT description\n * @property external_link - External link containing additional information\n * @property assetContract - The NFT contract information object\n * @property creator - The NFT owner information object\n * @property lastSale - When this item was last sold\n */\nexport type ApiNft = {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  token_id: string;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  num_sales: number | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  background_color: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  image_url: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  image_preview_url: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  image_thumbnail_url: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  image_original_url: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  animation_url: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  animation_original_url: string | null;\n  name: string | null;\n  description: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  external_link: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  asset_contract: ApiNftContract;\n  creator: ApiNftCreator;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  last_sale: ApiNftLastSale | null;\n};\n\n/**\n * @type ApiNftContract\n *\n * NFT contract object coming from OpenSea api\n * @property address - Address of the NFT contract\n * @property asset_contract_type - The NFT type, it could be `semi-fungible` or `non-fungible`\n * @property created_date - Creation date\n * @property collection - Object containing the contract name and URI of an image associated\n * @property schema_name - The schema followed by the contract, it could be `ERC721` or `ERC1155`\n * @property symbol - The NFT contract symbol\n * @property total_supply - Total supply of NFTs\n * @property description - The NFT contract description\n * @property external_link - External link containing additional information\n */\nexport type ApiNftContract = {\n  address: string;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  asset_contract_type: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  created_date: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  schema_name: string | null;\n  symbol: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  total_supply: string | null;\n  description: string | null;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  external_link: string | null;\n  collection: {\n    name: string | null;\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    image_url?: string | null;\n    tokenCount?: string | null;\n  };\n};\n\n/**\n * @type ApiNftLastSale\n *\n * NFT sale object coming from OpenSea api\n * @property event_timestamp - Object containing a `username`\n * @property total_price - URI of NFT image associated with this owner\n * @property transaction - Object containing transaction_hash and block_hash\n */\nexport type ApiNftLastSale = {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  event_timestamp: string;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  total_price: string;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  transaction: { transaction_hash: string; block_hash: string };\n};\n\n/**\n * @type ApiNftCreator\n *\n * NFT creator object coming from OpenSea api\n * @property user - Object containing a `username`\n * @property profile_img_url - URI of NFT image associated with this owner\n * @property address - The owner address\n */\nexport type ApiNftCreator = {\n  user: { username: string };\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  profile_img_url: string;\n  address: string;\n};\n\nexport type ReservoirResponse = {\n  tokens: TokensResponse[];\n  continuation?: string;\n};\n\nexport type TokensResponse = {\n  token: TokenResponse;\n  ownership: Ownership;\n  market?: Market;\n  blockaidResult?: Blockaid;\n};\n\nexport enum BlockaidResultType {\n  Benign = 'Benign',\n  Spam = 'Spam',\n  Warning = 'Warning',\n  Malicious = 'Malicious',\n}\n\nexport type Blockaid = {\n  contract: string;\n  chainId: number;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  result_type: BlockaidResultType;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  malicious_score: string;\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  attack_types: object;\n};\n\nexport type Market = {\n  floorAsk?: FloorAsk;\n  topBid?: TopBid;\n};\n\nexport type TokenResponse = {\n  chainId: number;\n  contract: string;\n  tokenId: string;\n  kind?: string;\n  name?: string;\n  image?: string;\n  imageSmall?: string;\n  imageLarge?: string;\n  metadata?: Metadata;\n  description?: string;\n  supply?: number;\n  remainingSupply?: number;\n  rarityScore?: number;\n  rarity?: number;\n  rarityRank?: number;\n  media?: string;\n  isFlagged?: boolean;\n  isSpam?: boolean;\n  isNsfw?: boolean;\n  metadataDisabled?: boolean;\n  lastFlagUpdate?: string;\n  lastFlagChange?: string;\n  collection?: Collection;\n  lastSale?: LastSale;\n  topBid?: TopBid;\n  lastAppraisalValue?: number;\n  attributes?: Attributes[];\n};\n\nexport type TopBid = {\n  id?: string;\n  price?: Price;\n  source?: {\n    id?: string;\n    domain?: string;\n    name?: string;\n    icon?: string;\n    url?: string;\n  };\n};\n\nexport type LastSale = {\n  saleId?: string;\n  token?: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: {\n      id?: string;\n      name?: string;\n    };\n  };\n  orderSource?: string;\n  orderSide?: 'ask' | 'bid';\n  orderKind?: string;\n  orderId?: string;\n  from?: string;\n  to?: string;\n  amount?: string;\n  fillSource?: string;\n  block?: number;\n  txHash?: string;\n  logIndex?: number;\n  batchIndex?: number;\n  timestamp?: number;\n  price?: Price;\n  washTradingScore?: number;\n  royaltyFeeBps?: number;\n  marketplaceFeeBps?: number;\n  paidFullRoyalty?: boolean;\n  feeBreakdown?: FeeBreakdown[];\n  isDeleted?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n};\n\nexport type FeeBreakdown = {\n  kind?: string;\n  bps?: number;\n  recipient?: string;\n  source?: string;\n  rawAmount?: string;\n};\n\nexport type Attributes = {\n  key?: string;\n  kind?: string;\n  value: string;\n  tokenCount?: number;\n  onSaleCount?: number;\n  floorAskPrice?: Price | null;\n  topBidValue?: number | null;\n  createdAt?: string;\n};\n\nexport type GetCollectionsResponse = {\n  collections: CollectionResponse[];\n};\n\nexport type CollectionResponse = {\n  id?: string;\n  openseaVerificationStatus?: string;\n  contractDeployedAt?: string;\n  creator?: string;\n  ownerCount?: string;\n  topBid?: TopBid & {\n    sourceDomain?: string;\n  };\n};\n\nexport type FloorAskCollection = {\n  id?: string;\n  price?: Price;\n  maker?: string;\n  kind?: string;\n  validFrom?: number;\n  validUntil?: number;\n  source?: SourceCollection;\n  rawData?: Metadata;\n  isNativeOffChainCancellable?: boolean;\n};\n\nexport type SourceCollection = {\n  id: string;\n  domain: string;\n  name: string;\n  icon: string;\n  url: string;\n};\n\nexport type TokenCollection = {\n  id?: string;\n  name?: string;\n  slug?: string;\n  symbol?: string;\n  imageUrl?: string;\n  image?: string;\n  isSpam?: boolean;\n  isNsfw?: boolean;\n  creator?: string;\n  tokenCount?: string;\n  metadataDisabled?: boolean;\n  openseaVerificationStatus?: string;\n  floorAskPrice?: Price;\n  royaltiesBps?: number;\n  royalties?: Royalties[];\n  floorAsk?: FloorAskCollection;\n};\n\nexport type Collection = TokenCollection & CollectionResponse;\n\nexport type Royalties = {\n  bps?: number;\n  recipient?: string;\n};\n\nexport type Ownership = {\n  tokenCount?: string;\n  onSaleCount?: string;\n  floorAsk?: FloorAsk;\n  acquiredAt?: string;\n};\n\nexport type FloorAsk = {\n  id?: string;\n  price?: Price;\n  maker?: string;\n  kind?: string;\n  validFrom?: number;\n  validUntil?: number;\n  source?: Source;\n  rawData?: Metadata;\n  isNativeOffChainCancellable?: boolean;\n};\n\nexport type Price = {\n  currency?: {\n    contract?: string;\n    name?: string;\n    symbol?: string;\n    decimals?: number;\n    chainId?: number;\n  };\n  amount?: {\n    raw?: string;\n    decimal?: number;\n    usd?: number;\n    native?: number;\n  };\n  netAmount?: {\n    raw?: string;\n    decimal?: number;\n    usd?: number;\n    native?: number;\n  };\n};\n\nexport type Metadata = {\n  imageOriginal?: string;\n  tokenURI?: string;\n};\n\nexport const MAX_GET_COLLECTION_BATCH_SIZE = 20;\n\n/**\n * Controller that passively detects nfts for a user address\n */\nexport class NftDetectionController extends BaseController<\n  typeof controllerName,\n  NFTDetectionControllerState,\n  NftDetectionControllerMessenger\n> {\n  #disabled: boolean;\n\n  readonly #addNft: NftController['addNft'];\n\n  readonly #getNftState: () => NftControllerState;\n\n  #inProcessNftFetchingUpdates: Record<`${Hex}:${string}`, Promise<void>>;\n\n  /**\n   * The controller options\n   *\n   * @param options - The controller options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.disabled - Represents previous value of useNftDetection. Used to detect changes of useNftDetection. Default value is true.\n   * @param options.addNft - Add an NFT.\n   * @param options.getNftState - Gets the current state of the Assets controller.\n   */\n  constructor({\n    messenger,\n    disabled = false,\n    addNft,\n    getNftState,\n  }: {\n    messenger: NftDetectionControllerMessenger;\n    disabled: boolean;\n    addNft: NftController['addNft'];\n    getNftState: () => NftControllerState;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      metadata: {},\n      state: {},\n    });\n    this.#disabled = disabled;\n    this.#inProcessNftFetchingUpdates = {};\n\n    this.#getNftState = getNftState;\n    this.#addNft = addNft;\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      this.#onPreferencesControllerStateChange.bind(this),\n    );\n  }\n\n  /**\n   * Checks whether network is mainnet or not.\n   *\n   * @returns Whether current network is mainnet.\n   */\n  isMainnet(): boolean {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return chainId === ChainId.mainnet;\n  }\n\n  isMainnetByNetworkClientId(networkClient: NetworkClient): boolean {\n    return networkClient.configuration.chainId === ChainId.mainnet;\n  }\n\n  /**\n   * Handles the state change of the preference controller.\n   * @param preferencesState - The new state of the preference controller.\n   * @param preferencesState.useNftDetection - Boolean indicating user preference on NFT detection.\n   */\n  #onPreferencesControllerStateChange({ useNftDetection }: PreferencesState) {\n    if (!useNftDetection !== this.#disabled) {\n      this.#disabled = !useNftDetection;\n    }\n  }\n\n  #getOwnerNftApi({\n    chainId,\n    address,\n    next,\n  }: {\n    chainId: string;\n    address: string;\n    next?: string;\n  }) {\n    return `${\n      NFT_API_BASE_URL as string\n    }/users/${address}/tokens?chainIds=${chainId}&limit=50&includeTopBid=true&continuation=${\n      next ?? ''\n    }`;\n  }\n\n  async #getOwnerNfts(\n    address: string,\n    chainId: Hex,\n    cursor: string | undefined,\n  ) {\n    // Convert hex chainId to number\n    const convertedChainId = convertHexToDecimal(chainId).toString();\n    const url = this.#getOwnerNftApi({\n      chainId: convertedChainId,\n      address,\n      next: cursor,\n    });\n    const nftApiResponse: ReservoirResponse = await handleFetch(url, {\n      headers: {\n        Version: NFT_API_VERSION,\n      },\n    });\n    return nftApiResponse;\n  }\n\n  /**\n   * Triggers asset ERC721 token auto detection on mainnet. Any newly detected NFTs are\n   * added.\n   *\n   * @param options - Options bag.\n   * @param options.networkClientId - The network client ID to detect NFTs on.\n   * @param options.userAddress - The address to detect NFTs for.\n   */\n  async detectNfts(options?: {\n    networkClientId?: NetworkClientId;\n    userAddress?: string;\n  }) {\n    const userAddress =\n      options?.userAddress ??\n      this.messagingSystem.call('AccountsController:getSelectedAccount')\n        .address;\n\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n\n    /* istanbul ignore if */\n    if (!supportedNftDetectionNetworks.includes(chainId) || this.#disabled) {\n      return;\n    }\n    /* istanbul ignore else */\n    if (!userAddress) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const updateKey: `${Hex}:${string}` = `${chainId}:${userAddress}`;\n    if (updateKey in this.#inProcessNftFetchingUpdates) {\n      // This prevents redundant updates\n      // This promise is resolved after the in-progress update has finished,\n      // and state has been updated.\n      await this.#inProcessNftFetchingUpdates[updateKey];\n      return;\n    }\n\n    const {\n      promise: inProgressUpdate,\n      resolve: updateSucceeded,\n      reject: updateFailed,\n    } = createDeferredPromise({ suppressUnhandledRejection: true });\n    this.#inProcessNftFetchingUpdates[updateKey] = inProgressUpdate;\n\n    let next;\n    let apiNfts: TokensResponse[] = [];\n    let resultNftApi: ReservoirResponse;\n    try {\n      do {\n        resultNftApi = await this.#getOwnerNfts(userAddress, chainId, next);\n        apiNfts = resultNftApi.tokens.filter(\n          (elm) =>\n            elm.token.isSpam === false &&\n            (elm.blockaidResult?.result_type\n              ? elm.blockaidResult?.result_type === BlockaidResultType.Benign\n              : true),\n        );\n        // Retrieve collections from apiNfts\n        // contract and collection.id are equal for simple contract addresses; this is to exclude cases for shared contracts\n        const collections = apiNfts.reduce<string[]>((acc, currValue) => {\n          if (\n            !acc.includes(currValue.token.contract) &&\n            currValue.token.contract === currValue?.token?.collection?.id\n          ) {\n            acc.push(currValue.token.contract);\n          }\n          return acc;\n        }, []);\n\n        if (collections.length !== 0) {\n          // Call API to retrive collections infos\n          // The api accept a max of 20 contracts\n          const collectionResponse: GetCollectionsResponse =\n            await reduceInBatchesSerially({\n              values: collections,\n              batchSize: MAX_GET_COLLECTION_BATCH_SIZE,\n              eachBatch: async (allResponses, batch) => {\n                const params = new URLSearchParams(\n                  batch.map((s) => ['contract', s]),\n                );\n                params.append('chainId', '1'); // Adding chainId 1 because we are only detecting for mainnet\n                const collectionResponseForBatch = await fetchWithErrorHandling(\n                  {\n                    url: `${\n                      NFT_API_BASE_URL as string\n                    }/collections?${params.toString()}`,\n                    options: {\n                      headers: {\n                        Version: NFT_API_VERSION,\n                      },\n                    },\n                    timeout: NFT_API_TIMEOUT,\n                  },\n                );\n\n                return {\n                  ...allResponses,\n                  ...collectionResponseForBatch,\n                };\n              },\n              initialResult: {},\n            });\n\n          // Add collections response fields to  newnfts\n          if (collectionResponse.collections?.length) {\n            apiNfts.forEach((singleNFT) => {\n              const found = collectionResponse.collections.find(\n                (elm) =>\n                  elm.id?.toLowerCase() ===\n                  singleNFT.token.contract.toLowerCase(),\n              );\n              if (found) {\n                singleNFT.token = {\n                  ...singleNFT.token,\n                  collection: {\n                    ...(singleNFT.token.collection ?? {}),\n                    creator: found?.creator,\n                    openseaVerificationStatus: found?.openseaVerificationStatus,\n                    contractDeployedAt: found.contractDeployedAt,\n                    ownerCount: found.ownerCount,\n                    topBid: found.topBid,\n                  },\n                };\n              }\n            });\n          }\n        }\n\n        // Proceed to add NFTs\n        const addNftPromises = apiNfts.map(async (nft) => {\n          const {\n            tokenId,\n            contract,\n            kind,\n            image: imageUrl,\n            imageSmall: imageThumbnailUrl,\n            metadata: { imageOriginal: imageOriginalUrl } = {},\n            name,\n            description,\n            attributes,\n            topBid,\n            lastSale,\n            rarityRank,\n            rarityScore,\n            collection,\n          } = nft.token;\n\n          let ignored;\n          /* istanbul ignore else */\n          const { ignoredNfts } = this.#getNftState();\n          if (ignoredNfts.length) {\n            ignored = ignoredNfts.find((c) => {\n              /* istanbul ignore next */\n              return (\n                c.address === toChecksumHexAddress(contract) &&\n                c.tokenId === tokenId\n              );\n            });\n          }\n\n          /* istanbul ignore else */\n          if (!ignored) {\n            /* istanbul ignore next */\n            const nftMetadata: NftMetadata = Object.assign(\n              {},\n              { name },\n              description && { description },\n              imageUrl && { image: imageUrl },\n              imageThumbnailUrl && { imageThumbnail: imageThumbnailUrl },\n              imageOriginalUrl && { imageOriginal: imageOriginalUrl },\n              kind && { standard: kind.toUpperCase() },\n              lastSale && { lastSale },\n              attributes && { attributes },\n              topBid && { topBid },\n              rarityRank && { rarityRank },\n              rarityScore && { rarityScore },\n              collection && { collection },\n            );\n            await this.#addNft(contract, tokenId, {\n              nftMetadata,\n              userAddress,\n              source: Source.Detected,\n              networkClientId: options?.networkClientId,\n            });\n          }\n        });\n        await Promise.all(addNftPromises);\n      } while ((next = resultNftApi.continuation));\n      updateSucceeded();\n    } catch (error) {\n      updateFailed(error);\n      throw error;\n    } finally {\n      delete this.#inProcessNftFetchingUpdates[updateKey];\n    }\n  }\n}\n\nexport default NftDetectionController;\n"]}