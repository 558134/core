{"version":3,"sources":["../src/crypto-compare-service/crypto-compare.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAmB;AAM5B,IAAM,wBAAwB,oBAAI,IAAI,CAAC,CAAC,OAAO,QAAQ,CAAC,CAAC;AAEzD,IAAM,wBAAwB;AAa9B,SAAS,cACP,iBACA,gBACA,gBACA;AACA,mBAAiB,eAAe,YAAY;AAC5C,QAAM,OAAO,sBAAsB,IAAI,cAAc,KAAK;AAC1D,SACE,GAAG,qBAAqB,oBACrB,IAAI,UAAU,gBAAgB,YAAY,CAAC,GAC3C,kBAAkB,gBAAgB,YAAY,MAAM,QAAQ,SAAS,EAAE;AAE9E;AAYA,SAAS,mBACP,OACA,OACA,iBAAiB,OACjB;AACA,QAAM,eACJ,kBAAkB,CAAC,MAAM,SAAS,KAAK,IAAI,GAAG,KAAK,SAAS;AAE9D,QAAM,SAAS,IAAI,gBAAgB;AACnC,SAAO,OAAO,SAAS,KAAK;AAC5B,SAAO,OAAO,SAAS,YAAY;AAEnC,QAAM,MAAM,IAAI,IAAI,GAAG,qBAAqB,kBAAkB;AAC9D,MAAI,SAAS,OAAO,SAAS;AAE7B,SAAO,IAAI,SAAS;AACtB;AAaA,SAAS,oBAAoB,MAA+C;AAC1E,MAAI,KAAK,aAAa,SAAS;AAC7B,UAAM,IAAI,MAAM,KAAK,OAAO;AAAA,EAC9B;AACF;AAUA,eAAsB,kBACpB,UACA,gBACA,gBAIC;AACD,QAAM,OAAO,MAAM;AAAA,IACjB,cAAc,UAAU,gBAAgB,cAAc;AAAA,EACxD;AAEA,sBAAoB,IAAI;AACxB,QAAM,iBAAiB,OAAO,KAAK,SAAS,YAAY,CAAC,CAAC;AAE1D,QAAM,oBAAoB,OAAO,KAAK,GAAG;AACzC,MAAI,CAAC,OAAO,SAAS,cAAc,GAAG;AACpC,UAAM,IAAI;AAAA,MACR,wBAAwB,SAAS,YAAY,CAAC;AAAA;AAAA,MAG5C,KAAK,SAAS,YAAY,CAAC,CAC7B;AAAA,IACF;AAAA,EACF;AAEA,MAAI,kBAAkB,CAAC,OAAO,SAAS,iBAAiB,GAAG;AAGzD,UAAM,IAAI,MAAM,2CAA2C,KAAK,GAAG,EAAE;AAAA,EACvE;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAUA,eAAsB,uBACpB,cACA,kBACA,gBACiD;AACjD,QAAM,MAAM;AAAA,IACV,OAAO,OAAO,gBAAgB,EAAE,KAAK,GAAG;AAAA,IACxC;AAAA,IACA;AAAA,EACF;AACA,QAAM,WAAW,MAAM,YAAY,GAAG;AACtC,sBAAoB,QAAQ;AAE5B,QAAM,QAAgD,CAAC;AACvD,aAAW,CAAC,gBAAgB,MAAM,KAAK,OAAO,QAAQ,QAAQ,GAGzD;AACH,UAAM,eAAe,YAAY,CAAC,IAAI;AAAA,MACpC,CAAC,aAAa,YAAY,CAAC,GAAG,OAAO,aAAa,YAAY,CAAC;AAAA,MAC/D,GAAI,kBAAkB,EAAE,KAAK,OAAO,IAAI;AAAA,IAC1C;AAAA,EACF;AAEA,SAAO;AACT","sourcesContent":["import { handleFetch } from '@metamask/controller-utils';\n\n/**\n * A map from native currency symbol to CryptoCompare identifier.\n * This is only needed when the values don't match.\n */\nconst nativeSymbolOverrides = new Map([['MNT', 'MANTLE']]);\n\nconst CRYPTO_COMPARE_DOMAIN = 'https://min-api.cryptocompare.com';\n\n/**\n * Get the CryptoCompare API URL for getting the conversion rate from the given native currency to\n * the given currency. Optionally, the conversion rate from the native currency to USD can also be\n * included in the response.\n *\n * @param currentCurrency - The currency to get a conversion rate for.\n * @param nativeCurrency - The native currency to convert from.\n * @param includeUSDRate - Whether or not the native currency to USD conversion rate should be\n * included in the response as well.\n * @returns The API URL for getting the conversion rate.\n */\nfunction getPricingURL(\n  currentCurrency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n) {\n  nativeCurrency = nativeCurrency.toUpperCase();\n  const fsym = nativeSymbolOverrides.get(nativeCurrency) ?? nativeCurrency;\n  return (\n    `${CRYPTO_COMPARE_DOMAIN}/data/price?fsym=` +\n    `${fsym}&tsyms=${currentCurrency.toUpperCase()}` +\n    `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`\n  );\n}\n\n/**\n * Get the CryptoCompare API URL for getting the conversion rate from a given array of native currencies\n * to the given currency. Optionally, the conversion rate from the native currency to USD can also be\n * included in the response.\n *\n * @param fsyms - The native currencies to get conversion rates for.\n * @param tsyms - The currency to convert to.\n * @param includeUSDRate - Whether or not the native currency to USD conversion rate should be included.\n * @returns The API URL for getting the conversion rates.\n */\nfunction getMultiPricingURL(\n  fsyms: string,\n  tsyms: string,\n  includeUSDRate = false,\n) {\n  const updatedTsyms =\n    includeUSDRate && !tsyms.includes('USD') ? `${tsyms},USD` : tsyms;\n\n  const params = new URLSearchParams();\n  params.append('fsyms', fsyms);\n  params.append('tsyms', updatedTsyms);\n\n  const url = new URL(`${CRYPTO_COMPARE_DOMAIN}/data/pricemulti`);\n  url.search = params.toString();\n\n  return url.toString();\n}\n\n/**\n * Handles an error response from the CryptoCompare API.\n * Expected error response format\n * { Response: \"Error\", Message: \"...\", HasWarning: false }\n *\n * @param json - The JSON response from the CryptoCompare API.\n * @param json.Response - The response status.\n * @param json.Message - The error message.\n */\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction handleErrorResponse(json: { Response?: string; Message?: string }) {\n  if (json.Response === 'Error') {\n    throw new Error(json.Message);\n  }\n}\n\n/**\n * Fetches the exchange rate for a given currency.\n *\n * @param currency - ISO 4217 currency code.\n * @param nativeCurrency - Symbol for base asset.\n * @param includeUSDRate - Whether to add the USD rate to the fetch.\n * @returns Promise resolving to exchange rate for given currency.\n */\nexport async function fetchExchangeRate(\n  currency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n): Promise<{\n  conversionRate: number;\n  usdConversionRate: number;\n}> {\n  const json = await handleFetch(\n    getPricingURL(currency, nativeCurrency, includeUSDRate),\n  );\n\n  handleErrorResponse(json);\n  const conversionRate = Number(json[currency.toUpperCase()]);\n\n  const usdConversionRate = Number(json.USD);\n  if (!Number.isFinite(conversionRate)) {\n    throw new Error(\n      `Invalid response for ${currency.toUpperCase()}: ${\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        json[currency.toUpperCase()]\n      }`,\n    );\n  }\n\n  if (includeUSDRate && !Number.isFinite(usdConversionRate)) {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new Error(`Invalid response for usdConversionRate: ${json.USD}`);\n  }\n\n  return {\n    conversionRate,\n    usdConversionRate,\n  };\n}\n\n/**\n * Fetches the exchange rates for multiple currencies.\n *\n * @param fiatCurrency - The currency of the rates (ISO 4217).\n * @param cryptocurrencies - The cryptocurrencies to get conversion rates for. Min length: 1. Max length: 300.\n * @param includeUSDRate - Whether to add the USD rate to the fetch.\n * @returns Promise resolving to exchange rates for given currencies.\n */\nexport async function fetchMultiExchangeRate(\n  fiatCurrency: string,\n  cryptocurrencies: string[],\n  includeUSDRate: boolean,\n): Promise<Record<string, Record<string, string>>> {\n  const url = getMultiPricingURL(\n    Object.values(cryptocurrencies).join(','),\n    fiatCurrency,\n    includeUSDRate,\n  );\n  const response = await handleFetch(url);\n  handleErrorResponse(response);\n\n  const rates: Record<string, Record<string, string>> = {};\n  for (const [cryptocurrency, values] of Object.entries(response) as [\n    string,\n    Record<string, string>,\n  ][]) {\n    rates[cryptocurrency.toLowerCase()] = {\n      [fiatCurrency.toLowerCase()]: values[fiatCurrency.toUpperCase()],\n      ...(includeUSDRate && { usd: values.USD }),\n    };\n  }\n\n  return rates;\n}\n"]}