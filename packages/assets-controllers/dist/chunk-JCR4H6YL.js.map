{"version":3,"sources":["../src/Standards/ERC20Standard.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,gBAAgB;AAEzB,SAAS,oBAAoB;AAC7B,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AAKjC,IAAM,gBAAN,MAAoB;AAAA,EAGzB,YAAY,UAAwB;AAClC,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,aAAa,SAAiB,iBAAsC;AACxE,UAAM,WAAW,IAAI,SAAS,SAAS,UAAU,KAAK,QAAQ;AAC9D,UAAM,UAAU,MAAM,SAAS,UAAU,eAAe;AACxD,WAAO,oBAAoB,OAAO;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,iBAAiB,SAAkC;AACvD,UAAM,WAAW,IAAI,SAAS,SAAS,UAAU,KAAK,QAAQ;AAC9D,QAAI;AACF,YAAM,WAAW,MAAM,SAAS,SAAS;AACzC,aAAO,SAAS,SAAS;AAAA,IAC3B,SAAS,KAAK;AAEZ,UACE,eAAe,SACf,IAAI,QAAQ,SAAS,uBAAuB,GAC5C;AACA,cAAM,IAAI,MAAM,gCAAgC;AAAA,MAClD;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAa,SAAkC;AACnD,UAAM,WAAW,IAAI,SAAS,SAAS,UAAU,KAAK,QAAQ;AAC9D,QAAI;AACF,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO,KAAK,SAAS;AAAA,IACvB,SAAS,KAAK;AAEZ,UACE,eAAe,SACf,IAAI,QAAQ,SAAS,uBAAuB,GAC5C;AACA,cAAM,IAAI,MAAM,4BAA4B;AAAA,MAC9C;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eAAe,SAAkC;AAErD,UAAM,UAAU,EAAE,IAAI,SAAS,MAAM,aAAa;AAClD,UAAM,SAAS,MAAM,KAAK,SAAS,KAAK,OAAO;AAC/C,4BAAwB,MAAM;AAE9B,QAAI;AACF,YAAM,UAAU,aAAa,UAAU,MAAM;AAC7C,UAAI,SAAS,SAAS,GAAG;AACvB,eAAO;AAAA,MACT;AAAA,IACF,QAAQ;AAAA,IAER;AAGA,QAAI;AACF,YAAM,OAAO,OAAO,MAAM;AAC1B,UAAI,KAAK,SAAS,GAAG;AACnB,eAAO;AAAA,MACT;AAAA,IACF,QAAQ;AAAA,IAER;AAEA,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,WACJ,SACA,aAMC;AACD,UAAM,CAAC,UAAU,QAAQ,OAAO,IAAI,MAAM,QAAQ,IAAI;AAAA,MACpD,KAAK,iBAAiB,OAAO;AAAA,MAC7B,KAAK,eAAe,OAAO;AAAA,MAC3B,cAAc,KAAK,aAAa,SAAS,WAAW,IAAI;AAAA,IAC1D,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AACF","sourcesContent":["import { toUtf8 } from '@ethereumjs/util';\nimport { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport { decodeSingle } from '@metamask/abi-utils';\nimport { ERC20 } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport { assertIsStrictHexString } from '@metamask/utils';\nimport type BN from 'bn.js';\n\nimport { ethersBigNumberToBN } from '../assetsUtil';\n\nexport class ERC20Standard {\n  private readonly provider: Web3Provider;\n\n  constructor(provider: Web3Provider) {\n    this.provider = provider;\n  }\n\n  /**\n   * Get balance or count for current account on specific asset contract.\n   *\n   * @param address - Asset ERC20 contract address.\n   * @param selectedAddress - Current account public address.\n   * @returns Promise resolving to BN object containing balance for current account on specific asset contract.\n   */\n  async getBalanceOf(address: string, selectedAddress: string): Promise<BN> {\n    const contract = new Contract(address, abiERC20, this.provider);\n    const balance = await contract.balanceOf(selectedAddress);\n    return ethersBigNumberToBN(balance);\n  }\n\n  /**\n   * Query for the decimals for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract string.\n   * @returns Promise resolving to the 'decimals'.\n   */\n  async getTokenDecimals(address: string): Promise<string> {\n    const contract = new Contract(address, abiERC20, this.provider);\n    try {\n      const decimals = await contract.decimals();\n      return decimals.toString();\n    } catch (err) {\n      // Mirror previous implementation\n      if (\n        err instanceof Error &&\n        err.message.includes('call revert exception')\n      ) {\n        throw new Error('Failed to parse token decimals');\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Query for the name for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract string.\n   * @returns Promise resolving to the 'name'.\n   */\n  async getTokenName(address: string): Promise<string> {\n    const contract = new Contract(address, abiERC20, this.provider);\n    try {\n      const name = await contract.name();\n      return name.toString();\n    } catch (err) {\n      // Mirror previous implementation\n      if (\n        err instanceof Error &&\n        err.message.includes('call revert exception')\n      ) {\n        throw new Error('Failed to parse token name');\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Query for symbol for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract address.\n   * @returns Promise resolving to the 'symbol'.\n   */\n  async getTokenSymbol(address: string): Promise<string> {\n    // Signature for calling `symbol()`\n    const payload = { to: address, data: '0x95d89b41' };\n    const result = await this.provider.call(payload);\n    assertIsStrictHexString(result);\n    // Parse as string - treat empty string as failure\n    try {\n      const decoded = decodeSingle('string', result);\n      if (decoded?.length > 0) {\n        return decoded;\n      }\n    } catch {\n      // Ignore error\n    }\n\n    // Parse as bytes - treat empty string as failure\n    try {\n      const utf8 = toUtf8(result);\n      if (utf8.length > 0) {\n        return utf8;\n      }\n    } catch {\n      // Ignore error\n    }\n\n    throw new Error('Failed to parse token symbol');\n  }\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param address - Asset contract address.\n   * @param userAddress - The public address for the currently active user's account.\n   * @returns Promise resolving an object containing the standard, decimals, symbol and balance of the given contract/userAddress pair.\n   */\n  async getDetails(\n    address: string,\n    userAddress?: string,\n  ): Promise<{\n    standard: string;\n    symbol: string | undefined;\n    decimals: string | undefined;\n    balance: BN | undefined;\n  }> {\n    const [decimals, symbol, balance] = await Promise.all([\n      this.getTokenDecimals(address),\n      this.getTokenSymbol(address),\n      userAddress ? this.getBalanceOf(address, userAddress) : undefined,\n    ]);\n    return {\n      decimals,\n      symbol,\n      balance,\n      standard: ERC20,\n    };\n  }\n}\n"]}