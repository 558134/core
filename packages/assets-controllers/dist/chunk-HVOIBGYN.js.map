{"version":3,"sources":["../src/AccountTrackerController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerSelectedEvmAccountChangeEvent,\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerListAccountsAction,\n  AccountsControllerSelectedAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerStateChangeEvent,\n  ControllerGetStateAction,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  query,\n  safelyExecuteWithTimeout,\n  toChecksumHexAddress,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\nimport { type Hex, assert } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport { cloneDeep } from 'lodash';\n\n/**\n * The name of the {@link AccountTrackerController}.\n */\nconst controllerName = 'AccountTrackerController';\n\n/**\n * @type AccountInformation\n *\n * Account information object\n * @property balance - Hex string of an account balancec in wei\n */\nexport type AccountInformation = {\n  balance: string;\n};\n\n/**\n * @type AccountTrackerControllerState\n *\n * Account tracker controller state\n * @property accounts - Map of addresses to account information\n */\nexport type AccountTrackerControllerState = {\n  accounts: { [address: string]: AccountInformation };\n  accountsByChainId: Record<string, { [address: string]: AccountInformation }>;\n};\n\nconst accountTrackerMetadata = {\n  accounts: {\n    persist: true,\n    anonymous: false,\n  },\n  accountsByChainId: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/**\n * The action that can be performed to get the state of the {@link AccountTrackerController}.\n */\nexport type AccountTrackerControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  AccountTrackerControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link AccountTrackerController}.\n */\nexport type AccountTrackerControllerActions =\n  AccountTrackerControllerGetStateAction;\n\n/**\n * The messenger of the {@link AccountTrackerController} for communication.\n */\nexport type AllowedActions =\n  | AccountsControllerListAccountsAction\n  | PreferencesControllerGetStateAction\n  | AccountsControllerGetSelectedAccountAction\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The event that {@link AccountTrackerController} can emit.\n */\nexport type AccountTrackerControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    AccountTrackerControllerState\n  >;\n\n/**\n * The events that {@link AccountTrackerController} can emit.\n */\nexport type AccountTrackerControllerEvents =\n  AccountTrackerControllerStateChangeEvent;\n\n/**\n * The external events available to the {@link AccountTrackerController}.\n */\nexport type AllowedEvents =\n  | AccountsControllerSelectedEvmAccountChangeEvent\n  | AccountsControllerSelectedAccountChangeEvent;\n\n/**\n * The messenger of the {@link AccountTrackerController}.\n */\nexport type AccountTrackerControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AccountTrackerControllerActions | AllowedActions,\n  AccountTrackerControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller that tracks the network balances for all user accounts.\n */\nexport class AccountTrackerController extends StaticIntervalPollingController<\n  typeof controllerName,\n  AccountTrackerControllerState,\n  AccountTrackerControllerMessenger\n> {\n  readonly #refreshMutex = new Mutex();\n\n  #handle?: ReturnType<typeof setTimeout>;\n\n  /**\n   * Creates an AccountTracker instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new account balances.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller messaging system.\n   */\n  constructor({\n    interval = 10000,\n    state,\n    messenger,\n  }: {\n    interval?: number;\n    state?: Partial<AccountTrackerControllerState>;\n    messenger: AccountTrackerControllerMessenger;\n  }) {\n    const { selectedNetworkClientId } = messenger.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = messenger.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    super({\n      name: controllerName,\n      messenger,\n      state: {\n        accounts: {},\n        accountsByChainId: {\n          [chainId]: {},\n        },\n        ...state,\n      },\n      metadata: accountTrackerMetadata,\n    });\n    this.setIntervalLength(interval);\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedEvmAccountChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      () => this.refresh(),\n    );\n  }\n\n  /**\n   * Gets the current chain ID.\n   * @returns The current chain ID.\n   */\n  #getCurrentChainId(): Hex {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return chainId;\n  }\n\n  private syncAccounts(newChainId: string) {\n    const accounts = { ...this.state.accounts };\n    const accountsByChainId = cloneDeep(this.state.accountsByChainId);\n\n    const existing = Object.keys(accounts);\n    if (!accountsByChainId[newChainId]) {\n      accountsByChainId[newChainId] = {};\n      existing.forEach((address) => {\n        accountsByChainId[newChainId][address] = { balance: '0x0' };\n      });\n    }\n\n    // Note: The address from the preferences controller are checksummed\n    // The addresses from the accounts controller are lowercased\n    const addresses = Object.values(\n      this.messagingSystem\n        .call('AccountsController:listAccounts')\n        .map((internalAccount) =>\n          toChecksumHexAddress(internalAccount.address),\n        ),\n    );\n    const newAddresses = addresses.filter(\n      (address) => !existing.includes(address),\n    );\n    const oldAddresses = existing.filter(\n      (address) => !addresses.includes(address),\n    );\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      newAddresses.forEach((address) => {\n        accountsByChainId[chainId][address] = {\n          balance: '0x0',\n        };\n      });\n    });\n\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    Object.keys(accountsByChainId).forEach((chainId) => {\n      oldAddresses.forEach((address) => {\n        delete accountsByChainId[chainId][address];\n      });\n    });\n\n    this.update((state) => {\n      state.accounts = accounts;\n      state.accountsByChainId = accountsByChainId;\n    });\n  }\n\n  /**\n   * Resolves a networkClientId to a network client config\n   * or globally selected network config if not provided\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   * @returns network client config\n   */\n  #getCorrectNetworkClient(networkClientId?: NetworkClientId): {\n    chainId: string;\n    ethQuery?: EthQuery;\n  } {\n    const selectedNetworkClientId =\n      networkClientId ??\n      this.messagingSystem.call('NetworkController:getState')\n        .selectedNetworkClientId;\n    const {\n      configuration: { chainId },\n      provider,\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n\n    return {\n      chainId,\n      ethQuery: new EthQuery(provider),\n    };\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval trigger a 'refresh'.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.setIntervalLength(interval);\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await this.refresh();\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.getIntervalLength());\n    }, this.getIntervalLength());\n  }\n\n  /**\n   * Refreshes the balances of the accounts using the networkClientId\n   *\n   * @param networkClientId - The network client ID used to get balances.\n   */\n  async _executePoll(networkClientId: string): Promise<void> {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.refresh(networkClientId);\n  }\n\n  /**\n   * Refreshes the balances of the accounts depending on the multi-account setting.\n   * If multi-account is disabled, only updates the selected account balance.\n   * If multi-account is enabled, updates balances for all accounts.\n   *\n   * @param networkClientId - Optional networkClientId to fetch a network client with\n   */\n  async refresh(networkClientId?: NetworkClientId) {\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n    const releaseLock = await this.#refreshMutex.acquire();\n    try {\n      const { chainId, ethQuery } =\n        this.#getCorrectNetworkClient(networkClientId);\n      this.syncAccounts(chainId);\n      const { accounts, accountsByChainId } = this.state;\n      const { isMultiAccountBalancesEnabled } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n\n      const accountsToUpdate = isMultiAccountBalancesEnabled\n        ? Object.keys(accounts)\n        : [toChecksumHexAddress(selectedAccount.address)];\n\n      const accountsForChain = { ...accountsByChainId[chainId] };\n      for (const address of accountsToUpdate) {\n        const balance = await this.#getBalanceFromChain(address, ethQuery);\n        if (balance) {\n          accountsForChain[address] = {\n            balance,\n          };\n        }\n      }\n\n      this.update((state) => {\n        if (chainId === this.#getCurrentChainId()) {\n          state.accounts = accountsForChain;\n        }\n        state.accountsByChainId[chainId] = accountsForChain;\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Fetches the balance of a given address from the blockchain.\n   *\n   * @param address - The account address to fetch the balance for.\n   * @param ethQuery - The EthQuery instance to query getBalnce with.\n   * @returns A promise that resolves to the balance in a hex string format.\n   */\n  async #getBalanceFromChain(\n    address: string,\n    ethQuery?: EthQuery,\n  ): Promise<string | undefined> {\n    return await safelyExecuteWithTimeout(async () => {\n      assert(ethQuery, 'Provider not set.');\n      return await query(ethQuery, 'getBalance', [address]);\n    });\n  }\n\n  /**\n   * Sync accounts balances with some additional addresses.\n   *\n   * @param addresses - the additional addresses, may be hardware wallet addresses.\n   * @param networkClientId - Optional networkClientId to fetch a network client with.\n   * @returns accounts - addresses with synced balance\n   */\n  async syncBalanceWithAddresses(\n    addresses: string[],\n    networkClientId?: NetworkClientId,\n  ): Promise<Record<string, { balance: string }>> {\n    const { ethQuery } = this.#getCorrectNetworkClient(networkClientId);\n\n    return await Promise.all(\n      addresses.map((address): Promise<[string, string] | undefined> => {\n        return safelyExecuteWithTimeout(async () => {\n          assert(ethQuery, 'Provider not set.');\n          const balance = await query(ethQuery, 'getBalance', [address]);\n          return [address, balance];\n        });\n      }),\n    ).then((value) => {\n      return value.reduce((obj, item) => {\n        if (!item) {\n          return obj;\n        }\n\n        const [address, balance] = item;\n        return {\n          ...obj,\n          [address]: {\n            balance,\n          },\n        };\n      }, {});\n    });\n  }\n}\n\nexport default AccountTrackerController;\n"]}