{"version":3,"sources":["../../src/tests/mocks.ts"],"sourcesContent":["import type {\n  InternalAccount,\n  InternalAccountType,\n} from '@metamask/keyring-api';\nimport {\n  BtcAccountType,\n  BtcMethod,\n  EthAccountType,\n  EthMethod,\n} from '@metamask/keyring-api';\nimport { KeyringTypes } from '@metamask/keyring-controller';\nimport { v4 } from 'uuid';\n\nexport const createMockInternalAccount = ({\n  id = v4(),\n  address = '0x2990079bcdee240329a520d2444386fc119da21a',\n  type = EthAccountType.Eoa,\n  name = 'Account 1',\n  keyringType = KeyringTypes.hd,\n  snap,\n  importTime = Date.now(),\n  lastSelected = Date.now(),\n}: {\n  id?: string;\n  address?: string;\n  type?: InternalAccountType;\n  name?: string;\n  keyringType?: KeyringTypes;\n  snap?: {\n    id: string;\n    enabled: boolean;\n    name: string;\n  };\n  importTime?: number;\n  lastSelected?: number;\n} = {}): InternalAccount => {\n  let methods;\n\n  switch (type) {\n    case EthAccountType.Eoa:\n      methods = [\n        EthMethod.PersonalSign,\n        EthMethod.Sign,\n        EthMethod.SignTransaction,\n        EthMethod.SignTypedDataV1,\n        EthMethod.SignTypedDataV3,\n        EthMethod.SignTypedDataV4,\n      ];\n      break;\n    case EthAccountType.Erc4337:\n      methods = [\n        EthMethod.PatchUserOperation,\n        EthMethod.PrepareUserOperation,\n        EthMethod.SignUserOperation,\n      ];\n      break;\n    case BtcAccountType.P2wpkh:\n      methods = [BtcMethod.SendMany];\n      break;\n    default:\n      throw new Error(`Unknown account type: ${type as string}`);\n  }\n\n  return {\n    id,\n    address,\n    options: {},\n    methods,\n    type,\n    metadata: {\n      name,\n      keyring: { type: keyringType },\n      importTime,\n      lastSelected,\n      snap,\n    },\n  } as InternalAccount;\n};\n"],"mappings":";;;AAIA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,oBAAoB;AAC7B,SAAS,UAAU;AAEZ,IAAM,4BAA4B,CAAC;AAAA,EACxC,KAAK,GAAG;AAAA,EACR,UAAU;AAAA,EACV,OAAO,eAAe;AAAA,EACtB,OAAO;AAAA,EACP,cAAc,aAAa;AAAA,EAC3B;AAAA,EACA,aAAa,KAAK,IAAI;AAAA,EACtB,eAAe,KAAK,IAAI;AAC1B,IAaI,CAAC,MAAuB;AAC1B,MAAI;AAEJ,UAAQ,MAAM;AAAA,IACZ,KAAK,eAAe;AAClB,gBAAU;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AACA;AAAA,IACF,KAAK,eAAe;AAClB,gBAAU;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AACA;AAAA,IACF,KAAK,eAAe;AAClB,gBAAU,CAAC,UAAU,QAAQ;AAC7B;AAAA,IACF;AACE,YAAM,IAAI,MAAM,yBAAyB,IAAc,EAAE;AAAA,EAC7D;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,SAAS,CAAC;AAAA,IACV;AAAA,IACA;AAAA,IACA,UAAU;AAAA,MACR;AAAA,MACA,SAAS,EAAE,MAAM,YAAY;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;","names":[]}