{"version":3,"sources":["../src/controllers/user-storage/services.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,SAAS;AAOhB,IAAM,WAAW,0BAAkB;AAE5B,IAAM,mBAA2B,SAAS;AAC1C,IAAM,wBAAwB,GAAG,gBAAgB;AAwBxD,eAAsB,eACpB,MACwB;AACxB,MAAI;AACF,UAAM,EAAE,aAAa,MAAM,WAAW,IAAI;AAE1C,UAAM,gBAAgB,gBAAgB,MAAM,UAAU;AACtD,UAAM,MAAM,IAAI,IAAI,GAAG,qBAAqB,GAAG,aAAa,EAAE;AAE9D,UAAM,sBAAsB,MAAM,MAAM,IAAI,SAAS,GAAG;AAAA,MACtD,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,WAAW;AAAA,MACtC;AAAA,IACF,CAAC;AAGD,QAAI,oBAAoB,WAAW,KAAK;AACtC,aAAO;AAAA,IACT;AAEA,QAAI,oBAAoB,WAAW,KAAK;AACtC,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAEA,UAAM,cACJ,MAAM,oBAAoB,KAAK;AACjC,UAAM,gBAAgB,aAAa,QAAQ;AAE3C,QAAI,CAAC,eAAe;AAClB,aAAO;AAAA,IACT;AAEA,UAAM,gBAAgB,mBAAW;AAAA,MAC/B;AAAA,MACA,KAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT,SAAS,GAAG;AACV,QAAI,MAAM,8BAA8B,CAAC;AACzC,WAAO;AAAA,EACT;AACF;AAQA,eAAsB,kBACpB,MACA,MACe;AACf,QAAM,EAAE,aAAa,MAAM,WAAW,IAAI;AAE1C,QAAM,gBAAgB,mBAAW,cAAc,MAAM,KAAK,UAAU;AACpE,QAAM,gBAAgB,gBAAgB,MAAM,UAAU;AACtD,QAAM,MAAM,IAAI,IAAI,GAAG,qBAAqB,GAAG,aAAa,EAAE;AAE9D,QAAM,MAAM,MAAM,MAAM,IAAI,SAAS,GAAG;AAAA,IACtC,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,eAAe,UAAU,WAAW;AAAA,IACtC;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,MAAM,cAAc,CAAC;AAAA,EAC9C,CAAC;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,IAAI,MAAM,sCAAsC;AAAA,EACxD;AACF","sourcesContent":["import log from 'loglevel';\n\nimport { Env, getEnvUrls } from '../../sdk';\nimport encryption from './encryption';\nimport type { UserStoragePath } from './schema';\nimport { createEntryPath } from './schema';\n\nconst ENV_URLS = getEnvUrls(Env.PRD);\n\nexport const USER_STORAGE_API: string = ENV_URLS.userStorageApiUrl;\nexport const USER_STORAGE_ENDPOINT = `${USER_STORAGE_API}/api/v1/userstorage`;\n\n/**\n * This is the Server Response shape\n */\nexport type GetUserStorageResponse = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  HashedKey: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  Data: string;\n};\n\nexport type UserStorageOptions = {\n  path: UserStoragePath;\n  bearerToken: string;\n  storageKey: string;\n};\n\n/**\n * User Storage Service - Get Storage Entry.\n *\n * @param opts - User Storage Options\n * @returns The storage entry, or null if fails to find entry\n */\nexport async function getUserStorage(\n  opts: UserStorageOptions,\n): Promise<string | null> {\n  try {\n    const { bearerToken, path, storageKey } = opts;\n\n    const encryptedPath = createEntryPath(path, storageKey);\n    const url = new URL(`${USER_STORAGE_ENDPOINT}${encryptedPath}`);\n\n    const userStorageResponse = await fetch(url.toString(), {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${bearerToken}`,\n      },\n    });\n\n    // Acceptable error - since indicates entry does not exist.\n    if (userStorageResponse.status === 404) {\n      return null;\n    }\n\n    if (userStorageResponse.status !== 200) {\n      throw new Error('Unable to get User Storage');\n    }\n\n    const userStorage: GetUserStorageResponse | null =\n      await userStorageResponse.json();\n    const encryptedData = userStorage?.Data ?? null;\n\n    if (!encryptedData) {\n      return null;\n    }\n\n    const decryptedData = encryption.decryptString(\n      encryptedData,\n      opts.storageKey,\n    );\n\n    return decryptedData;\n  } catch (e) {\n    log.error('Failed to get user storage', e);\n    return null;\n  }\n}\n\n/**\n * User Storage Service - Set Storage Entry.\n *\n * @param data - data to store\n * @param opts - storage options\n */\nexport async function upsertUserStorage(\n  data: string,\n  opts: UserStorageOptions,\n): Promise<void> {\n  const { bearerToken, path, storageKey } = opts;\n\n  const encryptedData = encryption.encryptString(data, opts.storageKey);\n  const encryptedPath = createEntryPath(path, storageKey);\n  const url = new URL(`${USER_STORAGE_ENDPOINT}${encryptedPath}`);\n\n  const res = await fetch(url.toString(), {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${bearerToken}`,\n    },\n    body: JSON.stringify({ data: encryptedData }),\n  });\n\n  if (!res.ok) {\n    throw new Error('user-storage - unable to upsert data');\n  }\n}\n"]}