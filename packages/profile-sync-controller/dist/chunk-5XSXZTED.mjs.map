{"version":3,"sources":["../src/sdk/utils/eip-6963-metamask-provider.ts"],"sourcesContent":["import type { Eip1193Provider } from 'ethers';\n\n// We can isolate and create a metamask function/closure\nexport type AnnounceProviderEventDetail = {\n  info?: { rdns?: string };\n  provider?: Eip1193Provider;\n};\nexport type AnnounceProviderEvent = CustomEvent<AnnounceProviderEventDetail>;\n\nexport const metamaskClientsRdns = {\n  main: 'io.metamask',\n  flask: 'io.metamask.flask',\n  institutional: 'io.metamask.mmi',\n};\n\nexport type MetamaskClientRdnsKey = keyof typeof metamaskClientsRdns;\n\ntype MetaMaskClientType = 'any' | MetamaskClientRdnsKey;\n\n// Cache, as when the function is recalled, we can reuse instead of continue waiting\nconst providerCache: Partial<Record<MetaMaskClientType, Eip1193Provider>> = {};\n\n/**\n * This uses EIP6963 to find all metamask accounts and returns the first matching provider\n * the consumer requests (main, flask, institutional, or any)\n *\n * @param type - the MetaMask Wallet type (main, flask, institutional, or any)\n * @returns a ethers provider so you can make requests to that specific wallet\n */\nexport function getMetaMaskProviderEIP6963(\n  type: MetaMaskClientType = 'any',\n): Promise<Eip1193Provider | null> {\n  return new Promise<Eip1193Provider | null>((res) => {\n    if (type !== 'any' && metamaskClientsRdns[type] === undefined) {\n      res(null);\n      return;\n    }\n\n    const cachedProvider = providerCache[type];\n    if (cachedProvider) {\n      res(cachedProvider);\n      return;\n    }\n\n    const providers: { rdns: string; provider: Eip1193Provider }[] = [];\n\n    const handleProviderEvent = (event: unknown) => {\n      const typedEvent = event as CustomEvent<AnnounceProviderEventDetail>;\n      const providerDetail = typedEvent?.detail;\n      if (providerDetail?.provider && providerDetail?.info?.rdns) {\n        providers.push({\n          rdns: providerDetail?.info?.rdns,\n          provider: providerDetail?.provider,\n        });\n      }\n    };\n\n    window.addEventListener('eip6963:announceProvider', handleProviderEvent);\n    window.dispatchEvent(new Event('eip6963:requestProvider'));\n\n    /**\n     * It may take some time for the events to be emitted from the different wallets.\n     * So waiting a small period of time before we use the collected events.\n     */\n    setTimeout(() => {\n      // remove attached listener\n      window.removeEventListener(\n        'eip6963:announceProvider',\n        handleProviderEvent,\n      );\n\n      let provider: Eip1193Provider | null;\n      if (type === 'any') {\n        // return the first MM client we find\n        const metamaskClients = Object.values(metamaskClientsRdns);\n        provider =\n          providers.find((p) => metamaskClients.includes(p.rdns))?.provider ??\n          null;\n      } else {\n        const metamaskRdns = metamaskClientsRdns[type];\n        provider =\n          providers.find((p) => p.rdns === metamaskRdns)?.provider ?? null;\n      }\n\n      if (provider) {\n        providerCache[type] = provider;\n      }\n      return res(provider);\n    }, 100);\n  });\n}\n"],"mappings":";AASO,IAAM,sBAAsB;AAAA,EACjC,MAAM;AAAA,EACN,OAAO;AAAA,EACP,eAAe;AACjB;AAOA,IAAM,gBAAsE,CAAC;AAStE,SAAS,2BACd,OAA2B,OACM;AACjC,SAAO,IAAI,QAAgC,CAAC,QAAQ;AAClD,QAAI,SAAS,SAAS,oBAAoB,IAAI,MAAM,QAAW;AAC7D,UAAI,IAAI;AACR;AAAA,IACF;AAEA,UAAM,iBAAiB,cAAc,IAAI;AACzC,QAAI,gBAAgB;AAClB,UAAI,cAAc;AAClB;AAAA,IACF;AAEA,UAAM,YAA2D,CAAC;AAElE,UAAM,sBAAsB,CAAC,UAAmB;AAC9C,YAAM,aAAa;AACnB,YAAM,iBAAiB,YAAY;AACnC,UAAI,gBAAgB,YAAY,gBAAgB,MAAM,MAAM;AAC1D,kBAAU,KAAK;AAAA,UACb,MAAM,gBAAgB,MAAM;AAAA,UAC5B,UAAU,gBAAgB;AAAA,QAC5B,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO,iBAAiB,4BAA4B,mBAAmB;AACvE,WAAO,cAAc,IAAI,MAAM,yBAAyB,CAAC;AAMzD,eAAW,MAAM;AAEf,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAEA,UAAI;AACJ,UAAI,SAAS,OAAO;AAElB,cAAM,kBAAkB,OAAO,OAAO,mBAAmB;AACzD,mBACE,UAAU,KAAK,CAAC,MAAM,gBAAgB,SAAS,EAAE,IAAI,CAAC,GAAG,YACzD;AAAA,MACJ,OAAO;AACL,cAAM,eAAe,oBAAoB,IAAI;AAC7C,mBACE,UAAU,KAAK,CAAC,MAAM,EAAE,SAAS,YAAY,GAAG,YAAY;AAAA,MAChE;AAEA,UAAI,UAAU;AACZ,sBAAc,IAAI,IAAI;AAAA,MACxB;AACA,aAAO,IAAI,QAAQ;AAAA,IACrB,GAAG,GAAG;AAAA,EACR,CAAC;AACH;","names":[]}