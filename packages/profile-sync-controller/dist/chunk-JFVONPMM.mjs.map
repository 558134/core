{"version":3,"sources":["../src/sdk/authentication.ts"],"sourcesContent":["import { SIWEJwtBearerAuth } from './authentication-jwt-bearer/flow-siwe';\nimport { SRPJwtBearerAuth } from './authentication-jwt-bearer/flow-srp';\nimport {\n  getNonce,\n  pairIdentifiers,\n} from './authentication-jwt-bearer/services';\nimport type { UserProfile, Pair } from './authentication-jwt-bearer/types';\nimport { AuthType } from './authentication-jwt-bearer/types';\nimport type { Env } from './env';\nimport { PairError, UnsupportedAuthTypeError } from './errors';\n\n// Computing the Classes, so we only get back the public methods for the interface.\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype Compute<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;\ntype SIWEInterface = Compute<SIWEJwtBearerAuth>;\ntype SRPInterface = Compute<SRPJwtBearerAuth>;\n\ntype SiweParams = ConstructorParameters<typeof SIWEJwtBearerAuth>;\ntype SRPParams = ConstructorParameters<typeof SRPJwtBearerAuth>;\ntype JwtBearerAuthParams = SiweParams | SRPParams;\n\nexport class JwtBearerAuth implements SIWEInterface, SRPInterface {\n  #type: AuthType;\n\n  #env: Env;\n\n  #sdk: SIWEJwtBearerAuth | SRPJwtBearerAuth;\n\n  constructor(...args: JwtBearerAuthParams) {\n    this.#type = args[0].type;\n    this.#env = args[0].env;\n\n    if (args[0].type === AuthType.SRP) {\n      this.#sdk = new SRPJwtBearerAuth(args[0], args[1]);\n      return;\n    }\n\n    if (args[0].type === AuthType.SiWE) {\n      this.#sdk = new SIWEJwtBearerAuth(args[0], args[1]);\n      return;\n    }\n\n    throw new UnsupportedAuthTypeError('unsupported auth type');\n  }\n\n  async getAccessToken(): Promise<string> {\n    return await this.#sdk.getAccessToken();\n  }\n\n  async getUserProfile(): Promise<UserProfile> {\n    return await this.#sdk.getUserProfile();\n  }\n\n  async getIdentifier(): Promise<string> {\n    return await this.#sdk.getIdentifier();\n  }\n\n  async signMessage(message: string): Promise<string> {\n    return await this.#sdk.signMessage(message);\n  }\n\n  async pairIdentifiers(pairing: Pair[]): Promise<void> {\n    const profile = await this.getUserProfile();\n    const n = await getNonce(profile.profileId, this.#env);\n\n    const logins = await Promise.all(\n      pairing.map(async (p) => {\n        try {\n          const raw = `metamask:${n.nonce}:${p.identifier}`;\n          const sig = await p.signMessage(raw);\n          return {\n            signature: sig,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            raw_message: raw,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            encrypted_storage_key: p.encryptedStorageKey,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            identifier_type: p.identifierType,\n          };\n        } catch (e) {\n          /* istanbul ignore next */\n          const errorMessage =\n            e instanceof Error ? e.message : JSON.stringify(e ?? '');\n          throw new PairError(\n            `failed to sign pairing message: ${errorMessage}`,\n          );\n        }\n      }),\n    );\n\n    const accessToken = await this.getAccessToken();\n    await pairIdentifiers(n.nonce, logins, accessToken, this.#env);\n  }\n\n  prepare(signer: {\n    address: string;\n    chainId: number;\n    signMessage: (message: string) => Promise<string>;\n    domain: string;\n  }): void {\n    this.#assertSIWE(this.#type, this.#sdk);\n    this.#sdk.prepare(signer);\n  }\n\n  #assertSIWE(\n    type: AuthType,\n    sdk: SIWEJwtBearerAuth | SRPJwtBearerAuth,\n  ): asserts sdk is SIWEJwtBearerAuth {\n    if (type === AuthType.SiWE) {\n      return;\n    }\n\n    throw new UnsupportedAuthTypeError(\n      'This method is only available via SIWE auth type',\n    );\n  }\n}\n\nexport { SIWEJwtBearerAuth } from './authentication-jwt-bearer/flow-siwe';\nexport { SRPJwtBearerAuth } from './authentication-jwt-bearer/flow-srp';\nexport * from './authentication-jwt-bearer/types';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAsBO,IAAM,gBAAN,MAA2D;AAAA,EAOhE,eAAe,MAA2B;AA+E1C;AArFA;AAEA;AAEA;AAGE,uBAAK,OAAQ,KAAK,CAAC,EAAE;AACrB,uBAAK,MAAO,KAAK,CAAC,EAAE;AAEpB,QAAI,KAAK,CAAC,EAAE,0BAAuB;AACjC,yBAAK,MAAO,IAAI,iBAAiB,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AACjD;AAAA,IACF;AAEA,QAAI,KAAK,CAAC,EAAE,4BAAwB;AAClC,yBAAK,MAAO,IAAI,kBAAkB,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAClD;AAAA,IACF;AAEA,UAAM,IAAI,yBAAyB,uBAAuB;AAAA,EAC5D;AAAA,EAEA,MAAM,iBAAkC;AACtC,WAAO,MAAM,mBAAK,MAAK,eAAe;AAAA,EACxC;AAAA,EAEA,MAAM,iBAAuC;AAC3C,WAAO,MAAM,mBAAK,MAAK,eAAe;AAAA,EACxC;AAAA,EAEA,MAAM,gBAAiC;AACrC,WAAO,MAAM,mBAAK,MAAK,cAAc;AAAA,EACvC;AAAA,EAEA,MAAM,YAAY,SAAkC;AAClD,WAAO,MAAM,mBAAK,MAAK,YAAY,OAAO;AAAA,EAC5C;AAAA,EAEA,MAAM,gBAAgB,SAAgC;AACpD,UAAM,UAAU,MAAM,KAAK,eAAe;AAC1C,UAAM,IAAI,MAAM,SAAS,QAAQ,WAAW,mBAAK,KAAI;AAErD,UAAM,SAAS,MAAM,QAAQ;AAAA,MAC3B,QAAQ,IAAI,OAAO,MAAM;AACvB,YAAI;AACF,gBAAM,MAAM,YAAY,EAAE,KAAK,IAAI,EAAE,UAAU;AAC/C,gBAAM,MAAM,MAAM,EAAE,YAAY,GAAG;AACnC,iBAAO;AAAA,YACL,WAAW;AAAA;AAAA;AAAA,YAGX,aAAa;AAAA;AAAA;AAAA,YAGb,uBAAuB,EAAE;AAAA;AAAA;AAAA,YAGzB,iBAAiB,EAAE;AAAA,UACrB;AAAA,QACF,SAAS,GAAG;AAEV,gBAAM,eACJ,aAAa,QAAQ,EAAE,UAAU,KAAK,UAAU,KAAK,EAAE;AACzD,gBAAM,IAAI;AAAA,YACR,mCAAmC,YAAY;AAAA,UACjD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe;AAC9C,UAAM,gBAAgB,EAAE,OAAO,QAAQ,aAAa,mBAAK,KAAI;AAAA,EAC/D;AAAA,EAEA,QAAQ,QAKC;AACP,0BAAK,4BAAL,WAAiB,mBAAK,QAAO,mBAAK;AAClC,uBAAK,MAAK,QAAQ,MAAM;AAAA,EAC1B;AAcF;AAjGE;AAEA;AAEA;AAiFA;AAAA,gBAAW,SACT,MACA,KACkC;AAClC,MAAI,4BAAwB;AAC1B;AAAA,EACF;AAEA,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;","names":[]}