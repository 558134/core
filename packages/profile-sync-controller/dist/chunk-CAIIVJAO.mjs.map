{"version":3,"sources":["../src/sdk/authentication-jwt-bearer/types.ts"],"sourcesContent":["import type { Env, Platform } from '../env';\n\nexport enum AuthType {\n  /* sign in using a private key derived from your secret recovery phrase (SRP). \n       Uses message signing snap to perform this operation */\n  SRP = 'SRP',\n\n  /* sign in with Ethereum */\n  SiWE = 'SiWE',\n}\n\nexport type AuthConfig = {\n  env: Env;\n  platform: Platform;\n  type: AuthType;\n};\n\nexport type AccessToken = {\n  /**\n   * The JWT Access Token\n   */\n  accessToken: string;\n  /**\n   * Expiration in seconds\n   */\n  expiresIn: number;\n  /**\n   * Date in milliseconds\n   */\n  obtainedAt: number;\n};\n\nexport type UserProfile = {\n  /**\n   * The \"Identifier\" used to log in with.\n   */\n  identifierId: string;\n  /**\n   * The Unique profile for a logged in user. A Profile can be logged in via multiple Identifiers\n   */\n  profileId: string;\n  /**\n   * Server MetaMetrics ID. Allows grouping of user events cross platform.\n   */\n  metaMetricsId: string;\n};\n\nexport type LoginResponse = {\n  token: AccessToken;\n  profile: UserProfile;\n};\n\nexport type IBaseAuth = {\n  getAccessToken: () => Promise<string>;\n  getUserProfile: () => Promise<UserProfile>;\n  getIdentifier: () => Promise<string>;\n  signMessage: (message: string) => Promise<string>;\n};\n\nexport type AuthStorageOptions = {\n  getLoginResponse: () => Promise<LoginResponse | null>;\n  setLoginResponse: (val: LoginResponse) => Promise<void>;\n};\n\nexport type AuthSigningOptions = {\n  signMessage: (message: string) => Promise<string>;\n  getIdentifier: () => Promise<string>;\n};\n\nexport type ErrorMessage = {\n  message: string;\n  error: string;\n};\n\nexport type Pair = {\n  identifier: string;\n  encryptedStorageKey: string;\n  identifierType: 'SIWE' | 'SRP';\n  signMessage: (message: string) => Promise<string>;\n};\n"],"mappings":";AAEO,IAAK,WAAL,kBAAKA,cAAL;AAGL,EAAAA,UAAA,SAAM;AAGN,EAAAA,UAAA,UAAO;AANG,SAAAA;AAAA,GAAA;","names":["AuthType"]}