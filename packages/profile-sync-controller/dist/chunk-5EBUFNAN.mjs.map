{"version":3,"sources":["../src/sdk/utils/messaging-signing-snap-requests.ts"],"sourcesContent":["import type { Eip1193Provider } from 'ethers';\n\nexport type Snap = {\n  permissionName: string;\n  id: string;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n};\nexport type GetSnapsResponse = Record<string, Snap>;\n\nexport const SNAP_ORIGIN = 'npm:@metamask/message-signing-snap';\n\nconst foundSnap = (snap: Snap) => snap.id === SNAP_ORIGIN;\n\n/**\n * Requests Connection to the Message Signing Snap\n *\n * @param provider - MetaMask Wallet Provider\n * @returns snap connect result\n */\nexport async function connectSnap(provider: Eip1193Provider): Promise<string> {\n  const result: string = await provider.request({\n    method: 'wallet_requestSnaps',\n    params: {\n      [SNAP_ORIGIN]: {},\n    },\n  });\n\n  return result;\n}\n\n/**\n * Gets Snaps from a MetaMask Wallet\n *\n * @param provider - MetaMask Wallet Provider\n * @returns All currently installed snaps.\n */\nexport async function getSnaps(\n  provider: Eip1193Provider,\n): Promise<GetSnapsResponse> {\n  const result: GetSnapsResponse = await provider.request({\n    method: 'wallet_getSnaps',\n  });\n\n  return result;\n}\n\n/**\n * Will return the message signing snap if installed\n * @param provider - MetaMask Wallet Provider\n */\nexport async function getSnap(\n  provider: Eip1193Provider,\n): Promise<Snap | undefined> {\n  try {\n    const snaps = await getSnaps(provider);\n    return Object.values(snaps ?? {}).find((snap) => foundSnap(snap));\n  } catch (e) {\n    console.error('Failed to obtain installed snap', e);\n    return undefined;\n  }\n}\n\nexport const MESSAGE_SIGNING_SNAP = {\n  async getPublicKey(provider: Eip1193Provider) {\n    const publicKey: string = await provider.request({\n      method: 'wallet_invokeSnap',\n      params: { snapId: SNAP_ORIGIN, request: { method: 'getPublicKey' } },\n    });\n\n    return publicKey;\n  },\n\n  async signMessage(provider: Eip1193Provider, message: `metamask:${string}`) {\n    const signedMessage: string = await provider?.request({\n      method: 'wallet_invokeSnap',\n      params: {\n        snapId: SNAP_ORIGIN,\n        request: { method: 'signMessage', params: { message } },\n      },\n    });\n\n    return signedMessage;\n  },\n};\n"],"mappings":";AAUO,IAAM,cAAc;AAE3B,IAAM,YAAY,CAAC,SAAe,KAAK,OAAO;AAQ9C,eAAsB,YAAY,UAA4C;AAC5E,QAAM,SAAiB,MAAM,SAAS,QAAQ;AAAA,IAC5C,QAAQ;AAAA,IACR,QAAQ;AAAA,MACN,CAAC,WAAW,GAAG,CAAC;AAAA,IAClB;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAQA,eAAsB,SACpB,UAC2B;AAC3B,QAAM,SAA2B,MAAM,SAAS,QAAQ;AAAA,IACtD,QAAQ;AAAA,EACV,CAAC;AAED,SAAO;AACT;AAMA,eAAsB,QACpB,UAC2B;AAC3B,MAAI;AACF,UAAM,QAAQ,MAAM,SAAS,QAAQ;AACrC,WAAO,OAAO,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,SAAS,UAAU,IAAI,CAAC;AAAA,EAClE,SAAS,GAAG;AACV,YAAQ,MAAM,mCAAmC,CAAC;AAClD,WAAO;AAAA,EACT;AACF;AAEO,IAAM,uBAAuB;AAAA,EAClC,MAAM,aAAa,UAA2B;AAC5C,UAAM,YAAoB,MAAM,SAAS,QAAQ;AAAA,MAC/C,QAAQ;AAAA,MACR,QAAQ,EAAE,QAAQ,aAAa,SAAS,EAAE,QAAQ,eAAe,EAAE;AAAA,IACrE,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,YAAY,UAA2B,SAA+B;AAC1E,UAAM,gBAAwB,MAAM,UAAU,QAAQ;AAAA,MACpD,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,QAAQ;AAAA,QACR,SAAS,EAAE,QAAQ,eAAe,QAAQ,EAAE,QAAQ,EAAE;AAAA,MACxD;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AACF;","names":[]}