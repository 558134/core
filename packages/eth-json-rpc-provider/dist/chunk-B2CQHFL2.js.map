{"version":3,"sources":["../src/safe-event-emitter-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,SAAS,oBAAoB;AAC7B,OAAO,sBAAsB;AAQ7B,SAAS,MAAM,cAAc;AAkBtB,SAAS,sCAGd,gBAC+C;AAC/C,QAAM;AAAA,IACJ,KAAK,OAAO;AAAA,IACZ,UAAU;AAAA,IACV;AAAA,IACA,SAAS,CAAC;AAAA,EACZ,IAAI;AACJ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AA7CA;AAqDO,IAAM,2BAAN,cAAuC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS7D,YAAY,EAAE,OAAO,GAA8B;AACjD,UAAM;AATR;AA4DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAY,CACV,gBAGA,aACG;AACH,YAAM,iBACJ,sCAAsC,cAAc;AACtD,yBAAK,SAAQ,OAAO,gBAAgB,QAAQ;AAAA,IAC9C;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAO,CACL,gBAGA,aACG;AACH,UAAI,OAAO,aAAa,YAAY;AAClC,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AACA,YAAM,iBACJ,sCAAsC,cAAc;AACtD,yBAAK,SAAQ,OAAO,gBAAgB,QAAQ;AAAA,IAC9C;AAnFE,uBAAK,SAAU;AAEf,QAAI,OAAO,IAAI;AACb,aAAO,GAAG,gBAAgB,CAAC,YAAoB;AAC7C,aAAK,KAAK,QAAQ,MAAM,OAAO;AAAA,MACjC,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QACJ,gBACiB;AACjB,UAAM,iBACJ,sCAAsC,cAAc;AACtD,UAAM,WAAW,MAAM,mBAAK,SAAQ,OAGlC,cAAc;AAEhB,QAAI,YAAY,UAAU;AACxB,aAAO,SAAS;AAAA,IAClB;AAEA,UAAM,QAAQ,IAAI;AAAA,MAChB,SAAS,MAAM;AAAA,MACf,SAAS,MAAM;AAAA,MACf,SAAS,MAAM;AAAA,IACjB;AACA,QAAI,WAAW,SAAS,OAAO;AAC7B,YAAM,QAAQ,SAAS,MAAM;AAAA,IAC/B;AACA,UAAM;AAAA,EACR;AA8CF;AA9FE","sourcesContent":["import type { JsonRpcEngine } from '@metamask/json-rpc-engine';\nimport { JsonRpcError } from '@metamask/rpc-errors';\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\nimport type {\n  Json,\n  JsonRpcId,\n  JsonRpcParams,\n  JsonRpcRequest,\n  JsonRpcVersion2,\n} from '@metamask/utils';\nimport { v4 as uuidV4 } from 'uuid';\n\n/**\n * A JSON-RPC request conforming to the EIP-1193 specification.\n */\ntype Eip1193Request<Params extends JsonRpcParams> = {\n  id?: JsonRpcId;\n  jsonrpc?: JsonRpcVersion2;\n  method: string;\n  params?: Params;\n};\n\n/**\n * Converts an EIP-1193 request to a JSON-RPC request.\n *\n * @param eip1193Request - The EIP-1193 request to convert.\n * @returns The corresponding JSON-RPC request.\n */\nexport function convertEip1193RequestToJsonRpcRequest<\n  Params extends JsonRpcParams,\n>(\n  eip1193Request: Eip1193Request<Params>,\n): JsonRpcRequest<Params | Record<never, never>> {\n  const {\n    id = uuidV4(),\n    jsonrpc = '2.0',\n    method,\n    params = {},\n  } = eip1193Request;\n  return {\n    id,\n    jsonrpc,\n    method,\n    params,\n  };\n}\n\n/**\n * An Ethereum provider.\n *\n * This provider loosely follows conventions that pre-date EIP-1193.\n * It is not compliant with any Ethereum provider standard.\n */\nexport class SafeEventEmitterProvider extends SafeEventEmitter {\n  #engine: JsonRpcEngine;\n\n  /**\n   * Construct a SafeEventEmitterProvider from a JSON-RPC engine.\n   *\n   * @param options - Options.\n   * @param options.engine - The JSON-RPC engine used to process requests.\n   */\n  constructor({ engine }: { engine: JsonRpcEngine }) {\n    super();\n    this.#engine = engine;\n\n    if (engine.on) {\n      engine.on('notification', (message: string) => {\n        this.emit('data', null, message);\n      });\n    }\n  }\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * @param eip1193Request - The request to send.\n   * @returns The JSON-RPC response.\n   */\n  async request<Params extends JsonRpcParams, Result extends Json>(\n    eip1193Request: Eip1193Request<Params>,\n  ): Promise<Result> {\n    const jsonRpcRequest =\n      convertEip1193RequestToJsonRpcRequest(eip1193Request);\n    const response = await this.#engine.handle<\n      Params | Record<never, never>,\n      Result\n    >(jsonRpcRequest);\n\n    if ('result' in response) {\n      return response.result;\n    }\n\n    const error = new JsonRpcError(\n      response.error.code,\n      response.error.message,\n      response.error.data,\n    );\n    if ('stack' in response.error) {\n      error.stack = response.error.stack;\n    }\n    throw error;\n  }\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * This method serves the same purpose as `request`. It only exists for\n   * legacy reasons.\n   *\n   * @param eip1193Request - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   * @deprecated Please use `request` instead.\n   */\n  sendAsync = <Params extends JsonRpcParams>(\n    eip1193Request: Eip1193Request<Params>,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    const jsonRpcRequest =\n      convertEip1193RequestToJsonRpcRequest(eip1193Request);\n    this.#engine.handle(jsonRpcRequest, callback);\n  };\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * This method serves the same purpose as `request`. It only exists for\n   * legacy reasons.\n   *\n   * @param eip1193Request - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   * @deprecated Please use `request` instead.\n   */\n  send = <Params extends JsonRpcParams>(\n    eip1193Request: Eip1193Request<Params>,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    if (typeof callback !== 'function') {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    const jsonRpcRequest =\n      convertEip1193RequestToJsonRpcRequest(eip1193Request);\n    this.#engine.handle(jsonRpcRequest, callback);\n  };\n}\n"]}