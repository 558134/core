{"version":3,"sources":["../src/SignatureController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AddApprovalRequest,\n  AcceptResultCallbacks,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType, ORIGIN_METAMASK } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerSignMessageAction,\n  KeyringControllerSignPersonalMessageAction,\n  KeyringControllerSignTypedMessageAction,\n  SignTypedDataVersion,\n} from '@metamask/keyring-controller';\nimport {\n  SigningMethod,\n  SigningStage,\n  LogType,\n} from '@metamask/logging-controller';\nimport type { AddLog } from '@metamask/logging-controller';\nimport type {\n  PersonalMessageParams,\n  PersonalMessageParamsMetamask,\n  TypedMessageParams,\n  TypedMessageParamsMetamask,\n  AbstractMessageManager,\n  AbstractMessage,\n  MessageManagerState,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n  TypedMessage,\n  PersonalMessage,\n} from '@metamask/message-manager';\nimport {\n  PersonalMessageManager,\n  TypedMessageManager,\n} from '@metamask/message-manager';\nimport { providerErrors } from '@metamask/rpc-errors';\nimport type { Hex, Json } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport { cloneDeep } from 'lodash';\n\nconst controllerName = 'SignatureController';\n\nconst stateMetadata = {\n  unapprovedPersonalMsgs: { persist: false, anonymous: false },\n  unapprovedTypedMessages: { persist: false, anonymous: false },\n  unapprovedPersonalMsgCount: { persist: false, anonymous: false },\n  unapprovedTypedMessagesCount: { persist: false, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  unapprovedPersonalMsgs: {},\n  unapprovedTypedMessages: {},\n  unapprovedPersonalMsgCount: 0,\n  unapprovedTypedMessagesCount: 0,\n});\n\ntype CoreMessage = AbstractMessage & {\n  messageParams: AbstractMessageParams;\n};\n\ntype StateMessage = Required<AbstractMessage> & {\n  msgParams: Required<AbstractMessageParams>;\n};\n\ntype SignatureControllerState = {\n  unapprovedPersonalMsgs: Record<string, StateMessage>;\n  unapprovedTypedMessages: Record<string, StateMessage>;\n  unapprovedPersonalMsgCount: number;\n  unapprovedTypedMessagesCount: number;\n};\n\ntype AllowedActions =\n  | AddApprovalRequest\n  | KeyringControllerSignMessageAction\n  | KeyringControllerSignPersonalMessageAction\n  | KeyringControllerSignTypedMessageAction\n  | AddLog;\n\ntype TypedMessageSigningOptions = {\n  parseJsonData: boolean;\n};\n\nexport type GetSignatureState = ControllerGetStateAction<\n  typeof controllerName,\n  SignatureControllerState\n>;\n\nexport type SignatureStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  SignatureControllerState\n>;\n\nexport type SignatureControllerActions = GetSignatureState;\n\nexport type SignatureControllerEvents = SignatureStateChange;\n\nexport type SignatureControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SignatureControllerActions | AllowedActions,\n  SignatureControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport type SignatureControllerOptions = {\n  messenger: SignatureControllerMessenger;\n  isEthSignEnabled: () => boolean;\n  getAllState: () => unknown;\n  securityProviderRequest?: (\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    requestData: any,\n    methodName: string,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => Promise<any>;\n  getCurrentChainId: () => Hex;\n};\n\n/**\n * Controller for creating signing requests requiring user approval.\n */\nexport class SignatureController extends BaseController<\n  typeof controllerName,\n  SignatureControllerState,\n  SignatureControllerMessenger\n> {\n  hub: EventEmitter;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #getAllState: () => any;\n\n  #personalMessageManager: PersonalMessageManager;\n\n  #typedMessageManager: TypedMessageManager;\n\n  /**\n   * Construct a Sign controller.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The restricted controller messenger for the sign controller.\n   * @param options.getAllState - Callback to retrieve all user state.\n   * @param options.securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   * @param options.getCurrentChainId - A function for retrieving the current chainId.\n   */\n  constructor({\n    messenger,\n    getAllState,\n    securityProviderRequest,\n    getCurrentChainId,\n  }: SignatureControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: getDefaultState(),\n    });\n\n    this.#getAllState = getAllState;\n\n    this.hub = new EventEmitter();\n    this.#personalMessageManager = new PersonalMessageManager(\n      undefined,\n      undefined,\n      securityProviderRequest,\n    );\n    this.#typedMessageManager = new TypedMessageManager(\n      undefined,\n      undefined,\n      securityProviderRequest,\n      undefined,\n      getCurrentChainId,\n    );\n\n    this.#handleMessageManagerEvents(\n      this.#personalMessageManager,\n      'unapprovedPersonalMessage',\n    );\n    this.#handleMessageManagerEvents(\n      this.#typedMessageManager,\n      'unapprovedTypedMessage',\n    );\n\n    this.#subscribeToMessageState(\n      this.#personalMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedPersonalMsgs = newMessages;\n        state.unapprovedPersonalMsgCount = messageCount;\n      },\n    );\n\n    this.#subscribeToMessageState(\n      this.#typedMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedTypedMessages = newMessages;\n        state.unapprovedTypedMessagesCount = messageCount;\n      },\n    );\n  }\n\n  /**\n   * A getter for the number of 'unapproved' PersonalMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' PersonalMessages in this.messages\n   */\n  get unapprovedPersonalMessagesCount(): number {\n    return this.#personalMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' TypedMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' TypedMessages in this.messages\n   */\n  get unapprovedTypedMessagesCount(): number {\n    return this.#typedMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for returning all messages.\n   *\n   * @returns The object containing all messages.\n   */\n  get messages(): { [id: string]: PersonalMessage | TypedMessage } {\n    const messages = [\n      ...this.#typedMessageManager.getAllMessages(),\n      ...this.#personalMessageManager.getAllMessages(),\n    ];\n\n    const messagesObject = messages.reduce<{\n      [id: string]: PersonalMessage | TypedMessage;\n    }>((acc, message) => {\n      acc[message.id] = message;\n      return acc;\n    }, {});\n\n    return messagesObject;\n  }\n\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason?: string) {\n    this.#rejectUnapproved(this.#personalMessageManager, reason);\n    this.#rejectUnapproved(this.#typedMessageManager, reason);\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.#clearUnapproved(this.#personalMessageManager);\n    this.#clearUnapproved(this.#typedMessageManager);\n  }\n\n  /**\n   * Called when a dapp uses the personal_sign method.\n   *\n   * We currently define personal_sign mostly for legacy Dapps.\n   *\n   * @param messageParams - The params of the message to sign & return to the Dapp.\n   * @param req - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedPersonalMessage(\n    messageParams: PersonalMessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    return this.#newUnsignedAbstractMessage(\n      this.#personalMessageManager,\n      ApprovalType.PersonalSign,\n      SigningMethod.PersonalSign,\n      'Personal Message',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      this.#signPersonalMessage.bind(this),\n      messageParams,\n      req,\n    );\n  }\n\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param messageParams - The params passed to eth_signTypedData.\n   * @param req - The original request, containing the origin.\n   * @param version - The version indicating the format of the typed data.\n   * @param signingOpts - An options bag for signing.\n   * @param signingOpts.parseJsonData - Whether to parse the JSON before signing.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedTypedMessage(\n    messageParams: TypedMessageParams,\n    req: OriginalRequest,\n    version: string,\n    signingOpts: TypedMessageSigningOptions,\n  ): Promise<string> {\n    const signTypeForLogger = this.#getSignTypeForLogger(version);\n    return this.#newUnsignedAbstractMessage(\n      this.#typedMessageManager,\n      ApprovalType.EthSignTypedData,\n      signTypeForLogger,\n      'Typed Message',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      this.#signTypedMessage.bind(this),\n      messageParams,\n      req,\n      version,\n      signingOpts,\n    );\n  }\n\n  /**\n   * Called to update the message status as signed.\n   *\n   * @param messageId - The id of the Message to update.\n   * @param signature - The data to update the message with.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setDeferredSignSuccess(messageId: string, signature: any) {\n    this.#tryForEachMessageManager(\n      this.#trySetDeferredSignSuccess,\n      messageId,\n      signature,\n    );\n  }\n\n  /**\n   * Called when the message metadata needs to be updated.\n   *\n   * @param messageId - The id of the message to update.\n   * @param metadata - The data to update the metadata property in the message.\n   */\n  setMessageMetadata(messageId: string, metadata: Json) {\n    this.#tryForEachMessageManager(\n      this.#trySetMessageMetadata,\n      messageId,\n      metadata,\n    );\n  }\n\n  /**\n   * Called to cancel a signing message.\n   *\n   * @param messageId - The id of the Message to update.\n   */\n  setDeferredSignError(messageId: string) {\n    this.#tryForEachMessageManager(this.#trySetDeferredSignError, messageId);\n  }\n\n  setTypedMessageInProgress(messageId: string) {\n    this.#typedMessageManager.setMessageStatusInProgress(messageId);\n  }\n\n  setPersonalMessageInProgress(messageId: string) {\n    this.#personalMessageManager.setMessageStatusInProgress(messageId);\n  }\n\n  async #newUnsignedAbstractMessage<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    SO,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    approvalType: ApprovalType,\n    signTypeForLogger: SigningMethod,\n    messageName: string,\n    signMessage: (messageParams: PM, signingOpts?: SO) => void,\n    messageParams: PM,\n    req: OriginalRequest,\n    version?: string,\n    signingOpts?: SO,\n  ) {\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    try {\n      const messageId = await messageManager.addUnapprovedMessage(\n        messageParams,\n        req,\n        version,\n      );\n\n      const messageParamsWithId = {\n        ...messageParams,\n        metamaskId: messageId,\n        ...(version && { version }),\n      };\n\n      const signaturePromise = messageManager.waitForFinishStatus(\n        messageParamsWithId,\n        messageName,\n      );\n\n      try {\n        // Signature request is proposed to the user\n        this.#addLog(\n          signTypeForLogger,\n          SigningStage.Proposed,\n          messageParamsWithId,\n        );\n\n        const acceptResult = await this.#requestApproval(\n          messageParamsWithId,\n          approvalType,\n        );\n\n        resultCallbacks = acceptResult.resultCallbacks;\n      } catch {\n        // User rejected the signature request\n        this.#addLog(\n          signTypeForLogger,\n          SigningStage.Rejected,\n          messageParamsWithId,\n        );\n\n        this.#cancelAbstractMessage(messageManager, messageId);\n        throw providerErrors.userRejectedRequest('User rejected the request.');\n      }\n\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/await-thenable\n      await signMessage(messageParamsWithId, signingOpts);\n\n      const signatureResult = await signaturePromise;\n\n      // Signature operation is completed\n      this.#addLog(signTypeForLogger, SigningStage.Signed, messageParamsWithId);\n\n      /* istanbul ignore next */\n      resultCallbacks?.success(signatureResult);\n\n      return signatureResult;\n    } catch (error) {\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Signifies a user's approval to sign a personal_sign message in queue.\n   * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n   *\n   * @param msgParams - The params of the message to sign & return to the Dapp.\n   * @returns Signature result from signing.\n   */\n  async #signPersonalMessage(msgParams: PersonalMessageParamsMetamask) {\n    return await this.#signAbstractMessage(\n      this.#personalMessageManager,\n      ApprovalType.PersonalSign,\n      msgParams,\n      async (cleanMsgParams) =>\n        await this.messagingSystem.call(\n          'KeyringController:signPersonalMessage',\n          cleanMsgParams,\n        ),\n    );\n  }\n\n  /**\n   * The method for a user approving a call to eth_signTypedData, per EIP 712.\n   * Triggers the callback in newUnsignedTypedMessage.\n   *\n   * @param msgParams - The params passed to eth_signTypedData.\n   * @param opts - The options for the method.\n   * @param opts.parseJsonData - Whether to parse JSON data before calling the KeyringController.\n   * @returns Signature result from signing.\n   */\n  async #signTypedMessage(\n    msgParams: TypedMessageParamsMetamask,\n    /* istanbul ignore next */\n    opts = { parseJsonData: true },\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    const { version } = msgParams;\n    return await this.#signAbstractMessage(\n      this.#typedMessageManager,\n      ApprovalType.EthSignTypedData,\n      msgParams,\n      async (cleanMsgParams) => {\n        const finalMessageParams = opts.parseJsonData\n          ? this.#removeJsonData(cleanMsgParams, version as string)\n          : cleanMsgParams;\n\n        return await this.messagingSystem.call(\n          'KeyringController:signTypedMessage',\n          finalMessageParams,\n          version as SignTypedDataVersion,\n        );\n      },\n    );\n  }\n\n  #tryForEachMessageManager(\n    callbackFn: (\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      messageManager: AbstractMessageManager<any, any, any>,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...args: any[]\n    ) => boolean,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...args: any\n  ) {\n    const messageManagers = [\n      this.#personalMessageManager,\n      this.#typedMessageManager,\n    ];\n\n    for (const manager of messageManagers) {\n      if (callbackFn(manager, ...args)) {\n        return true;\n      }\n    }\n    throw new Error('Message not found');\n  }\n\n  #trySetDeferredSignSuccess(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    signature: any,\n  ) {\n    try {\n      messageManager.setMessageStatusSigned(messageId, signature);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #trySetMessageMetadata(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n    metadata: Json,\n  ) {\n    try {\n      messageManager.setMetadata(messageId, metadata);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #trySetDeferredSignError(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n  ) {\n    try {\n      messageManager.rejectMessage(messageId);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #rejectUnapproved<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>, reason?: string) {\n    Object.keys(messageManager.getUnapprovedMessages()).forEach((messageId) => {\n      this.#cancelAbstractMessage(messageManager, messageId, reason);\n    });\n  }\n\n  #clearUnapproved<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>) {\n    messageManager.update({\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    });\n  }\n\n  async #signAbstractMessage<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    methodName: string,\n    msgParams: PM,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getSignature: (cleanMessageParams: P) => Promise<any>,\n  ) {\n    console.info(`MetaMaskController - ${methodName}`);\n\n    const messageId = msgParams.metamaskId as string;\n\n    try {\n      const cleanMessageParams = await messageManager.approveMessage(msgParams);\n\n      try {\n        const signature = await getSignature(cleanMessageParams);\n\n        this.hub.emit(`${methodName}:signed`, { signature, messageId });\n\n        if (!cleanMessageParams.deferSetAsSigned) {\n          messageManager.setMessageStatusSigned(messageId, signature);\n        }\n\n        return signature;\n      } catch (error) {\n        this.hub.emit(`${messageId}:signError`, { error });\n        throw error;\n      }\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      console.info(`MetaMaskController - ${methodName} failed.`, error);\n      this.#errorMessage(messageManager, messageId, error.message);\n      throw error;\n    }\n  }\n\n  #errorMessage<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    error: string,\n  ) {\n    if (messageManager instanceof TypedMessageManager) {\n      messageManager.setMessageStatusErrored(messageId, error);\n    } else {\n      this.#cancelAbstractMessage(messageManager, messageId);\n    }\n  }\n\n  #cancelAbstractMessage<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    reason?: string,\n  ) {\n    if (reason) {\n      const message = this.#getMessage(messageId);\n      this.hub.emit('cancelWithReason', { message, reason });\n    }\n    messageManager.rejectMessage(messageId);\n  }\n\n  #handleMessageManagerEvents<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>, eventName: string) {\n    messageManager.hub.on('updateBadge', () => {\n      this.hub.emit('updateBadge');\n    });\n\n    messageManager.hub.on(\n      'unapprovedMessage',\n      (msgParams: AbstractMessageParamsMetamask) => {\n        this.hub.emit(eventName, msgParams);\n      },\n    );\n  }\n\n  #subscribeToMessageState<\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    M extends AbstractMessage,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    P extends AbstractMessageParams,\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    updateState: (\n      state: SignatureControllerState,\n      newMessages: Record<string, StateMessage>,\n      messageCount: number,\n    ) => void,\n  ) {\n    messageManager.subscribe((state: MessageManagerState<AbstractMessage>) => {\n      const newMessages = this.#migrateMessages(\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        state.unapprovedMessages as any,\n      );\n\n      this.update(() => {\n        const newState = { ...this.state };\n        updateState(newState, newMessages, state.unapprovedMessagesCount);\n        return newState;\n      });\n    });\n  }\n\n  #migrateMessages(\n    coreMessages: Record<string, CoreMessage>,\n  ): Record<string, StateMessage> {\n    const stateMessages: Record<string, StateMessage> = {};\n\n    for (const messageId of Object.keys(coreMessages)) {\n      const coreMessage = coreMessages[messageId];\n      const stateMessage = this.#migrateMessage(coreMessage);\n\n      stateMessages[messageId] = stateMessage;\n    }\n\n    return stateMessages;\n  }\n\n  #migrateMessage(coreMessage: CoreMessage): StateMessage {\n    const { messageParams, ...coreMessageData } = coreMessage;\n\n    // Core message managers use messageParams but frontend uses msgParams with lots of references\n    const stateMessage = {\n      ...coreMessageData,\n      msgParams: messageParams,\n    };\n\n    return stateMessage as StateMessage;\n  }\n\n  #getMessage(messageId: string): StateMessage {\n    return {\n      ...this.state.unapprovedPersonalMsgs,\n      ...this.state.unapprovedTypedMessages,\n    }[messageId];\n  }\n\n  async #requestApproval(\n    msgParams: AbstractMessageParamsMetamask,\n    type: ApprovalType,\n  ): Promise<AddResult> {\n    const id = msgParams.metamaskId as string;\n    const origin = msgParams.origin || ORIGIN_METAMASK;\n\n    // We are explicitly cloning the message params here to prevent the mutation errors on development mode\n    // Because sending it through the messaging system will make the object read only\n    const clonedMsgParams = cloneDeep(msgParams);\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData: clonedMsgParams as Required<AbstractMessageParamsMetamask>,\n        expectsResult: true,\n      },\n      true,\n    )) as Promise<AddResult>;\n  }\n\n  #removeJsonData(\n    messageParams: TypedMessageParams,\n    version: string,\n  ): TypedMessageParams {\n    if (version === 'V1' || typeof messageParams.data !== 'string') {\n      return messageParams;\n    }\n\n    return {\n      ...messageParams,\n      data: JSON.parse(messageParams.data),\n    };\n  }\n\n  #addLog(\n    signingMethod: SigningMethod,\n    stage: SigningStage,\n    signingData: AbstractMessageParamsMetamask,\n  ): void {\n    this.messagingSystem.call('LoggingController:add', {\n      type: LogType.EthSignLog,\n      data: {\n        signingMethod,\n        stage,\n        signingData,\n      },\n    });\n  }\n\n  #getSignTypeForLogger(version: string): SigningMethod {\n    let signTypeForLogger = SigningMethod.EthSignTypedData;\n    if (version === 'V3') {\n      signTypeForLogger = SigningMethod.EthSignTypedDataV3;\n    } else if (version === 'V4') {\n      signTypeForLogger = SigningMethod.EthSignTypedDataV4;\n    }\n    return signTypeForLogger;\n  }\n}\n"]}