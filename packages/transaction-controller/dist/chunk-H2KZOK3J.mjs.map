{"version":3,"sources":["../src/gas-flows/DefaultGasFeeFlow.ts"],"sourcesContent":["import type {\n  LegacyGasPriceEstimate,\n  GasFeeEstimates as FeeMarketGasPriceEstimate,\n  EthGasPriceEstimate,\n} from '@metamask/gas-fee-controller';\nimport { GAS_ESTIMATE_TYPES } from '@metamask/gas-fee-controller';\nimport type { Hex } from '@metamask/utils';\nimport { createModuleLogger } from '@metamask/utils';\n\nimport { projectLogger } from '../logger';\nimport type {\n  FeeMarketGasFeeEstimateForLevel,\n  FeeMarketGasFeeEstimates,\n  GasFeeEstimates,\n  GasFeeFlow,\n  GasFeeFlowRequest,\n  GasFeeFlowResponse,\n  GasPriceGasFeeEstimates,\n  LegacyGasFeeEstimates,\n  TransactionMeta,\n} from '../types';\nimport { GasFeeEstimateLevel, GasFeeEstimateType } from '../types';\nimport { gweiDecimalToWeiHex } from '../utils/gas-fees';\n\nconst log = createModuleLogger(projectLogger, 'default-gas-fee-flow');\n\n/**\n * The standard implementation of a gas fee flow that obtains gas fee estimates using only the GasFeeController.\n */\nexport class DefaultGasFeeFlow implements GasFeeFlow {\n  matchesTransaction(_transactionMeta: TransactionMeta): boolean {\n    return true;\n  }\n\n  async getGasFees(request: GasFeeFlowRequest): Promise<GasFeeFlowResponse> {\n    const { gasFeeControllerData } = request;\n    const { gasEstimateType, gasFeeEstimates } = gasFeeControllerData;\n\n    let response: GasFeeEstimates;\n\n    switch (gasEstimateType) {\n      case GAS_ESTIMATE_TYPES.FEE_MARKET:\n        log('Using fee market estimates', gasFeeEstimates);\n        response = this.#getFeeMarkEstimates(gasFeeEstimates);\n        break;\n      case GAS_ESTIMATE_TYPES.LEGACY:\n        log('Using legacy estimates', gasFeeEstimates);\n        response = this.#getLegacyEstimates(\n          gasFeeEstimates as LegacyGasPriceEstimate,\n        );\n        break;\n      case GAS_ESTIMATE_TYPES.ETH_GASPRICE:\n        log('Using eth_gasPrice estimates', gasFeeEstimates);\n        response = this.#getGasPriceEstimates(\n          gasFeeEstimates as EthGasPriceEstimate,\n        );\n        break;\n      default:\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        throw new Error(`Unsupported gas estimate type: ${gasEstimateType}`);\n    }\n\n    return {\n      estimates: response,\n    };\n  }\n\n  #getFeeMarkEstimates(\n    gasFeeEstimates: FeeMarketGasPriceEstimate,\n  ): FeeMarketGasFeeEstimates {\n    const levels = Object.values(GasFeeEstimateLevel).reduce(\n      (result, level) => ({\n        ...result,\n        [level]: this.#getFeeMarketLevel(gasFeeEstimates, level),\n      }),\n      {} as Omit<FeeMarketGasFeeEstimates, 'type'>,\n    );\n\n    return {\n      type: GasFeeEstimateType.FeeMarket,\n      ...levels,\n    };\n  }\n\n  #getLegacyEstimates(\n    gasFeeEstimates: LegacyGasPriceEstimate,\n  ): LegacyGasFeeEstimates {\n    const levels = Object.values(GasFeeEstimateLevel).reduce(\n      (result, level) => ({\n        ...result,\n        [level]: this.#getLegacyLevel(gasFeeEstimates, level),\n      }),\n      {} as Omit<LegacyGasFeeEstimates, 'type'>,\n    );\n\n    return {\n      type: GasFeeEstimateType.Legacy,\n      ...levels,\n    };\n  }\n\n  #getGasPriceEstimates(\n    gasFeeEstimates: EthGasPriceEstimate,\n  ): GasPriceGasFeeEstimates {\n    return {\n      type: GasFeeEstimateType.GasPrice,\n      gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice),\n    };\n  }\n\n  #getFeeMarketLevel(\n    gasFeeEstimates: FeeMarketGasPriceEstimate,\n    level: GasFeeEstimateLevel,\n  ): FeeMarketGasFeeEstimateForLevel {\n    const maxFeePerGas = gweiDecimalToWeiHex(\n      gasFeeEstimates[level].suggestedMaxFeePerGas,\n    );\n\n    const maxPriorityFeePerGas = gweiDecimalToWeiHex(\n      gasFeeEstimates[level].suggestedMaxPriorityFeePerGas,\n    );\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    };\n  }\n\n  #getLegacyLevel(\n    gasFeeEstimates: LegacyGasPriceEstimate,\n    level: GasFeeEstimateLevel,\n  ): Hex {\n    return gweiDecimalToWeiHex(gasFeeEstimates[level]);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAKA,SAAS,0BAA0B;AAEnC,SAAS,0BAA0B;AAiBnC,IAAM,MAAM,mBAAmB,eAAe,sBAAsB;AAxBpE;AA6BO,IAAM,oBAAN,MAA8C;AAAA,EAA9C;AAuCL;AAiBA;AAiBA;AASA;AAkBA;AAAA;AAAA,EAnGA,mBAAmB,kBAA4C;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,SAAyD;AACxE,UAAM,EAAE,qBAAqB,IAAI;AACjC,UAAM,EAAE,iBAAiB,gBAAgB,IAAI;AAE7C,QAAI;AAEJ,YAAQ,iBAAiB;AAAA,MACvB,KAAK,mBAAmB;AACtB,YAAI,8BAA8B,eAAe;AACjD,mBAAW,sBAAK,8CAAL,WAA0B;AACrC;AAAA,MACF,KAAK,mBAAmB;AACtB,YAAI,0BAA0B,eAAe;AAC7C,mBAAW,sBAAK,4CAAL,WACT;AAEF;AAAA,MACF,KAAK,mBAAmB;AACtB,YAAI,gCAAgC,eAAe;AACnD,mBAAW,sBAAK,gDAAL,WACT;AAEF;AAAA,MACF;AAGE,cAAM,IAAI,MAAM,kCAAkC,eAAe,EAAE;AAAA,IACvE;AAEA,WAAO;AAAA,MACL,WAAW;AAAA,IACb;AAAA,EACF;AAqEF;AAnEE;AAAA,yBAAoB,SAClB,iBAC0B;AAC1B,QAAM,SAAS,OAAO,OAAO,mBAAmB,EAAE;AAAA,IAChD,CAAC,QAAQ,WAAW;AAAA,MAClB,GAAG;AAAA,MACH,CAAC,KAAK,GAAG,sBAAK,0CAAL,WAAwB,iBAAiB;AAAA,IACpD;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA,GAAG;AAAA,EACL;AACF;AAEA;AAAA,wBAAmB,SACjB,iBACuB;AACvB,QAAM,SAAS,OAAO,OAAO,mBAAmB,EAAE;AAAA,IAChD,CAAC,QAAQ,WAAW;AAAA,MAClB,GAAG;AAAA,MACH,CAAC,KAAK,GAAG,sBAAK,oCAAL,WAAqB,iBAAiB;AAAA,IACjD;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA,GAAG;AAAA,EACL;AACF;AAEA;AAAA,0BAAqB,SACnB,iBACyB;AACzB,SAAO;AAAA,IACL;AAAA,IACA,UAAU,oBAAoB,gBAAgB,QAAQ;AAAA,EACxD;AACF;AAEA;AAAA,uBAAkB,SAChB,iBACA,OACiC;AACjC,QAAM,eAAe;AAAA,IACnB,gBAAgB,KAAK,EAAE;AAAA,EACzB;AAEA,QAAM,uBAAuB;AAAA,IAC3B,gBAAgB,KAAK,EAAE;AAAA,EACzB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA;AAAA,oBAAe,SACb,iBACA,OACK;AACL,SAAO,oBAAoB,gBAAgB,KAAK,CAAC;AACnD;","names":[]}