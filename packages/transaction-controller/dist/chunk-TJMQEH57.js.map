{"version":3,"sources":["../src/gas-flows/TestGasFeeFlow.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,aAAa;AAWtB,IAAM,YAAY;AAClB,IAAM,mBAAmB;AAZzB;AAmBO,IAAM,iBAAN,MAA2C;AAAA,EAA3C;AA0DL;AAzDA,iCAAW;AAAA;AAAA,EAEX,mBAAmB,kBAA4C;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,SAAyD;AACxE,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,KAAK,OAAO,IAAI;AAExB,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAEA,UAAM,aAAa,SAAS,QAAQ,EAAE;AACtC,UAAM,aAAa,YAAY;AAE/B,UAAM,mBAAmB,mBAAK,YAAW,KAAK;AAC9C,UAAM,uBAAuB,mBAAK,YAAW;AAE7C,UAAM,eAAe,kBAAkB;AACvC,UAAM,oBAAoB,uBAAuB;AAEjD,UAAM,gBAAgB,kBAAkB;AACxC,UAAM,qBAAqB,uBAAuB;AAElD,uBAAK,UAAL,mBAAK,YAAY;AAEjB,WAAO;AAAA,MACL,WAAW;AAAA,QACT;AAAA,QACA,KAAK;AAAA,UACH,cAAc,sBAAK,8CAAL,WAA0B,cAAc;AAAA,UACtD,sBAAsB,sBAAK,8CAAL,WACpB,mBACA;AAAA,QAEJ;AAAA,QACA,QAAQ;AAAA,UACN,cAAc,sBAAK,8CAAL,WAA0B,iBAAiB;AAAA,UACzD,sBAAsB,sBAAK,8CAAL,WACpB,sBACA;AAAA,QAEJ;AAAA,QACA,MAAM;AAAA,UACJ,cAAc,sBAAK,8CAAL,WAA0B,eAAe;AAAA,UACvD,sBAAsB,sBAAK,8CAAL,WACpB,oBACA;AAAA,QAEJ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAMF;AA7DE;AAyDA;AAAA,yBAAoB,SAAC,UAAkB,KAAkB;AACvD,QAAM,aAAa,KAAK,KAAK,WAAW,GAAG;AAC3C,SAAO,MAAM,UAAU;AACzB","sourcesContent":["import { toHex } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\nimport {\n  GasFeeEstimateType,\n  type GasFeeFlow,\n  type GasFeeFlowRequest,\n  type GasFeeFlowResponse,\n  type TransactionMeta,\n} from '../types';\n\nconst INCREMENT = 1e15; // 0.001 ETH\nconst LEVEL_DIFFERENCE = 0.5;\n\n/**\n * A gas fee flow to facilitate testing in the clients.\n * Increments the total gas fee by a fixed amount each time it is called.\n * Relies on the transaction's gas value to generate a distinct total fee in the UI.\n */\nexport class TestGasFeeFlow implements GasFeeFlow {\n  #counter = 1;\n\n  matchesTransaction(_transactionMeta: TransactionMeta): boolean {\n    return true;\n  }\n\n  async getGasFees(request: GasFeeFlowRequest): Promise<GasFeeFlowResponse> {\n    const { transactionMeta } = request;\n    const { txParams } = transactionMeta;\n    const { gas: gasHex } = txParams;\n\n    if (!gasHex) {\n      throw new Error('Cannot estimate fee without gas value');\n    }\n\n    const gasDecimal = parseInt(gasHex, 16);\n    const difference = INCREMENT * LEVEL_DIFFERENCE;\n\n    const mediumMaxTarget = (this.#counter + 1) * INCREMENT;\n    const mediumPriorityTarget = this.#counter * INCREMENT;\n\n    const lowMaxTarget = mediumMaxTarget - difference;\n    const lowPriorityTarget = mediumPriorityTarget - difference;\n\n    const highMaxTarget = mediumMaxTarget + difference;\n    const highPriorityTarget = mediumPriorityTarget + difference;\n\n    this.#counter += 1;\n\n    return {\n      estimates: {\n        type: GasFeeEstimateType.FeeMarket,\n        low: {\n          maxFeePerGas: this.#getValueForTotalFee(lowMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: this.#getValueForTotalFee(\n            lowPriorityTarget,\n            gasDecimal,\n          ),\n        },\n        medium: {\n          maxFeePerGas: this.#getValueForTotalFee(mediumMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: this.#getValueForTotalFee(\n            mediumPriorityTarget,\n            gasDecimal,\n          ),\n        },\n        high: {\n          maxFeePerGas: this.#getValueForTotalFee(highMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: this.#getValueForTotalFee(\n            highPriorityTarget,\n            gasDecimal,\n          ),\n        },\n      },\n    };\n  }\n\n  #getValueForTotalFee(totalFee: number, gas: number): Hex {\n    const feeDecimal = Math.ceil(totalFee / gas);\n    return toHex(feeDecimal);\n  }\n}\n"]}