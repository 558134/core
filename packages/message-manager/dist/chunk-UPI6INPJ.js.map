{"version":3,"sources":["../src/AbstractMessageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport type { Hex, Json } from '@metamask/utils';\nimport { EventEmitter } from 'events';\n\n/**\n * @type OriginalRequest\n *\n * Represents the original request object for adding a message.\n * @property origin? - Is it is specified, represents the origin\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface OriginalRequest {\n  origin?: string;\n  securityAlertResponse?: Record<string, Json>;\n}\n\n/**\n * @type Message\n *\n * Represents and contains data about a signing type signature request.\n * @property id - An id to track and identify the message object\n * @property type - The json-prc signing method for which a signature request has been made.\n * A 'Message' which always has a signing type\n * @property rawSig - Raw data of the signature request\n * @property securityProviderResponse - Response from a security provider, whether it is malicious or not\n * @property metadata - Additional data for the message, for example external identifiers\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AbstractMessage {\n  id: string;\n  time: number;\n  status: string;\n  type: string;\n  rawSig?: string;\n  securityProviderResponse?: Record<string, Json>;\n  securityAlertResponse?: Record<string, Json>;\n  metadata?: Json;\n  error?: string;\n}\n\n/**\n * @type AbstractMessageParams\n *\n * Represents the parameters to pass to the signing method once the signature request is approved.\n * @property from - Address from which the message is processed\n * @property origin? - Added for request origin identification\n * @property deferSetAsSigned? - Whether to defer setting the message as signed immediately after the keyring is told to sign it\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AbstractMessageParams {\n  from: string;\n  origin?: string;\n  deferSetAsSigned?: boolean;\n}\n\n/**\n * @type MessageParamsMetamask\n *\n * Represents the parameters to pass to the signing method once the signature request is approved\n * plus data added by MetaMask.\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property from - Address from which the message is processed\n * @property origin? - Added for request origin identification\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AbstractMessageParamsMetamask extends AbstractMessageParams {\n  metamaskId?: string;\n}\n\n/**\n * @type MessageManagerState\n *\n * Message Manager state\n * @property unapprovedMessages - A collection of all Messages in the 'unapproved' state\n * @property unapprovedMessagesCount - The count of all Messages in this.unapprovedMessages\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions, @typescript-eslint/naming-convention\nexport interface MessageManagerState<M extends AbstractMessage>\n  extends BaseState {\n  unapprovedMessages: { [key: string]: M };\n  unapprovedMessagesCount: number;\n}\n\n/**\n * A function for verifying a message, whether it is malicious or not\n */\nexport type SecurityProviderRequest = (\n  requestData: AbstractMessage,\n  messageType: string,\n) => Promise<Json>;\n\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\ntype getCurrentChainId = () => Hex;\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - Messages.\n */\nexport abstract class AbstractMessageManager<\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  M extends AbstractMessage,\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  P extends AbstractMessageParams,\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  PM extends AbstractMessageParamsMetamask,\n> extends BaseControllerV1<BaseConfig, MessageManagerState<M>> {\n  protected messages: M[];\n\n  protected getCurrentChainId: getCurrentChainId | undefined;\n\n  private readonly securityProviderRequest: SecurityProviderRequest | undefined;\n\n  private readonly additionalFinishStatuses: string[];\n\n  /**\n   * Saves the unapproved messages, and their count to state.\n   *\n   * @param emitUpdateBadge - Whether to emit the updateBadge event.\n   */\n  protected saveMessageList(emitUpdateBadge = true) {\n    const unapprovedMessages = this.getUnapprovedMessages();\n    const unapprovedMessagesCount = this.getUnapprovedMessagesCount();\n    this.update({ unapprovedMessages, unapprovedMessagesCount });\n    if (emitUpdateBadge) {\n      this.hub.emit('updateBadge');\n    }\n  }\n\n  /**\n   * Updates the status of a Message in this.messages.\n   *\n   * @param messageId - The id of the Message to update.\n   * @param status - The new status of the Message.\n   */\n  protected setMessageStatus(messageId: string, status: string) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.status = status;\n    this.updateMessage(message);\n    this.hub.emit(`${messageId}:${status}`, message);\n    if (\n      status === 'rejected' ||\n      status === 'signed' ||\n      status === 'errored' ||\n      this.additionalFinishStatuses.includes(status)\n    ) {\n      this.hub.emit(`${messageId}:finished`, message);\n    }\n  }\n\n  /**\n   * Sets a Message in this.messages to the passed Message if the ids are equal.\n   * Then saves the unapprovedMessage list to storage.\n   *\n   * @param message - A Message that will replace an existing Message (with the id) in this.messages.\n   * @param emitUpdateBadge - Whether to emit the updateBadge event.\n   */\n  protected updateMessage(message: M, emitUpdateBadge = true) {\n    const index = this.messages.findIndex((msg) => message.id === msg.id);\n    /* istanbul ignore next */\n    if (index !== -1) {\n      this.messages[index] = message;\n    }\n    this.saveMessageList(emitUpdateBadge);\n  }\n\n  /**\n   * Verifies a message is malicious or not by checking it against a security provider.\n   *\n   * @param message - The message to verify.\n   * @returns A promise that resolves to a secured message with additional security provider response data.\n   */\n  private async securityCheck(message: M): Promise<M> {\n    if (this.securityProviderRequest) {\n      const securityProviderResponse = await this.securityProviderRequest(\n        message,\n        message.type,\n      );\n      return {\n        ...message,\n        securityProviderResponse,\n      };\n    }\n    return message;\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific message events\n   */\n  hub: EventEmitter = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AbstractMessageManager';\n\n  /**\n   * Creates an AbstractMessageManager instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   * @param securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   * @param additionalFinishStatuses - Optional list of statuses that are accepted to emit a finished event.\n   * @param getCurrentChainId - Optional function to get the current chainId.\n   */\n  constructor(\n    config?: Partial<BaseConfig>,\n    state?: Partial<MessageManagerState<M>>,\n    securityProviderRequest?: SecurityProviderRequest,\n    additionalFinishStatuses?: string[],\n    getCurrentChainId?: getCurrentChainId,\n  ) {\n    super(config, state);\n    this.defaultState = {\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    };\n    this.messages = [];\n    this.securityProviderRequest = securityProviderRequest;\n    this.additionalFinishStatuses = additionalFinishStatuses ?? [];\n    this.getCurrentChainId = getCurrentChainId;\n    this.initialize();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages.\n   *\n   * @returns The number of 'unapproved' Messages in this.messages.\n   */\n  getUnapprovedMessagesCount() {\n    return Object.keys(this.getUnapprovedMessages()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' Messages in state messages.\n   *\n   * @returns An index of Message ids to Messages, for all 'unapproved' Messages in this.messages.\n   */\n  getUnapprovedMessages() {\n    return this.messages\n      .filter((message) => message.status === 'unapproved')\n      .reduce((result: { [key: string]: M }, message: M) => {\n        result[message.id] = message;\n        return result;\n      }, {}) as { [key: string]: M };\n  }\n\n  /**\n   * Adds a passed Message to this.messages, and calls this.saveMessageList() to save\n   * the unapproved Messages from that list to this.messages.\n   *\n   * @param message - The Message to add to this.messages.\n   */\n  async addMessage(message: M) {\n    const securedMessage = await this.securityCheck(message);\n    this.messages.push(securedMessage);\n    this.saveMessageList();\n  }\n\n  /**\n   * Returns a specified Message.\n   *\n   * @param messageId - The id of the Message to get.\n   * @returns The Message with the id that matches the passed messageId, or undefined\n   * if no Message has that id.\n   */\n  getMessage(messageId: string) {\n    return this.messages.find((message) => message.id === messageId);\n  }\n\n  /**\n   * Returns all the messages.\n   *\n   * @returns An array of messages.\n   */\n  getAllMessages() {\n    return this.messages;\n  }\n\n  /**\n   * Approves a Message. Sets the message status via a call to this.setMessageStatusApproved,\n   * and returns a promise with any the message params modified for proper signing.\n   *\n   * @param messageParams - The messageParams to be used when signing method is called,\n   * plus data added by MetaMask.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  approveMessage(messageParams: PM): Promise<P> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.setMessageStatusApproved(messageParams.metamaskId);\n    return this.prepMessageForSigning(messageParams);\n  }\n\n  /**\n   * Sets a Message status to 'approved' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the Message to approve.\n   */\n  setMessageStatusApproved(messageId: string) {\n    this.setMessageStatus(messageId, 'approved');\n  }\n\n  /**\n   * Sets message status to inProgress in order to allow users to use extension\n   * while waiting for a custodian signature.\n   *\n   * @param messageId - The id of the message to set to inProgress\n   */\n  setMessageStatusInProgress(messageId: string) {\n    this.setMessageStatus(messageId, 'inProgress');\n  }\n\n  /**\n   * Sets a Message status to 'signed' via a call to this.setMessageStatus and updates\n   * that Message in this.messages by adding the raw signature data of the signature\n   * request to the Message.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param rawSig - The raw data of the signature request.\n   */\n  setMessageStatusSigned(messageId: string, rawSig: string) {\n    this.setMessageStatusAndResult(messageId, rawSig, 'signed');\n  }\n\n  /**\n   * Sets the message via a call to this.setResult and updates status of the message.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param rawSig - The data to update rawSig in the message.\n   * @param status - The new message status.\n   */\n  setMessageStatusAndResult(messageId: string, rawSig: string, status: string) {\n    this.setResult(messageId, rawSig);\n    this.setMessageStatus(messageId, status);\n  }\n\n  /**\n   * Sets the message result.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param result - The data to update result in the message.\n   */\n  setResult(messageId: string, result: string) {\n    const message = this.getMessage(messageId);\n    /* istanbul ignore if */\n    if (!message) {\n      return;\n    }\n    message.rawSig = result;\n    this.updateMessage(message, false);\n  }\n\n  /**\n   * Sets the messsage metadata\n   *\n   * @param messageId - The id of the Message to update\n   * @param metadata - The data with which to replace the metadata property in the message\n   */\n\n  setMetadata(messageId: string, metadata: Json) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.metadata = metadata;\n    this.updateMessage(message, false);\n  }\n\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams\n   *\n   * @param messageParams - The messageParams to modify\n   * @returns Promise resolving to the messageParams with the metamaskId property removed\n   */\n  abstract prepMessageForSigning(messageParams: PM): Promise<P>;\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - Message parameters for the message to add\n   * @param req - The original request object possibly containing the origin.\n   * @param version? - The version of the JSON RPC protocol the request is using.\n   * @returns The id of the newly created message.\n   */\n  abstract addUnapprovedMessage(\n    messageParams: PM,\n    request: OriginalRequest,\n    version?: string,\n  ): Promise<string>;\n\n  /**\n   * Sets a Message status to 'rejected' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the Message to reject.\n   */\n  rejectMessage(messageId: string) {\n    this.setMessageStatus(messageId, 'rejected');\n  }\n\n  /**\n   * Creates a promise which will resolve or reject when the message process is finished.\n   *\n   * @param messageParamsWithId - The params for the personal_sign call to be made after the message is approved.\n   * @param messageName - The name of the message\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async waitForFinishStatus(\n    messageParamsWithId: AbstractMessageParamsMetamask,\n    messageName: string,\n  ): Promise<string> {\n    const { metamaskId: messageId, ...messageParams } = messageParamsWithId;\n    return new Promise((resolve, reject) => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      this.hub.once(`${messageId}:finished`, (data: AbstractMessage) => {\n        switch (data.status) {\n          case 'signed':\n            return resolve(data.rawSig as string);\n          case 'rejected':\n            return reject(\n              new Error(\n                `MetaMask ${messageName} Signature: User denied message signature.`,\n              ),\n            );\n          case 'errored':\n            return reject(\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n              new Error(`MetaMask ${messageName} Signature: ${data.error}`),\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask ${messageName} Signature: Unknown problem: ${JSON.stringify(\n                  messageParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n}\n\nexport default AbstractMessageManager;\n"]}