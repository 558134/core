{"version":3,"sources":["../src/TypedMessageManager.ts"],"sourcesContent":["import { v1 as random } from 'uuid';\n\nimport type {\n  AbstractMessage,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n} from './AbstractMessageManager';\nimport { AbstractMessageManager } from './AbstractMessageManager';\nimport {\n  validateTypedSignMessageDataV1,\n  validateTypedSignMessageDataV3V4,\n} from './utils';\n\n/**\n * @type TypedMessage\n *\n * Represents and contains data about an 'eth_signTypedData' type signature request.\n * These are created when a signature for an eth_signTypedData call is requested.\n * @property id - An id to track and identify the message object\n * @property error - Error corresponding to eth_signTypedData error in failure case\n * @property messageParams - The parameters to pass to the eth_signTypedData method once\n * the signature request is approved\n * @property type - The json-prc signing method for which a signature request has been made.\n * A 'TypedMessage' which always has a 'eth_signTypedData' type\n * @property rawSig - Raw data of the signature request\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TypedMessage extends AbstractMessage {\n  error?: string;\n  messageParams: TypedMessageParams;\n  time: number;\n  status: string;\n  type: string;\n  rawSig?: string;\n}\n\nexport type SignTypedDataMessageV3V4 = {\n  types: Record<string, unknown>;\n  domain: Record<string, unknown>;\n  primaryType: string;\n  message: unknown;\n};\n\n/**\n * @type TypedMessageParams\n *\n * Represents the parameters to pass to the eth_signTypedData method once the signature request is approved.\n * @property data - A hex string conversion of the raw buffer or an object containing data of the signature\n * request depending on version\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TypedMessageParams extends AbstractMessageParams {\n  data: Record<string, unknown>[] | string | SignTypedDataMessageV3V4;\n}\n\n/**\n * @type TypedMessageParamsMetamask\n *\n * Represents the parameters to pass to the eth_signTypedData method once the signature request is approved\n * plus data added by MetaMask.\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property data - A hex string conversion of the raw buffer or an object containing data of the signature\n * request depending on version\n * @property error? - Added for message errored\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n * @property version - Compatibility version EIP712\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TypedMessageParamsMetamask\n  extends AbstractMessageParamsMetamask {\n  data: TypedMessageParams['data'];\n  metamaskId?: string;\n  error?: string;\n  version?: string;\n}\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - TypedMessages.\n */\nexport class TypedMessageManager extends AbstractMessageManager<\n  TypedMessage,\n  TypedMessageParams,\n  TypedMessageParamsMetamask\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TypedMessageManager' as const;\n\n  /**\n   * Creates a new TypedMessage with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new TypedMessage to this.messages, and to save the\n   * unapproved TypedMessages.\n   *\n   * @param messageParams - The params for the 'eth_signTypedData' call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @param version - Compatibility version EIP712.\n   * @returns The id of the newly created TypedMessage.\n   */\n  async addUnapprovedMessage(\n    messageParams: TypedMessageParams,\n    req?: OriginalRequest,\n    version?: string,\n  ): Promise<string> {\n    if (version === 'V1') {\n      validateTypedSignMessageDataV1(messageParams);\n    }\n\n    if (version === 'V3' || version === 'V4') {\n      const currentChainId = this.getCurrentChainId?.();\n      validateTypedSignMessageDataV3V4(messageParams, currentChainId);\n    }\n\n    if (\n      typeof messageParams.data !== 'string' &&\n      (version === 'V3' || version === 'V4')\n    ) {\n      messageParams.data = JSON.stringify(messageParams.data);\n    }\n\n    const messageId = random();\n    const messageParamsMetamask = {\n      ...messageParams,\n      metamaskId: messageId,\n      version,\n    };\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageData: TypedMessage = {\n      id: messageId,\n      messageParams,\n      securityAlertResponse: req?.securityAlertResponse,\n      status: 'unapproved',\n      time: Date.now(),\n      type: 'eth_signTypedData',\n    };\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, messageParamsMetamask);\n    return messageId;\n  }\n\n  /**\n   * Sets a TypedMessage status to 'errored' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the TypedMessage to error.\n   * @param error - The error to be included in TypedMessage.\n   */\n  setMessageStatusErrored(messageId: string, error: string) {\n    const message = this.getMessage(messageId);\n    /* istanbul ignore if */\n    if (!message) {\n      return;\n    }\n    message.error = error;\n    this.updateMessage(message);\n    this.setMessageStatus(messageId, 'errored');\n  }\n\n  /**\n   * Removes the metamaskId and version properties from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId and version properties removed.\n   */\n  prepMessageForSigning(\n    messageParams: TypedMessageParamsMetamask,\n  ): Promise<TypedMessageParams> {\n    // Using delete operation will throw an error on frozen messageParams\n    const {\n      metamaskId: _metamaskId,\n      version: _version,\n      ...messageParamsWithoutId\n    } = messageParams;\n    return Promise.resolve(messageParamsWithoutId);\n  }\n}\n\nexport default TypedMessageManager;\n"],"mappings":";;;;;;;;;AAAA,SAAS,MAAM,cAAc;AAyFtB,IAAM,sBAAN,cAAkC,uBAIvC;AAAA,EAJK;AAAA;AAQL;AAAA;AAAA;AAAA,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAahB,MAAM,qBACJ,eACA,KACA,SACiB;AACjB,QAAI,YAAY,MAAM;AACpB,qCAA+B,aAAa;AAAA,IAC9C;AAEA,QAAI,YAAY,QAAQ,YAAY,MAAM;AACxC,YAAM,iBAAiB,KAAK,oBAAoB;AAChD,uCAAiC,eAAe,cAAc;AAAA,IAChE;AAEA,QACE,OAAO,cAAc,SAAS,aAC7B,YAAY,QAAQ,YAAY,OACjC;AACA,oBAAc,OAAO,KAAK,UAAU,cAAc,IAAI;AAAA,IACxD;AAEA,UAAM,YAAY,OAAO;AACzB,UAAM,wBAAwB;AAAA,MAC5B,GAAG;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,IACF;AACA,QAAI,KAAK;AACP,oBAAc,SAAS,IAAI;AAAA,IAC7B;AACA,UAAM,cAA4B;AAAA,MAChC,IAAI;AAAA,MACJ;AAAA,MACA,uBAAuB,KAAK;AAAA,MAC5B,QAAQ;AAAA,MACR,MAAM,KAAK,IAAI;AAAA,MACf,MAAM;AAAA,IACR;AACA,UAAM,KAAK,WAAW,WAAW;AACjC,SAAK,IAAI,KAAK,qBAAqB,qBAAqB;AACxD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB,WAAmB,OAAe;AACxD,UAAM,UAAU,KAAK,WAAW,SAAS;AAEzC,QAAI,CAAC,SAAS;AACZ;AAAA,IACF;AACA,YAAQ,QAAQ;AAChB,SAAK,cAAc,OAAO;AAC1B,SAAK,iBAAiB,WAAW,SAAS;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBACE,eAC6B;AAE7B,UAAM;AAAA,MACJ,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,GAAG;AAAA,IACL,IAAI;AACJ,WAAO,QAAQ,QAAQ,sBAAsB;AAAA,EAC/C;AACF;AAEA,IAAO,8BAAQ;","names":[]}