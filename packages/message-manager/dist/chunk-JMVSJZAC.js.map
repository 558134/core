{"version":3,"sources":["../src/DecryptMessageManager.ts"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,MAAM,cAAc;AA8DtB,IAAM,wBAAN,cAAoC,uBAIzC;AAAA,EAJK;AAAA;AAQL;AAAA;AAAA;AAAA,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB,MAAM,0BACJ,eACA,KACiB;AACjB,iCAA6B,aAAa;AAC1C,UAAM,YAAY,MAAM,KAAK,qBAAqB,eAAe,GAAG;AAEpE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,IAAI,KAAK,GAAG,SAAS,aAAa,CAAC,SAAyB;AAC/D,gBAAQ,KAAK,QAAQ;AAAA,UACnB,KAAK;AACH,mBAAO,QAAQ,KAAK,MAAgB;AAAA,UACtC,KAAK;AACH,mBAAO;AAAA,cACL,IAAI;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,IAAI;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AACE,mBAAO;AAAA,cACL,IAAI;AAAA,gBACF,6CAA6C,KAAK;AAAA,kBAChD;AAAA,gBACF,CAAC;AAAA,cACH;AAAA,YACF;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,qBACJ,eACA,KACA;AACA,QAAI,KAAK;AACP,oBAAc,SAAS,IAAI;AAAA,IAC7B;AACA,kBAAc,OAAO,qBAAqB,cAAc,IAAI;AAC5D,UAAM,YAAY,OAAO;AACzB,UAAM,cAA8B;AAAA,MAClC,IAAI;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,MACR,MAAM,KAAK,IAAI;AAAA,MACf,MAAM;AAAA,IACR;AACA,UAAM,KAAK,WAAW,WAAW;AACjC,SAAK,IAAI,KAAK,qBAAqB;AAAA,MACjC,GAAG;AAAA,MACH,GAAG,EAAE,YAAY,UAAU;AAAA,IAC7B,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBACE,eAC+B;AAC/B,WAAO,cAAc;AACrB,WAAO,QAAQ,QAAQ,aAAa;AAAA,EACtC;AACF","sourcesContent":["import { v1 as random } from 'uuid';\n\nimport type {\n  AbstractMessage,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n} from './AbstractMessageManager';\nimport { AbstractMessageManager } from './AbstractMessageManager';\nimport { normalizeMessageData, validateDecryptedMessageData } from './utils';\n\n/**\n * @type DecryptMessage\n *\n * Represents and contains data about a 'eth_decrypt' type signature request.\n * These are created when a signature for an eth_decrypt call is requested.\n * @property id - An id to track and identify the message object\n * @property messageParams - The parameters to pass to the eth_decrypt method once the request is approved\n * @property type - The json-prc signing method for which a signature request has been made.\n * A 'DecryptMessage' which always has a 'eth_decrypt' type\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface DecryptMessage extends AbstractMessage {\n  messageParams: DecryptMessageParams;\n}\n\n/**\n * @type DecryptMessageParams\n *\n * Represents the parameters to pass to the eth_decrypt method once the request is approved.\n * @property data - A hex string conversion of the raw buffer data of the signature request\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface DecryptMessageParams extends AbstractMessageParams {\n  data: string;\n}\n\n/**\n * @type DecryptMessageParamsMetamask\n *\n * Represents the parameters to pass to the eth_decrypt method once the request is approved\n * plus data added by MetaMask.\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property data - A hex string conversion of the raw buffer data of the signature request\n * @property from - Address to sign this message from\n * @property origin? - Added for request origin identification\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface DecryptMessageParamsMetamask\n  extends AbstractMessageParamsMetamask {\n  data: string;\n}\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - DecryptMessages.\n */\nexport class DecryptMessageManager extends AbstractMessageManager<\n  DecryptMessage,\n  DecryptMessageParams,\n  DecryptMessageParamsMetamask\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'DecryptMessageManager' as const;\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the unapproved Messages.\n   *\n   * @param messageParams - The params for the personal_sign call to be made after the message is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async addUnapprovedMessageAsync(\n    messageParams: DecryptMessageParams,\n    req?: OriginalRequest,\n  ): Promise<string> {\n    validateDecryptedMessageData(messageParams);\n    const messageId = await this.addUnapprovedMessage(messageParams, req);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${messageId}:finished`, (data: DecryptMessage) => {\n        switch (data.status) {\n          case 'decrypted':\n            return resolve(data.rawSig as string);\n          case 'rejected':\n            return reject(\n              new Error(\n                'MetaMask DecryptMessage: User denied message decryption.',\n              ),\n            );\n          case 'errored':\n            return reject(\n              new Error(\n                'MetaMask DecryptMessage: This message cannot be decrypted.',\n              ),\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask DecryptMessage: Unknown problem: ${JSON.stringify(\n                  messageParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - The params for the personal_sign call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns The id of the newly created message.\n   */\n  async addUnapprovedMessage(\n    messageParams: DecryptMessageParams,\n    req?: OriginalRequest,\n  ) {\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.data = normalizeMessageData(messageParams.data);\n    const messageId = random();\n    const messageData: DecryptMessage = {\n      id: messageId,\n      messageParams,\n      status: 'unapproved',\n      time: Date.now(),\n      type: 'eth_decrypt',\n    };\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...messageParams,\n      ...{ metamaskId: messageId },\n    });\n    return messageId;\n  }\n\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  prepMessageForSigning(\n    messageParams: DecryptMessageParamsMetamask,\n  ): Promise<DecryptMessageParams> {\n    delete messageParams.metamaskId;\n    return Promise.resolve(messageParams);\n  }\n}\n"]}