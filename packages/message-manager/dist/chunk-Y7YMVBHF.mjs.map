{"version":3,"sources":["../src/EncryptionPublicKeyManager.ts"],"sourcesContent":["import { v1 as random } from 'uuid';\n\nimport type {\n  AbstractMessage,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n} from './AbstractMessageManager';\nimport { AbstractMessageManager } from './AbstractMessageManager';\nimport { validateEncryptionPublicKeyMessageData } from './utils';\n\n/**\n * @type EncryptionPublicKey\n *\n * Represents and contains data about a 'eth_getEncryptionPublicKey' type request.\n * These are created when an encryption public key is requested.\n * @property id - An id to track and identify the message object\n * @property messageParams - The parameters to pass to the eth_getEncryptionPublicKey method once the request is approved\n * @property type - The json-prc method for which an encryption public key request has been made.\n * A 'Message' which always has a 'eth_getEncryptionPublicKey' type\n * @property rawSig - Encryption public key\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EncryptionPublicKey extends AbstractMessage {\n  messageParams: EncryptionPublicKeyParams;\n}\n\n/**\n * @type EncryptionPublicKeyParams\n *\n * Represents the parameters to pass to the method once the request is approved.\n * @property from - Address from which to extract the encryption public key\n * @property origin? - Added for request origin identification\n */\nexport type EncryptionPublicKeyParams = AbstractMessageParams;\n\n/**\n * @type MessageParamsMetamask\n *\n * Represents the parameters to pass to the eth_getEncryptionPublicKey method once the request is approved\n * plus data added by MetaMask.\n * @property metamaskId - Added for tracking and identification within MetaMask\n * @property data - Encryption public key\n * @property from - Address from which to extract the encryption public key\n * @property origin? - Added for request origin identification\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface EncryptionPublicKeyParamsMetamask\n  extends AbstractMessageParamsMetamask {\n  data: string;\n}\n\n/**\n * Controller in charge of managing - storing, adding, removing, updating - Messages.\n */\nexport class EncryptionPublicKeyManager extends AbstractMessageManager<\n  EncryptionPublicKey,\n  EncryptionPublicKeyParams,\n  EncryptionPublicKeyParamsMetamask\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'EncryptionPublicKeyManager' as const;\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the unapproved Messages.\n   *\n   * @param messageParams - The params for the eth_getEncryptionPublicKey call to be made after the message is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns Promise resolving to the raw data of the request.\n   */\n  async addUnapprovedMessageAsync(\n    messageParams: EncryptionPublicKeyParams,\n    req?: OriginalRequest,\n  ): Promise<string> {\n    validateEncryptionPublicKeyMessageData(messageParams);\n    const messageId = await this.addUnapprovedMessage(messageParams, req);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${messageId}:finished`, (data: EncryptionPublicKey) => {\n        switch (data.status) {\n          case 'received':\n            return resolve(data.rawSig as string);\n          case 'rejected':\n            return reject(\n              new Error(\n                'MetaMask EncryptionPublicKey: User denied message EncryptionPublicKey.',\n              ),\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask EncryptionPublicKey: Unknown problem: ${JSON.stringify(\n                  messageParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - The params for the eth_getEncryptionPublicKey call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns The id of the newly created message.\n   */\n  async addUnapprovedMessage(\n    messageParams: EncryptionPublicKeyParams,\n    req?: OriginalRequest,\n  ): Promise<string> {\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageId = random();\n    const messageData: EncryptionPublicKey = {\n      id: messageId,\n      messageParams,\n      status: 'unapproved',\n      time: Date.now(),\n      type: 'eth_getEncryptionPublicKey',\n    };\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...messageParams,\n      ...{ metamaskId: messageId },\n    });\n    return messageId;\n  }\n\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  prepMessageForSigning(\n    messageParams: EncryptionPublicKeyParamsMetamask,\n  ): Promise<EncryptionPublicKeyParams> {\n    delete messageParams.metamaskId;\n    return Promise.resolve({ from: messageParams.data });\n  }\n}\n\nexport default EncryptionPublicKeyManager;\n"],"mappings":";;;;;;;;AAAA,SAAS,MAAM,cAAc;AA2DtB,IAAM,6BAAN,cAAyC,uBAI9C;AAAA,EAJK;AAAA;AAQL;AAAA;AAAA;AAAA,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB,MAAM,0BACJ,eACA,KACiB;AACjB,2CAAuC,aAAa;AACpD,UAAM,YAAY,MAAM,KAAK,qBAAqB,eAAe,GAAG;AAEpE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,IAAI,KAAK,GAAG,SAAS,aAAa,CAAC,SAA8B;AACpE,gBAAQ,KAAK,QAAQ;AAAA,UACnB,KAAK;AACH,mBAAO,QAAQ,KAAK,MAAgB;AAAA,UACtC,KAAK;AACH,mBAAO;AAAA,cACL,IAAI;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AACE,mBAAO;AAAA,cACL,IAAI;AAAA,gBACF,kDAAkD,KAAK;AAAA,kBACrD;AAAA,gBACF,CAAC;AAAA,cACH;AAAA,YACF;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,qBACJ,eACA,KACiB;AACjB,QAAI,KAAK;AACP,oBAAc,SAAS,IAAI;AAAA,IAC7B;AACA,UAAM,YAAY,OAAO;AACzB,UAAM,cAAmC;AAAA,MACvC,IAAI;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,MACR,MAAM,KAAK,IAAI;AAAA,MACf,MAAM;AAAA,IACR;AACA,UAAM,KAAK,WAAW,WAAW;AACjC,SAAK,IAAI,KAAK,qBAAqB;AAAA,MACjC,GAAG;AAAA,MACH,GAAG,EAAE,YAAY,UAAU;AAAA,IAC7B,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBACE,eACoC;AACpC,WAAO,cAAc;AACrB,WAAO,QAAQ,QAAQ,EAAE,MAAM,cAAc,KAAK,CAAC;AAAA,EACrD;AACF;AAEA,IAAO,qCAAQ;","names":[]}