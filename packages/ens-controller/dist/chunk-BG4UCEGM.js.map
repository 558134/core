{"version":3,"sources":["../src/EnsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ExternalProvider,\n  JsonRpcFetchFunc,\n} from '@ethersproject/providers';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { ChainId } from '@metamask/controller-utils';\nimport {\n  normalizeEnsName,\n  isValidHexAddress,\n  isSafeDynamicKey,\n  toChecksumHexAddress,\n  CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP,\n  convertHexToDecimal,\n  toHex,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkState,\n} from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { createProjectLogger } from '@metamask/utils';\nimport { toASCII } from 'punycode/';\n\nconst log = createProjectLogger('ens-controller');\n\nconst name = 'EnsController';\n\n// Map of chainIDs and ENS registry contract addresses\nexport const DEFAULT_ENS_NETWORK_MAP: Record<number, Hex> = {\n  // Mainnet\n  1: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  // Ropsten\n  3: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  // Rinkeby\n  4: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  // Goerli\n  5: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  // Holesky\n  17000: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  // Sepolia\n  11155111: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n};\n\n/**\n * @type EnsEntry\n *\n * ENS entry representation\n * @property chainId - Id of the associated chain\n * @property ensName - The ENS name\n * @property address - Hex address with the ENS name, or null\n */\nexport type EnsEntry = {\n  chainId: Hex;\n  ensName: string;\n  address: string | null;\n};\n\n/**\n * @type EnsControllerState\n *\n * ENS controller state\n * @property ensEntries - Object of ENS entry objects\n */\nexport type EnsControllerState = {\n  ensEntries: {\n    [chainId: Hex]: {\n      [ensName: string]: EnsEntry;\n    };\n  };\n  ensResolutionsByAddress: { [key: string]: string };\n};\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\nexport type EnsControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nconst metadata = {\n  ensEntries: { persist: true, anonymous: false },\n  ensResolutionsByAddress: { persist: true, anonymous: false },\n};\n\nconst defaultState = {\n  ensEntries: {},\n  ensResolutionsByAddress: {},\n};\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nconst ZERO_X_ERROR_ADDRESS = '0x';\n\n/**\n * Controller that manages a list ENS names and their resolved addresses\n * by chainId. A null address indicates an unresolved ENS name.\n */\nexport class EnsController extends BaseController<\n  typeof name,\n  EnsControllerState,\n  EnsControllerMessenger\n> {\n  #ethProvider: Web3Provider | null = null;\n\n  /**\n   * Creates an EnsController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.registriesByChainId - Map between chain IDs and ENS contract addresses.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.provider - Provider instance.\n   * @param options.onNetworkDidChange - Allows subscribing to network controller networkDidChange events.\n   */\n  constructor({\n    registriesByChainId = DEFAULT_ENS_NETWORK_MAP,\n    messenger,\n    state = {},\n    provider,\n    onNetworkDidChange,\n  }: {\n    registriesByChainId?: Record<number, Hex>;\n    messenger: EnsControllerMessenger;\n    state?: Partial<EnsControllerState>;\n    provider?: ExternalProvider | JsonRpcFetchFunc;\n    onNetworkDidChange?: (\n      listener: (networkState: NetworkState) => void,\n    ) => void;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...defaultState,\n        ensEntries: Object.fromEntries(\n          Object.entries(registriesByChainId).map(([chainId, address]) => [\n            toHex(chainId),\n            {\n              '.': {\n                address,\n                chainId: toHex(chainId),\n                ensName: '.',\n              },\n            },\n          ]),\n        ),\n        ...state,\n      },\n    });\n\n    if (provider && onNetworkDidChange) {\n      onNetworkDidChange(({ selectedNetworkClientId }) => {\n        this.resetState();\n        const selectedNetworkClient = this.messagingSystem.call(\n          'NetworkController:getNetworkClientById',\n          selectedNetworkClientId,\n        );\n        const currentChainId = selectedNetworkClient.configuration.chainId;\n\n        if (this.#getChainEnsSupport(currentChainId)) {\n          this.#ethProvider = new Web3Provider(provider, {\n            chainId: convertHexToDecimal(currentChainId),\n            name: CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP[\n              currentChainId as ChainId\n            ],\n            ensAddress: registriesByChainId[parseInt(currentChainId, 16)],\n          });\n        } else {\n          this.#ethProvider = null;\n        }\n      });\n    }\n  }\n\n  /**\n   * Clears ensResolutionsByAddress state property.\n   */\n  resetState() {\n    this.update((currentState) => {\n      currentState.ensResolutionsByAddress = {};\n    });\n  }\n\n  /**\n   * Remove all chain Ids and ENS entries from state.\n   */\n  clear() {\n    this.update((state) => {\n      state.ensEntries = {};\n    });\n  }\n\n  /**\n   * Delete an ENS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to delete.\n   * @param ensName - Name of the ENS entry to delete.\n   * @returns Boolean indicating if the entry was deleted.\n   */\n  delete(chainId: Hex, ensName: string): boolean {\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (\n      !isSafeDynamicKey(chainId) ||\n      !normalizedEnsName ||\n      !this.state.ensEntries[chainId] ||\n      !this.state.ensEntries[chainId][normalizedEnsName]\n    ) {\n      return false;\n    }\n\n    this.update((state) => {\n      delete state.ensEntries[chainId][normalizedEnsName];\n\n      if (Object.keys(state.ensEntries[chainId]).length === 0) {\n        delete state.ensEntries[chainId];\n      }\n    });\n    return true;\n  }\n\n  /**\n   * Retrieve a DNS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to retrieve.\n   * @param ensName - Name of the ENS entry to retrieve.\n   * @returns The EnsEntry or null if it does not exist.\n   */\n  get(chainId: Hex, ensName: string): EnsEntry | null {\n    const normalizedEnsName = normalizeEnsName(ensName);\n\n    // TODO Explicitly handle the case where `normalizedEnsName` is `null`\n    // eslint-disable-next-line no-implicit-coercion\n    return !!normalizedEnsName && this.state.ensEntries[chainId]\n      ? this.state.ensEntries[chainId][normalizedEnsName] || null\n      : null;\n  }\n\n  /**\n   * Add or update an ENS entry by chainId and ensName.\n   *\n   * A null address indicates that the ENS name does not resolve.\n   *\n   * @param chainId - Id of the associated chain.\n   * @param ensName - The ENS name.\n   * @param address - Associated address (or null) to add or update.\n   * @returns Boolean indicating if the entry was set.\n   */\n  set(chainId: Hex, ensName: string, address: string | null): boolean {\n    if (\n      !Number.isInteger(Number.parseInt(chainId, 10)) ||\n      !ensName ||\n      typeof ensName !== 'string' ||\n      (address && !isValidHexAddress(address))\n    ) {\n      throw new Error(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `Invalid ENS entry: { chainId:${chainId}, ensName:${ensName}, address:${address}}`,\n      );\n    }\n\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (!normalizedEnsName) {\n      throw new Error(`Invalid ENS name: ${ensName}`);\n    }\n\n    const normalizedAddress = address ? toChecksumHexAddress(address) : null;\n    const subState = this.state.ensEntries[chainId];\n\n    if (\n      subState?.[normalizedEnsName] &&\n      subState[normalizedEnsName].address === normalizedAddress\n    ) {\n      return false;\n    }\n\n    this.update((state) => {\n      state.ensEntries = {\n        ...this.state.ensEntries,\n        [chainId]: {\n          ...this.state.ensEntries[chainId],\n          [normalizedEnsName]: {\n            address: normalizedAddress,\n            chainId,\n            ensName: normalizedEnsName,\n          },\n        },\n      };\n    });\n    return true;\n  }\n\n  /**\n   * Check if the chain supports ENS.\n   *\n   * @param chainId - chain id.\n   * @returns Boolean indicating if the chain supports ENS.\n   */\n  #getChainEnsSupport(chainId: Hex) {\n    return Boolean(this.state.ensEntries[chainId]);\n  }\n\n  /**\n   * Resolve ens by address.\n   *\n   * @param nonChecksummedAddress - address\n   * @returns ens resolution\n   */\n  async reverseResolveAddress(nonChecksummedAddress: string) {\n    if (!this.#ethProvider) {\n      return undefined;\n    }\n\n    const address = toChecksumHexAddress(nonChecksummedAddress);\n    if (this.state.ensResolutionsByAddress[address]) {\n      return this.state.ensResolutionsByAddress[address];\n    }\n\n    let domain: string | null;\n    try {\n      domain = await this.#ethProvider.lookupAddress(address);\n    } catch (error) {\n      log(error);\n      return undefined;\n    }\n\n    if (!domain) {\n      return undefined;\n    }\n\n    let registeredAddress: string | null;\n    try {\n      registeredAddress = await this.#ethProvider.resolveName(domain);\n    } catch (error) {\n      log(error);\n      return undefined;\n    }\n\n    if (!registeredAddress) {\n      return undefined;\n    }\n\n    if (\n      registeredAddress === ZERO_ADDRESS ||\n      registeredAddress === ZERO_X_ERROR_ADDRESS\n    ) {\n      return undefined;\n    }\n    if (toChecksumHexAddress(registeredAddress) !== address) {\n      return undefined;\n    }\n\n    this.update((state) => {\n      state.ensResolutionsByAddress[address] = toASCII(domain as string);\n    });\n\n    return domain;\n  }\n}\n\nexport default EnsController;\n"]}