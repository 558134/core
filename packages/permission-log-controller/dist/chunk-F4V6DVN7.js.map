{"version":3,"sources":["../src/PermissionLogController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseController,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport {\n  type Json,\n  type JsonRpcRequest,\n  type JsonRpcParams,\n  type PendingJsonRpcResponse,\n  hasProperty,\n} from '@metamask/utils';\n\nimport {\n  LOG_IGNORE_METHODS,\n  LOG_LIMIT,\n  LOG_METHOD_TYPES,\n  WALLET_PREFIX,\n  CAVEAT_TYPES,\n} from './enums';\n\nexport type JsonRpcRequestWithOrigin<\n  Params extends JsonRpcParams = JsonRpcParams,\n> = JsonRpcRequest<Params> & {\n  origin?: string;\n};\n\nexport type Caveat = {\n  type: string;\n  value: string[];\n};\n\nexport type Permission = {\n  parentCapability: string;\n  caveats?: Caveat[];\n};\n\nexport type PermissionActivityLog = {\n  id: string | number | null;\n  method: string;\n  methodType: LOG_METHOD_TYPES;\n  origin?: string;\n  requestTime: number;\n  responseTime: number | null;\n  success: boolean | null;\n};\n\nexport type PermissionLog = {\n  accounts?: Record<string, number>;\n  lastApproved?: number;\n};\nexport type PermissionEntry = Record<string, PermissionLog>;\n\nexport type PermissionHistory = Record<string, PermissionEntry>;\n\n/**\n *\n * Permission log controller state\n * @property permissionHistory - permission history\n * @property permissionActivityLog - permission activity logs\n */\nexport type PermissionLogControllerState = {\n  permissionHistory: PermissionHistory;\n  permissionActivityLog: PermissionActivityLog[];\n};\n\nexport type PermissionLogControllerOptions = {\n  restrictedMethods: Set<string>;\n  state?: Partial<PermissionLogControllerState>;\n  messenger: PermissionLogControllerMessenger;\n};\n\nexport type PermissionLogControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  never,\n  never,\n  never,\n  never\n>;\n\nconst defaultState: PermissionLogControllerState = {\n  permissionHistory: {},\n  permissionActivityLog: [],\n};\n\nconst name = 'PermissionLogController';\n\n/**\n * Controller with middleware for logging requests and responses to restricted\n * and permissions-related methods.\n */\nexport class PermissionLogController extends BaseController<\n  typeof name,\n  PermissionLogControllerState,\n  PermissionLogControllerMessenger\n> {\n  #restrictedMethods: Set<string>;\n\n  constructor({\n    messenger,\n    restrictedMethods,\n    state,\n  }: PermissionLogControllerOptions) {\n    super({\n      messenger,\n      name,\n      metadata: {\n        permissionHistory: {\n          persist: true,\n          anonymous: false,\n        },\n        permissionActivityLog: {\n          persist: true,\n          anonymous: false,\n        },\n      },\n      state: { ...defaultState, ...state },\n    });\n    this.#restrictedMethods = restrictedMethods;\n  }\n\n  /**\n   * Updates the exposed account history for the given origin.\n   * Sets the 'last seen' time to Date.now() for the given accounts.\n   * Does **not** update the 'lastApproved' time for the permission itself.\n   * Returns if the accounts array is empty.\n   *\n   * @param origin - The origin that the accounts are exposed to.\n   * @param accounts - The accounts.\n   */\n  updateAccountsHistory(origin: string, accounts: string[]) {\n    if (accounts.length === 0) {\n      return;\n    }\n    const newEntries = {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      eth_accounts: {\n        accounts: this.#getAccountToTimeMap(accounts, Date.now()),\n      },\n    };\n    this.#commitNewHistory(origin, newEntries);\n  }\n\n  /**\n   * Create a permissions log middleware. Records permissions activity and history:\n   *\n   * Activity: requests and responses for restricted and most wallet_ methods.\n   *\n   * History: for each origin, the last time a permission was granted, including\n   * which accounts were exposed, if any.\n   *\n   * @returns The permissions log middleware.\n   */\n  createMiddleware(): JsonRpcMiddleware<JsonRpcParams, Json> {\n    return (req: JsonRpcRequestWithOrigin, res, next) => {\n      const { origin, method } = req;\n      const isInternal = method.startsWith(WALLET_PREFIX);\n      const isEthRequestAccounts = method === 'eth_requestAccounts';\n\n      // Determine if the method should be logged\n      if (\n        (!LOG_IGNORE_METHODS.includes(method) &&\n          (isInternal || this.#restrictedMethods.has(method))) ||\n        isEthRequestAccounts\n      ) {\n        const activityEntry = this.#logRequest(req, isInternal);\n\n        const requestedMethods = this.#getRequestedMethods(req);\n\n        // Call next with a return handler for capturing the response\n        next((cb) => {\n          const time = Date.now();\n          this.#logResponse(activityEntry, res, time);\n\n          if (requestedMethods && !res.error && res.result && origin) {\n            this.#logPermissionsHistory(\n              requestedMethods,\n              origin,\n              res.result,\n              time,\n              isEthRequestAccounts,\n            );\n          }\n          cb();\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Get a map from account addresses to the given time.\n   *\n   * @param accounts - An array of addresses.\n   * @param time - A time, e.g. Date.now().\n   * @returns A string:number map of addresses to time.\n   */\n  #getAccountToTimeMap(\n    accounts: string[],\n    time: number,\n  ): Record<string, number> {\n    return accounts.reduce(\n      (acc, account) => ({\n        ...acc,\n        [account]: time,\n      }),\n      {},\n    );\n  }\n\n  /**\n   * Creates and commits an activity log entry, without response data.\n   *\n   * @param request - The request object.\n   * @param isInternal - Whether the request is internal.\n   * @returns new added activity entry\n   */\n  #logRequest(\n    request: JsonRpcRequestWithOrigin,\n    isInternal: boolean,\n  ): PermissionActivityLog {\n    const activityEntry: PermissionActivityLog = {\n      id: request.id,\n      method: request.method,\n      methodType: isInternal\n        ? LOG_METHOD_TYPES.internal\n        : LOG_METHOD_TYPES.restricted,\n      origin: request.origin,\n      requestTime: Date.now(),\n      responseTime: null,\n      success: null,\n    };\n    this.update((state) => {\n      const newLogs = [...state.permissionActivityLog, activityEntry];\n      state.permissionActivityLog =\n        // remove oldest log if exceeding size limit\n        newLogs.length > LOG_LIMIT ? newLogs.slice(1) : newLogs;\n    });\n    return activityEntry;\n  }\n\n  /**\n   * Adds response data to an existing activity log entry.\n   * Entry assumed already committed (i.e., in the log).\n   *\n   * @param entry - The entry to add a response to.\n   * @param response - The response object.\n   * @param time - Output from Date.now()\n   */\n  #logResponse(\n    entry: PermissionActivityLog,\n    response: PendingJsonRpcResponse<Json>,\n    time: number,\n  ) {\n    if (!entry || !response) {\n      return;\n    }\n\n    // The JSON-RPC 2.0 specification defines \"success\" by the presence of\n    // either the \"result\" or \"error\" property. The specification forbids\n    // both properties from being present simultaneously, and our JSON-RPC\n    // stack is spec-compliant at the time of writing.\n    this.update((state) => {\n      state.permissionActivityLog = state.permissionActivityLog.map((log) => {\n        // Update the log entry that matches the given entry id\n        if (log.id === entry.id) {\n          return {\n            ...log,\n            success: hasProperty(response, 'result'),\n            responseTime: time,\n          };\n        }\n        return log;\n      });\n    });\n  }\n\n  /**\n   * Create new permissions history log entries, if any, and commit them.\n   *\n   * @param requestedMethods - The method names corresponding to the requested permissions.\n   * @param origin - The origin of the permissions request.\n   * @param result - The permissions request response.result.\n   * @param time - The time of the request, i.e. Date.now().\n   * @param isEthRequestAccounts - Whether the permissions request was 'eth_requestAccounts'.\n   */\n  #logPermissionsHistory(\n    requestedMethods: string[],\n    origin: string,\n    result: Json,\n    time: number,\n    isEthRequestAccounts: boolean,\n  ) {\n    let newEntries: PermissionEntry;\n\n    if (isEthRequestAccounts) {\n      // Type assertion: We are assuming that the response data contains\n      // a set of accounts if the RPC method is \"eth_requestAccounts\".\n      const accounts = result as string[];\n      newEntries = {\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        eth_accounts: {\n          accounts: this.#getAccountToTimeMap(accounts, time),\n          lastApproved: time,\n        },\n      };\n    } else {\n      // Records new \"lastApproved\" times for the granted permissions, if any.\n      // Special handling for eth_accounts, in order to record the time the\n      // accounts were last seen or approved by the origin.\n      // Type assertion: We are assuming that the response data contains\n      // a set of permissions if the RPC method is \"eth_requestPermissions\".\n      const permissions = result as Permission[];\n      newEntries = permissions.reduce((acc: PermissionEntry, permission) => {\n        const method = permission.parentCapability;\n\n        if (!requestedMethods.includes(method)) {\n          return acc;\n        }\n\n        if (method === 'eth_accounts') {\n          const accounts = this.#getAccountsFromPermission(permission);\n          return {\n            ...acc,\n            [method]: {\n              lastApproved: time,\n              accounts: this.#getAccountToTimeMap(accounts, time),\n            },\n          };\n        }\n\n        return {\n          ...acc,\n          [method]: {\n            lastApproved: time,\n          },\n        };\n      }, {});\n    }\n\n    if (Object.keys(newEntries).length > 0) {\n      this.#commitNewHistory(origin, newEntries);\n    }\n  }\n\n  /**\n   * Commit new entries to the permissions history log.\n   * Merges the history for the given origin, overwriting existing entries\n   * with the same key (permission name).\n   *\n   * @param origin - The requesting origin.\n   * @param newEntries - The new entries to commit.\n   */\n  #commitNewHistory(origin: string, newEntries: PermissionEntry) {\n    const { permissionHistory } = this.state;\n\n    // a simple merge updates most permissions\n    const oldOriginHistory = permissionHistory[origin] ?? {};\n    const newOriginHistory = {\n      ...oldOriginHistory,\n      ...newEntries,\n    };\n\n    // eth_accounts requires special handling, because of information\n    // we store about the accounts\n    const existingEthAccountsEntry = oldOriginHistory.eth_accounts;\n    const newEthAccountsEntry = newEntries.eth_accounts;\n\n    if (existingEthAccountsEntry && newEthAccountsEntry) {\n      // we may intend to update just the accounts, not the permission\n      // itself\n      const lastApproved =\n        newEthAccountsEntry.lastApproved ??\n        existingEthAccountsEntry.lastApproved;\n\n      // merge old and new eth_accounts history entries\n      newOriginHistory.eth_accounts = {\n        lastApproved,\n        accounts: {\n          ...existingEthAccountsEntry.accounts,\n          ...newEthAccountsEntry.accounts,\n        },\n      };\n    }\n\n    this.update((state) => {\n      state.permissionHistory = {\n        ...permissionHistory,\n        [origin]: newOriginHistory,\n      };\n    });\n  }\n\n  /**\n   * Get all requested methods from a permissions request.\n   *\n   * @param request - The request object.\n   * @returns The names of the requested permissions.\n   */\n  #getRequestedMethods(request: JsonRpcRequestWithOrigin): string[] | null {\n    const { method, params } = request;\n    if (method === 'eth_requestAccounts') {\n      return ['eth_accounts'];\n    } else if (\n      method === `${WALLET_PREFIX}requestPermissions` &&\n      params &&\n      Array.isArray(params) &&\n      params[0] &&\n      typeof params[0] === 'object' &&\n      !Array.isArray(params[0])\n    ) {\n      return Object.keys(params[0]);\n    }\n    return null;\n  }\n\n  /**\n   * Get the permitted accounts from an eth_accounts permissions object.\n   * Returns an empty array if the permission is not eth_accounts.\n   *\n   * @param permission - The permissions object.\n   * @param permission.parentCapability - The permissions parentCapability.\n   * @param permission.caveats - The permissions caveats.\n   * @returns The permitted accounts.\n   */\n  #getAccountsFromPermission(permission: Permission): string[] {\n    if (permission.parentCapability !== 'eth_accounts' || !permission.caveats) {\n      return [];\n    }\n\n    const accounts = new Set<string>();\n    for (const caveat of permission.caveats) {\n      if (\n        caveat.type === CAVEAT_TYPES.restrictReturnedAccounts &&\n        Array.isArray(caveat.value)\n      ) {\n        for (const value of caveat.value) {\n          accounts.add(value);\n        }\n      }\n    }\n\n    return [...accounts];\n  }\n}\n"]}