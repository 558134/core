{"version":3,"sources":["../src/helpers/SnapSmartContractAccount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAaO,IAAM,2BAAN,MAA+D;AAAA,EAGpE,YAAY,WAA6C;AAFzD;AAGE,uBAAK,YAAa;AAAA,EACpB;AAAA,EAEA,MAAM,qBACJ,SACuC;AACvC,UAAM;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,IAAI;AAEJ,UAAM,OAAO,eAAe;AAC5B,UAAM,KAAK,aAAa;AACxB,UAAM,QAAQ,gBAAgB;AAE9B,UAAM,WAAW,MAAM,mBAAK,YAAW;AAAA,MACrC;AAAA,MACA;AAAA,MACA,CAAC,EAAE,MAAM,IAAI,MAAM,CAAC;AAAA,MACpB,EAAE,SAAS,gBAAgB,OAAO,EAAE;AAAA,IACtC;AAEA,UAAM;AAAA,MACJ,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,oBACJ,SACsC;AACtC,UAAM,EAAE,eAAe,QAAQ,IAAI;AACnC,UAAM,EAAE,OAAO,IAAI;AAEnB,UAAM;AAAA,MACJ,kBAAkB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,MAAM,mBAAK,YAAW;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA,EAAE,SAAS,gBAAgB,OAAO,EAAE;AAAA,IACtC;AAEA,UAAM,mBACJ,6BAA6B,cACzB,SACA;AAEN,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,kBACJ,SACoC;AACpC,UAAM,EAAE,eAAe,QAAQ,IAAI;AACnC,UAAM,EAAE,OAAO,IAAI;AAEnB,UAAM,YAAY,MAAM,mBAAK,YAAW;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,MACA,EAAE,SAAS,gBAAgB,OAAO,EAAE;AAAA,IACtC;AAEA,WAAO,EAAE,UAAU;AAAA,EACrB;AACF;AAhGE","sourcesContent":["import { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from '../constants';\nimport type {\n  PrepareUserOperationRequest,\n  PrepareUserOperationResponse,\n  SignUserOperationRequest,\n  SignUserOperationResponse,\n  SmartContractAccount,\n  UpdateUserOperationRequest,\n  UpdateUserOperationResponse,\n} from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { toEip155ChainId } from '../utils/chain-id';\n\nexport class SnapSmartContractAccount implements SmartContractAccount {\n  #messenger: UserOperationControllerMessenger;\n\n  constructor(messenger: UserOperationControllerMessenger) {\n    this.#messenger = messenger;\n  }\n\n  async prepareUserOperation(\n    request: PrepareUserOperationRequest,\n  ): Promise<PrepareUserOperationResponse> {\n    const {\n      chainId,\n      data: requestData,\n      from: sender,\n      to: requestTo,\n      value: requestValue,\n    } = request;\n\n    const data = requestData ?? EMPTY_BYTES;\n    const to = requestTo ?? ADDRESS_ZERO;\n    const value = requestValue ?? VALUE_ZERO;\n\n    const response = await this.#messenger.call(\n      'KeyringController:prepareUserOperation',\n      sender,\n      [{ data, to, value }],\n      { chainId: toEip155ChainId(chainId) },\n    );\n\n    const {\n      bundlerUrl: bundler,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      gasLimits: gas,\n      initCode,\n      nonce,\n    } = response;\n\n    return {\n      bundler,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      gas,\n      initCode,\n      nonce,\n      sender,\n    };\n  }\n\n  async updateUserOperation(\n    request: UpdateUserOperationRequest,\n  ): Promise<UpdateUserOperationResponse> {\n    const { userOperation, chainId } = request;\n    const { sender } = userOperation;\n\n    const {\n      paymasterAndData: responsePaymasterAndData,\n      verificationGasLimit,\n      preVerificationGas,\n      callGasLimit,\n    } = await this.#messenger.call(\n      'KeyringController:patchUserOperation',\n      sender,\n      userOperation,\n      { chainId: toEip155ChainId(chainId) },\n    );\n\n    const paymasterAndData =\n      responsePaymasterAndData === EMPTY_BYTES\n        ? undefined\n        : responsePaymasterAndData;\n\n    return {\n      paymasterAndData,\n      verificationGasLimit,\n      preVerificationGas,\n      callGasLimit,\n    };\n  }\n\n  async signUserOperation(\n    request: SignUserOperationRequest,\n  ): Promise<SignUserOperationResponse> {\n    const { userOperation, chainId } = request;\n    const { sender } = userOperation;\n\n    const signature = await this.#messenger.call(\n      'KeyringController:signUserOperation',\n      sender,\n      userOperation,\n      { chainId: toEip155ChainId(chainId) },\n    );\n\n    return { signature };\n  }\n}\n"]}