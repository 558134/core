{"version":3,"sources":["../src/AddressBookController.ts"],"sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  normalizeEnsName,\n  isValidHexAddress,\n  isSafeDynamicKey,\n  toChecksumHexAddress,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * @type ContactEntry\n *\n * ContactEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property importTime - Data time when an account as created/imported\n */\nexport type ContactEntry = {\n  address: string;\n  name: string;\n  importTime?: number;\n};\n\n/**\n * The type of address.\n */\nexport enum AddressType {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  externallyOwnedAccounts = 'EXTERNALLY_OWNED_ACCOUNTS',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  contractAccounts = 'CONTRACT_ACCOUNTS',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  nonAccounts = 'NON_ACCOUNTS',\n}\n\n/**\n * @type AddressBookEntry\n *\n * AddressBookEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property chainId - Chain id identifies the current chain\n * @property memo - User's note about address\n * @property isEns - is the entry an ENS name\n * @property addressType - is the type of this address\n */\nexport type AddressBookEntry = {\n  address: string;\n  name: string;\n  chainId: Hex;\n  memo: string;\n  isEns: boolean;\n  addressType?: AddressType;\n};\n\n/**\n * @type AddressBookState\n *\n * Address book controller state\n * @property addressBook - Array of contact entry objects\n */\nexport type AddressBookControllerState = {\n  addressBook: { [chainId: Hex]: { [address: string]: AddressBookEntry } };\n};\n\n/**\n * The name of the {@link AddressBookController}.\n */\nexport const controllerName = 'AddressBookController';\n\n/**\n * The action that can be performed to get the state of the {@link AddressBookController}.\n */\nexport type AddressBookControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  AddressBookControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link AddressBookController}.\n */\nexport type AddressBookControllerActions = AddressBookControllerGetStateAction;\n\n/**\n * The event that {@link AddressBookController} can emit.\n */\nexport type AddressBookControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  AddressBookControllerState\n>;\n\n/**\n * The events that {@link AddressBookController} can emit.\n */\nexport type AddressBookControllerEvents = AddressBookControllerStateChangeEvent;\n\nconst addressBookControllerMetadata = {\n  addressBook: { persist: true, anonymous: false },\n};\n\n/**\n * Get the default {@link AddressBookController} state.\n *\n * @returns The default {@link AddressBookController} state.\n */\nexport const getDefaultAddressBookControllerState =\n  (): AddressBookControllerState => {\n    return {\n      addressBook: {},\n    };\n  };\n\n/**\n * The messenger of the {@link AddressBookController} for communication.\n */\nexport type AddressBookControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AddressBookControllerActions,\n  AddressBookControllerEvents,\n  never,\n  never\n>;\n\n/**\n * Controller that manages a list of recipient addresses associated with nicknames.\n */\nexport class AddressBookController extends BaseController<\n  typeof controllerName,\n  AddressBookControllerState,\n  AddressBookControllerMessenger\n> {\n  /**\n   * Creates an AddressBookController instance.\n   *\n   * @param args - The {@link AddressBookController} arguments.\n   * @param args.messenger - The controller messenger instance for communication.\n   * @param args.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: AddressBookControllerMessenger;\n    state?: Partial<AddressBookControllerState>;\n  }) {\n    const mergedState = { ...getDefaultAddressBookControllerState(), ...state };\n    super({\n      messenger,\n      metadata: addressBookControllerMetadata,\n      name: controllerName,\n      state: mergedState,\n    });\n  }\n\n  /**\n   * Remove all contract entries.\n   */\n  clear() {\n    this.update((state) => {\n      state.addressBook = {};\n    });\n  }\n\n  /**\n   * Remove a contract entry by address.\n   *\n   * @param chainId - Chain id identifies the current chain.\n   * @param address - Recipient address to delete.\n   * @returns Whether the entry was deleted.\n   */\n  delete(chainId: Hex, address: string) {\n    address = toChecksumHexAddress(address);\n    if (\n      ![chainId, address].every((key) => isSafeDynamicKey(key)) ||\n      !isValidHexAddress(address) ||\n      !this.state.addressBook[chainId] ||\n      !this.state.addressBook[chainId][address]\n    ) {\n      return false;\n    }\n\n    this.update((state) => {\n      delete state.addressBook[chainId][address];\n      if (Object.keys(state.addressBook[chainId]).length === 0) {\n        delete state.addressBook[chainId];\n      }\n    });\n\n    return true;\n  }\n\n  /**\n   * Add or update a contact entry by address.\n   *\n   * @param address - Recipient address to add or update.\n   * @param name - Nickname to associate with this address.\n   * @param chainId - Chain id identifies the current chain.\n   * @param memo - User's note about address.\n   * @param addressType - Contact's address type.\n   * @returns Boolean indicating if the address was successfully set.\n   */\n  set(\n    address: string,\n    name: string,\n    chainId = toHex(1),\n    memo = '',\n    addressType?: AddressType,\n  ) {\n    address = toChecksumHexAddress(address);\n    if (!isValidHexAddress(address)) {\n      return false;\n    }\n\n    const entry = {\n      address,\n      chainId,\n      isEns: false,\n      memo,\n      name,\n      addressType,\n    };\n\n    const ensName = normalizeEnsName(name);\n    if (ensName) {\n      entry.name = ensName;\n      entry.isEns = true;\n    }\n\n    this.update((state) => {\n      state.addressBook = {\n        ...this.state.addressBook,\n        [chainId]: {\n          ...this.state.addressBook[chainId],\n          [address]: entry,\n        },\n      };\n    });\n\n    return true;\n  }\n}\n\nexport default AddressBookController;\n"],"mappings":";AAKA,SAAS,sBAAsB;AAC/B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAoBA,IAAK,cAAL,kBAAKA,iBAAL;AAGL,EAAAA,aAAA,6BAA0B;AAG1B,EAAAA,aAAA,sBAAmB;AAGnB,EAAAA,aAAA,iBAAc;AATJ,SAAAA;AAAA,GAAA;AA6CL,IAAM,iBAAiB;AA4B9B,IAAM,gCAAgC;AAAA,EACpC,aAAa,EAAE,SAAS,MAAM,WAAW,MAAM;AACjD;AAOO,IAAM,uCACX,MAAkC;AAChC,SAAO;AAAA,IACL,aAAa,CAAC;AAAA,EAChB;AACF;AAgBK,IAAM,wBAAN,cAAoC,eAIzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAGG;AACD,UAAM,cAAc,EAAE,GAAG,qCAAqC,GAAG,GAAG,MAAM;AAC1E,UAAM;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,cAAc,CAAC;AAAA,IACvB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,SAAc,SAAiB;AACpC,cAAU,qBAAqB,OAAO;AACtC,QACE,CAAC,CAAC,SAAS,OAAO,EAAE,MAAM,CAAC,QAAQ,iBAAiB,GAAG,CAAC,KACxD,CAAC,kBAAkB,OAAO,KAC1B,CAAC,KAAK,MAAM,YAAY,OAAO,KAC/B,CAAC,KAAK,MAAM,YAAY,OAAO,EAAE,OAAO,GACxC;AACA,aAAO;AAAA,IACT;AAEA,SAAK,OAAO,CAAC,UAAU;AACrB,aAAO,MAAM,YAAY,OAAO,EAAE,OAAO;AACzC,UAAI,OAAO,KAAK,MAAM,YAAY,OAAO,CAAC,EAAE,WAAW,GAAG;AACxD,eAAO,MAAM,YAAY,OAAO;AAAA,MAClC;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IACE,SACA,MACA,UAAU,MAAM,CAAC,GACjB,OAAO,IACP,aACA;AACA,cAAU,qBAAqB,OAAO;AACtC,QAAI,CAAC,kBAAkB,OAAO,GAAG;AAC/B,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ;AAAA,MACZ;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,UAAU,iBAAiB,IAAI;AACrC,QAAI,SAAS;AACX,YAAM,OAAO;AACb,YAAM,QAAQ;AAAA,IAChB;AAEA,SAAK,OAAO,CAAC,UAAU;AACrB,YAAM,cAAc;AAAA,QAClB,GAAG,KAAK,MAAM;AAAA,QACd,CAAC,OAAO,GAAG;AAAA,UACT,GAAG,KAAK,MAAM,YAAY,OAAO;AAAA,UACjC,CAAC,OAAO,GAAG;AAAA,QACb;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AACF;AAEA,IAAO,gCAAQ;","names":["AddressType"]}