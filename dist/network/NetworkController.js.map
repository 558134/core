{"version":3,"file":"NetworkController.js","sourceRoot":"","sources":["../../src/network/NetworkController.ts"],"names":[],"mappings":"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","sourcesContent":["import EthQuery from 'eth-query';\nimport Subprovider from 'web3-provider-engine/subproviders/provider';\nimport createInfuraProvider from 'eth-json-rpc-infura/src/createProvider';\nimport createMetamaskProvider from 'web3-provider-engine/zero';\nimport { Mutex } from 'async-mutex';\nimport type { Patch } from 'immer';\nimport { BaseController } from '../BaseControllerV2';\nimport {\n  MAINNET,\n  RPC,\n  TESTNET_NETWORK_TYPE_TO_TICKER_SYMBOL,\n} from '../constants';\nimport { RestrictedControllerMessenger } from '../ControllerMessenger';\n\n/**\n * Human-readable network name\n */\nexport type NetworkType =\n  | 'kovan'\n  | 'localhost'\n  | 'mainnet'\n  | 'rinkeby'\n  | 'goerli'\n  | 'ropsten'\n  | 'rpc';\n\nexport enum NetworksChainId {\n  mainnet = '1',\n  kovan = '42',\n  rinkeby = '4',\n  goerli = '5',\n  ropsten = '3',\n  localhost = '',\n  rpc = '',\n}\n\n/**\n * @type ProviderConfig\n *\n * Configuration passed to web3-provider-engine\n * @property rpcTarget - RPC target URL.\n * @property type - Human-readable network name.\n * @property chainId - Network ID as per EIP-155.\n * @property ticker - Currency ticker.\n * @property nickname - Personalized network name.\n */\nexport type ProviderConfig = {\n  rpcTarget?: string;\n  type: NetworkType;\n  chainId: string;\n  ticker?: string;\n  nickname?: string;\n};\n\nexport type Block = {\n  baseFeePerGas?: string;\n};\n\nexport type NetworkProperties = {\n  isEIP1559Compatible?: boolean;\n};\n\n/**\n * @type NetworkState\n *\n * Network controller state\n * @property network - Network ID as per net_version\n * @property isCustomNetwork - Identifies if the network is a custom network\n * @property provider - RPC URL and network name provider settings\n */\nexport type NetworkState = {\n  network: string;\n  isCustomNetwork: boolean;\n  provider: ProviderConfig;\n  properties: NetworkProperties;\n};\n\nconst LOCALHOST_RPC_URL = 'http://localhost:8545';\n\nconst name = 'NetworkController';\n\nexport type EthQuery = any;\n\nexport type NetworkControllerStateChangeEvent = {\n  type: `NetworkController:stateChange`;\n  payload: [NetworkState, Patch[]];\n};\n\nexport type NetworkControllerProviderChangeEvent = {\n  type: `NetworkController:providerChange`;\n  payload: [ProviderConfig];\n};\n\nexport type NetworkControllerGetProviderConfigAction = {\n  type: `NetworkController:getProviderConfig`;\n  handler: () => ProviderConfig;\n};\n\nexport type NetworkControllerGetEthQueryAction = {\n  type: `NetworkController:getEthQuery`;\n  handler: () => EthQuery;\n};\n\nexport type NetworkControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  NetworkControllerGetProviderConfigAction | NetworkControllerGetEthQueryAction,\n  NetworkControllerStateChangeEvent | NetworkControllerProviderChangeEvent,\n  string,\n  string\n>;\n\nexport type NetworkControllerOptions = {\n  messenger: NetworkControllerMessenger;\n  infuraProjectId?: string;\n  state?: Partial<NetworkState>;\n};\n\nconst defaultState: NetworkState = {\n  network: 'loading',\n  isCustomNetwork: false,\n  provider: { type: MAINNET, chainId: NetworksChainId.mainnet },\n  properties: { isEIP1559Compatible: false },\n};\n\n/**\n * Controller that creates and manages an Ethereum network provider.\n */\nexport class NetworkController extends BaseController<\n  typeof name,\n  NetworkState,\n  NetworkControllerMessenger\n> {\n  private ethQuery: EthQuery;\n\n  private internalProviderConfig: ProviderConfig = {} as ProviderConfig;\n\n  private infuraProjectId: string | undefined;\n\n  private mutex = new Mutex();\n\n  constructor({ messenger, state, infuraProjectId }: NetworkControllerOptions) {\n    super({\n      name,\n      metadata: {\n        network: {\n          persist: true,\n          anonymous: false,\n        },\n        isCustomNetwork: {\n          persist: true,\n          anonymous: false,\n        },\n        properties: {\n          persist: true,\n          anonymous: false,\n        },\n        provider: {\n          persist: true,\n          anonymous: false,\n        },\n      },\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.infuraProjectId = infuraProjectId;\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getProviderConfig`,\n      () => {\n        return this.state.provider;\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getEthQuery`,\n      () => {\n        return this.ethQuery;\n      },\n    );\n  }\n\n  private initializeProvider(\n    type: NetworkType,\n    rpcTarget?: string,\n    chainId?: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    this.update((state) => {\n      state.isCustomNetwork = this.getIsCustomNetwork(chainId);\n    });\n\n    switch (type) {\n      case 'kovan':\n      case MAINNET:\n      case 'rinkeby':\n      case 'goerli':\n      case 'ropsten':\n        this.setupInfuraProvider(type);\n        break;\n      case 'localhost':\n        this.setupStandardProvider(LOCALHOST_RPC_URL);\n        break;\n      case RPC:\n        rpcTarget &&\n          this.setupStandardProvider(rpcTarget, chainId, ticker, nickname);\n        break;\n      default:\n        throw new Error(`Unrecognized network type: '${type}'`);\n    }\n    this.getEIP1559Compatibility();\n  }\n\n  private refreshNetwork() {\n    this.update((state) => {\n      state.network = 'loading';\n      state.properties = {};\n    });\n    const { rpcTarget, type, chainId, ticker } = this.state.provider;\n    this.initializeProvider(type, rpcTarget, chainId, ticker);\n    this.lookupNetwork();\n  }\n\n  private registerProvider() {\n    this.provider.on('error', this.verifyNetwork.bind(this));\n    this.ethQuery = new EthQuery(this.provider);\n  }\n\n  private setupInfuraProvider(type: NetworkType) {\n    const infuraProvider = createInfuraProvider({\n      network: type,\n      projectId: this.infuraProjectId,\n    });\n    const infuraSubprovider = new Subprovider(infuraProvider);\n    const config = {\n      ...this.internalProviderConfig,\n      ...{\n        dataSubprovider: infuraSubprovider,\n        engineParams: {\n          blockTrackerProvider: infuraProvider,\n          pollingInterval: 12000,\n        },\n      },\n    };\n    this.updateProvider(createMetamaskProvider(config));\n  }\n\n  private getIsCustomNetwork(chainId?: string) {\n    return (\n      chainId !== NetworksChainId.mainnet &&\n      chainId !== NetworksChainId.kovan &&\n      chainId !== NetworksChainId.rinkeby &&\n      chainId !== NetworksChainId.goerli &&\n      chainId !== NetworksChainId.ropsten &&\n      chainId !== NetworksChainId.localhost\n    );\n  }\n\n  private setupStandardProvider(\n    rpcTarget: string,\n    chainId?: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    const config = {\n      ...this.internalProviderConfig,\n      ...{\n        chainId,\n        engineParams: { pollingInterval: 12000 },\n        nickname,\n        rpcUrl: rpcTarget,\n        ticker,\n      },\n    };\n    this.updateProvider(createMetamaskProvider(config));\n  }\n\n  private updateProvider(provider: any) {\n    this.safelyStopProvider(this.provider);\n    this.provider = provider;\n    this.registerProvider();\n  }\n\n  private safelyStopProvider(provider: any) {\n    setTimeout(() => {\n      provider?.stop();\n    }, 500);\n  }\n\n  private verifyNetwork() {\n    this.state.network === 'loading' && this.lookupNetwork();\n  }\n\n  /**\n   * Ethereum provider object for the current network\n   */\n  provider: any;\n\n  /**\n   * Sets a new configuration for web3-provider-engine.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @param providerConfig - The web3-provider-engine configuration.\n   */\n  set providerConfig(providerConfig: ProviderConfig) {\n    this.internalProviderConfig = providerConfig;\n    const { type, rpcTarget, chainId, ticker, nickname } = this.state.provider;\n    this.initializeProvider(type, rpcTarget, chainId, ticker, nickname);\n    this.registerProvider();\n    this.lookupNetwork();\n  }\n\n  get providerConfig() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Refreshes the current network code.\n   */\n  async lookupNetwork() {\n    /* istanbul ignore if */\n    if (!this.ethQuery || !this.ethQuery.sendAsync) {\n      return;\n    }\n    const releaseLock = await this.mutex.acquire();\n    this.ethQuery.sendAsync(\n      { method: 'net_version' },\n      (error: Error, network: string) => {\n        if (this.state.network === network) {\n          return;\n        }\n\n        this.update((state) => {\n          state.network = error ? /* istanbul ignore next*/ 'loading' : network;\n        });\n\n        this.messagingSystem.publish(\n          `NetworkController:providerChange`,\n          this.state.provider,\n        );\n\n        releaseLock();\n      },\n    );\n  }\n\n  /**\n   * Convenience method to update provider network type settings.\n   *\n   * @param type - Human readable network name.\n   */\n  setProviderType(type: NetworkType) {\n    // If testnet the ticker symbol should use a testnet prefix\n    const ticker =\n      type in TESTNET_NETWORK_TYPE_TO_TICKER_SYMBOL &&\n      TESTNET_NETWORK_TYPE_TO_TICKER_SYMBOL[type].length > 0\n        ? TESTNET_NETWORK_TYPE_TO_TICKER_SYMBOL[type]\n        : 'ETH';\n\n    this.update((state) => {\n      state.provider.type = type;\n      state.provider.ticker = ticker;\n      state.provider.chainId = NetworksChainId[type];\n    });\n    this.refreshNetwork();\n  }\n\n  /**\n   * Convenience method to update provider RPC settings.\n   *\n   * @param rpcTarget - The RPC endpoint URL.\n   * @param chainId - The chain ID as per EIP-155.\n   * @param ticker - The currency ticker.\n   * @param nickname - Personalized network name.\n   */\n  setRpcTarget(\n    rpcTarget: string,\n    chainId: string,\n    ticker?: string,\n    nickname?: string,\n  ) {\n    this.update((state) => {\n      state.provider.type = RPC;\n      state.provider.rpcTarget = rpcTarget;\n      state.provider.chainId = chainId;\n      state.provider.ticker = ticker;\n      state.provider.nickname = nickname;\n    });\n    this.refreshNetwork();\n  }\n\n  getEIP1559Compatibility() {\n    const { properties = {} } = this.state;\n\n    if (!properties.isEIP1559Compatible) {\n      if (typeof this.ethQuery?.sendAsync !== 'function') {\n        return Promise.resolve(true);\n      }\n      return new Promise((resolve, reject) => {\n        this.ethQuery.sendAsync(\n          { method: 'eth_getBlockByNumber', params: ['latest', false] },\n          (error: Error, block: Block) => {\n            if (error) {\n              reject(error);\n            } else {\n              const isEIP1559Compatible =\n                typeof block.baseFeePerGas !== 'undefined';\n              if (properties.isEIP1559Compatible !== isEIP1559Compatible) {\n                this.update((state) => {\n                  state.properties.isEIP1559Compatible = isEIP1559Compatible;\n                });\n              }\n              resolve(isEIP1559Compatible);\n            }\n          },\n        );\n      });\n    }\n    return Promise.resolve(true);\n  }\n}\n\nexport default NetworkController;\n"]}