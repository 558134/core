{"version":3,"file":"CollectibleMintingController.js","sourceRoot":"","sources":["../../src/assets/CollectibleMintingController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport type { NetworkState, NetworkType } from '../network/NetworkController';\nimport { MAINNET, IPFS_DEFAULT_GATEWAY_URL } from '../constants';\nimport { handleFetch } from '../util';\nimport type { TransactionController } from '../transaction/TransactionController';\nimport type { CollectiblesController } from './CollectiblesController';\n\nexport interface MintingOptions {\n  nftType: 'rarible' | 'custom';\n}\n\n/**\n * @type NftMetaData\n *\n * Collectible creator object coming from OpenSea api\n * @property name - name entered for nft\n * @property description - description entered for nft\n * @property image - IPFS hash of image (e.g. ipfs://QmYMuoAgKcqvd34rNU2WpoQunLj3WsAPWn9xUokiyposdC)\n */\nexport interface NftMetaData {\n  name: string;\n  description: string;\n  image: string;\n}\n\n/**\n * @type NftMediaData\n *\n * Collectible creator object coming from OpenSea api\n * @property name - name of media with extension\n * @property type - post file type (e.g. image/jpeg)\n * @property uri - path of image to be uploaded to IPFS\n */\nexport interface NftMediaData {\n  name: string | 'nft';\n  type: string;\n  uri: string;\n}\n\nexport interface CollectibleMintingMetaData {\n  name: string;\n  description: string;\n  image: string;\n  attributes: any;\n}\nexport interface CollectibleMintingControllerConfig extends BaseConfig {\n  networkType: NetworkType;\n  selectedAddress: string;\n  chainId: string;\n  ipfsGateway: string;\n  useIPFSSubdomains: boolean;\n}\nexport interface CollectibleMintingControllerState extends BaseState {\n  minting: 'awaiting' | 'started' | 'processing' | 'complete';\n}\n\nexport class CollectibleMintingController extends BaseController<\n  CollectibleMintingControllerConfig,\n  CollectibleMintingControllerState\n> {\n  private async customMint(collectible: CollectibleMintingMetaData) {\n    console.log(collectible);\n    // // Logic to covert metadat to hex\n    // 0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600c90805190602001906200005192919062000de6565b5066470de4df820000600d55612710600e556001600f556000601060..\n    // const txParams = {};\n    // txParams.from = '0x260416FDEc04AB146464aF833E63835a704C4860';\n    // txParams.value = '0x0';\n    // txParams.gas = '0x3DFB2E';\n    // txParams.data = data;\n    // const { transactionMeta } = await TransactionController.addTransaction(\n    //     txParams,\n    //     'nft',\n    //     WalletDevice.MM_MOBILE\n    // );\n    // await TransactionController.approveTransaction(transactionMeta.id);\n  }\n\n  private async raribleMint(collectible: CollectibleMintingMetaData) {\n    console.log(collectible);\n    // Prepare data\n\n    // Mint\n    this.addTransaction({\n      from: '',\n    });\n\n    const result: Promise<string> = new Promise((resolve, reject) => {\n      this.hub.once(`tx.id:finished`, () => {\n        // if succesful\n        this.addCollectible('test', 'test');\n        return resolve('success');\n        // else show error\n        return reject(new Error());\n      });\n    });\n\n    return result;\n  }\n\n  /**\n   * Method to add and pin data to IPFS.\n   *\n   * @param data - data objects to be posted on IPFS\n   * @returns IPFS response\n   */\n  async uploadDataToIpfs(data: NftMediaData | NftMetaData): Promise<Response> {\n    const formData = new FormData();\n    formData.append('file', JSON.stringify(data));\n\n    const ipfsAddResponse = await handleFetch(\n      'https://ipfs.infura.io:5001/api/v0/add',\n      {\n        method: 'POST',\n        body: formData,\n      },\n    );\n\n    return ipfsAddResponse;\n  }\n\n  async mint(collectible: CollectibleMintingMetaData, options: MintingOptions) {\n    if (options.nftType === 'rarible') {\n      await this.raribleMint(collectible);\n    } else {\n      await this.customMint(collectible);\n    }\n  }\n\n  /**\n   * Sets an Infura Project ID to POST collectible information.\n   *\n   * @param infuraProjectId - Infura Project ID\n   */\n  setInfuraProjectId(infuraProjectId: string) {\n    this.infuraProjectId = infuraProjectId;\n  }\n\n  /**\n   * Optional Infura Project ID to use with infura\n   */\n  infuraProjectId?: string;\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'CollectibleMintingController';\n\n  private addCollectible: CollectiblesController['addCollectible'];\n\n  private addTransaction: TransactionController['addTransaction'];\n\n  /**\n   * Creates the CollectibleMintingController instance.\n   *\n   * @param options - The controller options.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.addCollectible - Allows the controlelr to add a collectible to collectible controller.\n   * @param options.addTransaction - Allows the controler to add a transaction to transaction controller.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      onNetworkStateChange,\n      addCollectible,\n      addTransaction,\n    }: {\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      addCollectible: CollectiblesController['addCollectible'];\n      addTransaction: TransactionController['addTransaction'];\n    },\n    config?: Partial<BaseConfig>,\n    state?: Partial<CollectibleMintingController>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      networkType: MAINNET,\n      selectedAddress: '',\n      chainId: '',\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      useIPFSSubdomains: true,\n    };\n\n    this.defaultState = {\n      minting: 'awaiting',\n    };\n    this.initialize();\n    onNetworkStateChange(({ provider }) => {\n      const { chainId } = provider;\n      this.configure({ chainId });\n    });\n    this.addCollectible = addCollectible;\n    this.addTransaction = addTransaction;\n  }\n}\n\nexport default CollectibleMintingController;\n"]}