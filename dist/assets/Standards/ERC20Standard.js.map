{"version":3,"file":"ERC20Standard.js","sourceRoot":"","sources":["../../../src/assets/Standards/ERC20Standard.ts"],"names":[],"mappings":"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","sourcesContent":["import { abiERC20 } from '@metamask/metamask-eth-abis';\nimport { BN, toUtf8 } from 'ethereumjs-util';\nimport { AbiCoder } from '@ethersproject/abi';\nimport { ERC20 } from '../../constants';\nimport { Web3 } from './standards-types';\n\nexport class ERC20Standard {\n  private web3: Web3;\n\n  constructor(web3: Web3) {\n    this.web3 = web3;\n  }\n\n  /**\n   * Get balance or count for current account on specific asset contract.\n   *\n   * @param address - Asset ERC20 contract address.\n   * @param selectedAddress - Current account public address.\n   * @returns Promise resolving to BN object containing balance for current account on specific asset contract.\n   */\n  async getBalanceOf(address: string, selectedAddress: string): Promise<BN> {\n    const contract = this.web3.eth.contract(abiERC20).at(address);\n    return new Promise<BN>((resolve, reject) => {\n      contract.balanceOf(selectedAddress, (error: Error, result: BN) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query for the decimals for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract string.\n   * @returns Promise resolving to the 'decimals'.\n   */\n  async getTokenDecimals(address: string): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC20).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.decimals((error: Error, result: BN | string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        const resultString = result.toString();\n        // We treat empty string or 0 as invalid\n        if (resultString.length > 0 && resultString !== '0') {\n          resolve(resultString);\n        }\n\n        reject(new Error('Failed to parse token decimals'));\n      });\n    });\n  }\n\n  /**\n   * Query for symbol for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract address.\n   * @returns Promise resolving to the 'symbol'.\n   */\n  async getTokenSymbol(address: string): Promise<string> {\n    // Signature for calling `symbol()`\n    const payload = { to: address, data: '0x95d89b41' };\n    return new Promise<string>((resolve, reject) => {\n      this.web3.eth.call(payload, undefined, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        const abiCoder = new AbiCoder();\n\n        // Parse as string - treat empty string as failure\n        try {\n          const decoded = abiCoder.decode(['string'], result)[0];\n          if (decoded?.length > 0) {\n            resolve(decoded);\n            return;\n          }\n        } catch {\n          // Ignore error\n        }\n\n        // Parse as bytes - treat empty string as failure\n        try {\n          const utf8 = toUtf8(result);\n          if (utf8.length > 0) {\n            resolve(utf8);\n            return;\n          }\n        } catch {\n          // Ignore error\n        }\n\n        reject(new Error('Failed to parse token symbol'));\n      });\n    });\n  }\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param address - Asset contract address.\n   * @param userAddress - The public address for the currently active user's account.\n   * @returns Promise resolving an object containing the standard, decimals, symbol and balance of the given contract/userAddress pair.\n   */\n  async getDetails(\n    address: string,\n    userAddress?: string,\n  ): Promise<{\n    standard: string;\n    symbol: string | undefined;\n    decimals: string | undefined;\n    balance: BN | undefined;\n  }> {\n    const [decimals, symbol] = await Promise.all([\n      this.getTokenDecimals(address),\n      this.getTokenSymbol(address),\n    ]);\n    let balance;\n    if (userAddress) {\n      balance = await this.getBalanceOf(address, userAddress);\n    }\n    return {\n      decimals,\n      symbol,\n      balance,\n      standard: ERC20,\n    };\n  }\n}\n"]}