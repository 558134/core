{"version":3,"file":"ERC721Standard.js","sourceRoot":"","sources":["../../../../src/assets/CollectibleStandards/ERC721/ERC721Standard.ts"],"names":[],"mappings":"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","sourcesContent":["const ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\nconst ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\n\nexport class ERC721Standard {\n  /**\n   * Query if contract implements ERC721Metadata interface.\n   *\n   * @param contract - ERC721 asset contract.\n   * @returns Promise resolving to whether the contract implements ERC721Metadata interface.\n   */\n  contractSupportsMetadataInterface = async (\n    contract: any,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      contract,\n      ERC721_METADATA_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Query if contract implements ERC721Enumerable interface.\n   *\n   * @param contract - ERC721 asset contract.\n   * @returns Promise resolving to whether the contract implements ERC721Enumerable interface.\n   */\n  contractSupportsEnumerableInterface = async (\n    contract: any,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      contract,\n      ERC721_ENUMERABLE_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Enumerate assets assigned to an owner.\n   *\n   * @param contract - ERC721 asset contract.\n   * @param selectedAddress - Current account public address.\n   * @param index - A collectible counter less than `balanceOf(selectedAddress)`.\n   * @returns Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'.\n   */\n  getCollectibleTokenId = async (\n    contract: any,\n    selectedAddress: string,\n    index: number,\n  ): Promise<string> => {\n    const { tokenOfOwnerByIndex } = contract.methods;\n    return new Promise<string>((resolve, reject) => {\n      tokenOfOwnerByIndex(\n        selectedAddress,\n        index,\n        (error: Error, result: string) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  };\n\n  /**\n   * Query for tokenURI for a given asset.\n   *\n   * @param contract - ERC721 asset contract.\n   * @param tokenId - ERC721 asset identifier.\n   * @returns Promise resolving to the 'tokenURI'.\n   */\n  getCollectibleTokenURI = async (\n    contract: any,\n    tokenId: string,\n  ): Promise<string> => {\n    const supportsMetadata = await this.contractSupportsMetadataInterface(\n      contract,\n    );\n    if (!supportsMetadata) {\n      throw new Error('Contract does not support ERC721 metadata interface.');\n    }\n    const { tokenURI } = contract.methods;\n    return new Promise<string>((resolve, reject) => {\n      tokenURI(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for name for a given asset.\n   *\n   * @param contract - ERC721 asset contract.\n   * @returns Promise resolving to the 'name'.\n   */\n  getAssetName = async (contract: any): Promise<string> => {\n    const { name } = contract.methods;\n    return new Promise<string>((resolve, reject) => {\n      name((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for symbol for a given asset.\n   *\n   * @param contract - ERC721 asset contract address.\n   * @returns Promise resolving to the 'symbol'.\n   */\n  getAssetSymbol = async (contract: any): Promise<string> => {\n    const { symbol } = contract.methods;\n    return new Promise<string>((resolve, reject) => {\n      symbol((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for owner for a given ERC721 asset.\n   *\n   * @param contract - ERC721 asset contract.\n   * @param tokenId - ERC721 asset identifier.\n   * @returns Promise resolving to the owner address.\n   */\n  async getOwnerOf(contract: any, tokenId: string): Promise<string> {\n    const { ownerOf } = contract.methods;\n    return new Promise<string>((resolve, reject) => {\n      ownerOf(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param contract - Asset contract.\n   * @param interfaceId - Interface identifier.\n   * @returns Promise resolving to whether the contract implements `interfaceID`.\n   */\n  private contractSupportsInterface = async (\n    contract: any,\n    interfaceId: string,\n  ): Promise<boolean> => {\n    const { supportsInterface } = contract.methods;\n    return new Promise<boolean>((resolve, reject) => {\n      supportsInterface(interfaceId, (error: Error, result: boolean) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n}\n"]}